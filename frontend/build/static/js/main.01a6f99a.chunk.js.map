{"version":3,"sources":["myConfig.js","Components/State.js","Components/Carousel.js","Components/RandomGenerator.js","node_functions.js","Components/SideBar.js","hooks/useKeypress.js","Components/SearchSuggestion/SearchSuggestion.js","Components/NavBar.js","Components/Graph/Graph.js","Components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["API_ENDPOINT","window","width","innerWidth","height","innerHeight","getWindowDimensions","colors","default","done","stroke","highlight","highlightStroke","selected","onPath","gray","antonim","graphConfig","initial_state","nodes","links","d3Data","forceData","definedNode","graphType","isError","errorMsg","isFetchFailed","isWordNotFound","wordsNotFound","isPathNotFound","pathsNotFound","isEmpty","isLoading","searchTerm","DestinationTerm","isDeepLinks","showModal","isSideBar","stateReducer","state","action","node","stringLink","findIdNcolor","selectedNode","color","id","removeDuplicateWithSet","array","jsonObject","map","JSON","stringify","uniqueSet","Set","Array","from","parse","removeDuplicateNodes","keys","uniqueArray","forEach","has","push","add","type","payload","source","target","link","removeDuplicateLinks","filter","destinationTerm","prevGraphType","Error","CoruselContainer","Carousel","Item","className","src","alt","Caption","getRandomInt","max","Math","floor","random","processNode","w_id","word","getNode","nodeId","onClickNode","input","dispatchState","queryAdjecentNodes","timelyDispatch","dispatchFunc","waitTime","setTimeout","queryNewWord","fetch","then","result","json","catchError","catch","linkAll","adjNodes","adjNode","every","isNewNode","pairUp","list","pairs","i","length","removeNotFoundWords","words","a","foundWords","lenght","Promise","all","index","response","detail","err","console","log","Boolean","processPath","path","request","prevNode","first","last","fetchPathsParts","pathRequests","paths","amendPath","nextNodeGenerator","start","end","pathIndex","curPath","nodeIndex","getGaps","gaps","gap","wasPath","wasGap","bridgeGap","leftPath","lastWord","gen","curIter","next","foundBridge","value","dispatchPath","finalPath","queryPath","pathParts","SideBarContainer","toogleSideBar","style","float","position","collapsed","onClick","icon","marginLeft","marginTop","faBook","faBookOpen","iconShape","faScroll","active","definitions","syntax","textAlign","syntaxes","def","key","title","open","faCircle","definition","paddingRight","renderDefinitions","examples","popperArrow","faAlignLeft","fontSize","example","etymology","faLandmark","renderEtymology","synonyms","faProjectDiagram","synonym","renderSynonyms","notes","faStickyNote","Notes","renderNodes","useKeypress","useEffect","onKeyup","e","addEventListener","removeEventListener","SuggestionsContainer","props","useState","suggestions","setSuggestions","setSelected","isWrittingWord","addToSearchTerm","len","wordList","split","join","suggestion","test","filterSuggestions","SuggestionList","children","NavBarContainer","ref","React","createRef","handleSearchSubmit","getmultipleWords","toLowerCase","string","replace","trim","handleRadioGraphChange","changeEvent","Navbar","expand","variant","backgroundColor","href","Brand","InputGroup","size","md","maxWidth","Prepend","FormControl","as","placeholder","onChange","change","Append","Button","Toggle","aria-controls","Collapse","Nav","NavDropdown","faSlidersH","Form","Group","Col","Check","label","name","checked","Divider","GraphContainer","handleClick","useCallback","dimensions","setDimensions","handleResize","_","backgroundImage","data","config","graphData","onNodeClick","nodeLabel","nodeRelSize","enableNodeDrag","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkDirectionalParticles","linkDirectionalParticleSpeed","linkDirectionalParticleWidth","linkWidth","onNodeDragEnd","fx","x","fy","y","fz","z","nodeCanvasObject","ctx","globalScale","font","bckgDimensions","measureText","n","fillStyle","fillRect","textBaseline","fillText","nodeThreeObject","sprite","SpriteText","textHeight","chosenGraph","AlertContainer","percentage","setPercentange","interval","setInterval","clearInterval","Alert","dismissible","onClose","ProgressBar","maxHeight","now","Heading","App","useReducer","NavBar","display","SideBar","Graph","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.01a6f99a.chunk.js","sourcesContent":["// the graph configuration, you only need to pass down properties\n// that you want to override, otherwise default ones will be used\n// Also misc. settings\n\nconst DEBUGGING = false\n\nconst API_ENDPOINT = DEBUGGING ? \n\t'http://127.0.0.1:8000/api/' :  //debuging local\n\t'http://128.199.9.124:8080/api/' //production\n\nfunction getWindowDimensions() {\n\t\tconst { innerWidth: width, innerHeight: height  } = window;\n\t\treturn { width : width - 15, height: height - 87 };\n}\n\nconst {width, height} = getWindowDimensions();\n\nconst colors = {\n\t\tred: '#800517', // firerick\n\t\tblack: '#1d1d1d', // some shade of black \n\t\tblue: '#17a2b8', // bootstrap info blue\n\t\tnode: {  \n\t\t\t\tdefault: '#3D3C3A', // oil black\n\t\t\t\tdone: '#B6B6B4', // gray cloud\n\t\t\t\tstroke: '#8bb5bc', // bootstrap info blue\n\t\t\t\thighlight: '#E41B17', // red\n\t\t\t\thighlightStroke: '#27332F', \n\t\t\t\tselected: '#800517', // firerick\n\t\t\t\tonPath: '#990012', // red wine\n\t\t},\n\t\tlink:{\n\t\t\t\tdefault: 'rgba(23,162,184,50%)', //bootstrap faded info blue\n\t\t\t\tgray: '#D1D0CE', // gray goose\n\t\t\t\tonPath: 'rgba(153,0,18, 70%)', // faded Red wine\n\t\t\t\thighlight: '#E41B17', // red\n\t\t\t\tantonim: '',\n\t\t},\n\t\tfont: {\n\t\t\t\tdefault: \"black\",\n\t\t}\n}\n\nconst  graphConfig = {\n\t\t\"automaticRearrangeAfterDropNode\": false,\n\t\t\"collapsible\": false,\n\t\t\"directed\": true,\n\t\t\"focusAnimationDuration\": 0.75,\n\t\t\"backgroundColor\": \"white\",\n\t\t\"focusZoom\": 1,\n\t\t\"height\": height,\n\t\t\"width\": width,\n\t\t\"highlightDegree\": 100,\n\t\t\"highlightOpacity\": 0.5,\n\t\t\"linkHighlightBehavior\": true,\n\t\t\"maxZoom\": 10,\n\t\t\"minZoom\": 0.1,\n\t\t\"nodeHighlightBehavior\": true,\n\t\t\"panAndZoom\": false,\n\t\t\"staticGraph\": false,\n\t\t\"staticGraphWithDragAndDrop\": false,\n\t\t\"d3\": {\n\t\t\t\t\"alphaTarget\": 0.3,\n\t\t\t\t\"gravity\": -140,\n\t\t\t\t\"linkLength\": 3,\n\t\t\t\t\"linkStrength\": 1,\n\t\t\t\t\"disableLinkForce\": false\n\t\t},\n\t\t\"node\": {\n\t\t\t\t\"color\": colors.node.default,\n\t\t\t\t\"fontColor\": colors.font.default,\n\t\t\t\t\"fontSize\": 8,\n\t\t\t\t\"fontWeight\": \"bold\",\n\t\t\t\t\"highlightColor\": colors.node.highlight,\n\t\t\t\t\"highlightFontSize\": 14,\n\t\t\t\t\"highlightFontWeight\": \"bold\",\n\t\t\t\t\"highlightStrokeColor\": colors.node.highlightStroke,\n\t\t\t\t\"highlightStrokeWidth\": 2,\n\t\t\t\t\"labelProperty\": \"id\",\n\t\t\t\t\"mouseCursor\": \"pointer\",\n\t\t\t\t\"opacity\": 1,\n\t\t\t\t\"renderLabel\": true,\n\t\t\t\t\"size\": 210,\n\t\t\t\t\"strokeColor\": colors.node.stroke,\n\t\t\t\t\"strokeWidth\": \"1.6\",\n\t\t\t\t\"svg\": \"\",\n\t\t\t\t\"symbolType\": \"circle\"\n\t\t},\n\t\t\"link\": {\n\t\t\t\t\"color\": colors.link.default,\n\t\t\t\t\"fontColor\": \"black\",\n\t\t\t\t\"fontSize\": 8,\n\t\t\t\t\"fontWeight\": \"normal\",\n\t\t\t\t\"highlightColor\": colors.link.highlight,\n\t\t\t\t\"highlightFontSize\": 8,\n\t\t\t\t\"highlightFontWeight\": \"normal\",\n\t\t\t\t\"labelProperty\": \"label\",\n\t\t\t\t\"mouseCursor\": \"pointer\",\n\t\t\t\t\"opacity\": 0.7,\n\t\t\t\t\"renderLabel\": true,\n\t\t\t\t\"semanticStrokeWidth\": false,\n\t\t\t\t\"strokeWidth\": 1.5,\n\t\t\t\t\"markerHeight\": 3,\n\t\t\t\t\"markerWidth\": 20,\n\t\t}\n};\n\nexport { DEBUGGING, API_ENDPOINT, graphConfig, colors, getWindowDimensions };\n","import { colors }  from \"../myConfig\";\n\nconst initial_state = {\n\t\t/* graph payload (with minimalist structure) */\n\t\tnodes: [], // the master node information \n\t\tlinks: [],  //the master links information\n\t\td3Data:{ // the copy of data for the d3 graph\n\t\t\t\tnodes: [],\n\t\t\t\tlinks: [],\n\t\t},\n\t\tforceData:{ // th copy of data for the force graphs\n\t\t\t\tnodes: [],\n\t\t\t\tlinks: [],\n\t\t},\n\t\tselected:{},\n\t\tdefinedNode:{},\n\t\tgraphType: 'd3',\n\t\tisError: false,\n\t\terrorMsg: \"\",\n\t\tisFetchFailed: false,\n\t\tisWordNotFound: false,\n\t\twordsNotFound: [],\n\t\tisPathNotFound: false,\n\t\tpathsNotFound: [],\n\t\tisEmpty: true,\n\t\tisLoading: true,\n\t\tsearchTerm: '',\n\t\tDestinationTerm: '',\n\t\tisDeepLinks: false,\n\t\tshowModal: false,\n\t\tisSideBar: true,\n};\n\nconst stateReducer = (state, action) =>{\n\t\t/* make reducer for the words data and internal state */\n\t\tlet node;\n\t\tlet stringLink \n\n\t\t/* finds a node with a given string and colors the node */\n\t\tconst findIdNcolor = (selectedNode, color) =>\n\t\t\t\t(node) => node.id === selectedNode? {...node, color: color }: node; \n\t\t/* reomeves the duplicate node or link in a array */\n\t\tconst removeDuplicateWithSet = ( array ) =>{\n\t\t\t\tlet jsonObject = array.map(JSON.stringify); \n\t\t\t\tlet uniqueSet = new Set(jsonObject); \n\t\t\t\tlet uniqueArray = Array.from(uniqueSet).map(JSON.parse); \n\t\t\t\treturn uniqueArray\n\t\t}\n\n\t\tconst removeDuplicateNodes = ( nodes ) => {\n\t\t\t\tlet keys = new Set();\n\t\t\t\tlet uniqueArray = [];\n\t\t\t\tnodes.forEach( node => { \n\t\t\t\t\t\tif( !keys.has(node.id)){ \n\t\t\t\t\t\t\t\t// if it is not in unique keys\n\t\t\t\t\t\t\t\tuniqueArray.push(node);\n\t\t\t\t\t\t\t\tkeys.add(node.id);\n\t\t\t\t\t\t} \n\t\t\t\t})\n\t\t\t\treturn uniqueArray;\n\t\t}\n\n\t\tconst removeDuplicateLinks = ( links ) => {\n\t\t\t\tlet keys = new Set();\n\t\t\t\tlet uniqueArray = [];\n\t\t\t\tlinks.forEach( link => {\n\t\t\t\t\t\t// if it is an link\n\t\t\t\t\t\tlet id = link.source + ',' + link.target;\n\t\t\t\t\t\tif( !keys.has(id) ){ \n\t\t\t\t\t\t\t\t// if it is not in unique keys\n\t\t\t\t\t\t\t\tuniqueArray.push(link);\n\t\t\t\t\t\t\t\tkeys.add(id);\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\treturn uniqueArray;\n\t\t}\n\n\t\tswitch (action.type){\n\t\t\t\tcase 'SET_NEW_NODES':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload ],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.d3Data.nodes, ...action.payload ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.forceData.nodes, ...action.payload ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NEW_LINKS':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload ],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.d3Data.links, ...action.payload ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.forceData.links, ...action.payload ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NEW_LINK':\n\t\t\t\t\t\tstringLink = { \n\t\t\t\t\t\t\t\t...action.payload, \n\t\t\t\t\t\t\t\tsource: action.payload.source.id,\n\t\t\t\t\t\t\t\ttarget: action.payload.target.id,\n\t\t\t\t\t\t\t\t color: colors.link.default,\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tlinks: [ ...state.links, stringLink ],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tlinks: removeDuplicateWithSet([ ...state.d3Data.links, stringLink ]),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.forceData.links, { ...action.payload, color: colors.link.default } ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NODE_LINK':\n\t\t\t\t\t\tstringLink = { \n\t\t\t\t\t\t\t\t...action.payload.link, \n\t\t\t\t\t\t\t\tsource:action.payload.link.source.id,\n\t\t\t\t\t\t\t\ttarget:action.payload.link.target.id,\n\t\t\t\t\t\t\t\tcolor: colors.link.default,\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: removeDuplicateNodes([ ...state.nodes, action.payload.node ]),\n\t\t\t\t\t\t\t\tlinks: removeDuplicateLinks([ ...state.links, stringLink ]),\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: removeDuplicateNodes([ ...state.d3Data.nodes, { ...action.payload.node } ]),\n\t\t\t\t\t\t\t\t\t\tlinks: removeDuplicateWithSet([ ...state.d3Data.links, stringLink ]),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.forceData.nodes, action.payload.node ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.forceData.links, stringLink ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'CLEAR_LINKS':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'CLEAR_NODES':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_STATE':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.d3Data.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.d3Data.links, ...action.payload.links ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.forceData.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.forceData.links, ...action.payload.links ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NEW_NODE':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [ { ...action.payload} ],\n\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: [{ ...action.payload, selected: true, color: colors.node.selected  }],\n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [ action.payload  ],\n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tselected: action.payload, // save as selected\n\t\t\t\t\t\t\t\tdefinedNode: action.payload, // save as a definietion \n\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_PATH_NODE':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, { ...action.payload.node, selected: true, }],\n\t\t\t\t\t\t\t\tlinks: [ ...state.links, { ...action.payload.link, color: colors.link.onPath } ],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.d3Data.nodes, { ...action.payload.node, selected: true, }],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.d3Data.links, { ...action.payload.link, color: colors.link.onPath } ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.forceData.nodes, { ...action.payload.node, selected: true, }],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.forceData.links, { ...action.payload.link, color: colors.link.onPath } ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tselected: action.payload.node, // save as selected\n\t\t\t\t\t\t\t\tdefinedNode: action.payload.node, // save as a definietion \n\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NODE_DONE':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: state.d3Data.nodes.map(findIdNcolor(action.payload.id, colors.node.done)), \n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_DEFINED_NODE':\n\t\t\t\t\t\tnode = state.nodes.filter( node => node.id === action.payload )[0];\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tdefinedNode: node,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NODE_SELECTED':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: state.d3Data.nodes.map(findIdNcolor(action.payload.id, colors.node.selected)), \n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tselected: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SWITCH_SELECTED_NODE':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: state.d3Data.nodes.map(findIdNcolor(action.payload.id, colors.node.selected)), \n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tselected: action.payload,\n\t\t\t\t\t\t\t\tdefinedNode: action.payload,\n\t\t\t\t\t\t};\n\n\t\t\t\tcase 'ERASE_NODES':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_SEARCH_TERM':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tsearchTerm: action.payload,\t\t\t\t\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_DEST_TERM':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tdestinationTerm: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcase 'TOGGEL_MODAL':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tshowModal: !state.showModal,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_SHOW_MODAL':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tshowModal: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_WORD_NOT_FOUND':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\tisWordNotFound: true,\n\t\t\t\t\t\t\t\t// add not found wors to list\n\t\t\t\t\t\t\t\twordsNotFound: new Set([ ...state.wordsNotFound, action.payload]),\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_PATH_NOT_FOUND':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\tisPathNotFound: true,\n\t\t\t\t\t\t\t\tpathsNotFound: new Set([ ...state.pathsNotFound, { ...action.payload}]),\n\t\t\t\t\t\t};\n\t\t\t\tcase 'DISSMISS_ERROR':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: false,\n\t\t\t\t\t\t\t\terrorMsg: \"\",\n\t\t\t\t\t\t\t\tisWordNotFound: false,\n\t\t\t\t\t\t\t\twordsNotFound: [],\n\t\t\t\t\t\t\t\tisPathNotFound: false,\n\t\t\t\t\t\t\t\tpathsNotFound:  [],\n\t\t\t\t\t\t};\n\t\t\t\tcase 'TOGGLE_DEEP_LINKS':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisDeepLinks: !state.isDeepLinks,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'TOGGLE_SIDE_BAR':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisSideBar: !state.isSideBar,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_FETCH_FAILED':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\tisFetchFailed: true,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_GRAPH_TYPE':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t// save the previous graph type\n\t\t\t\t\t\t\t\tprevGraphType : state.graphType,\n\t\t\t\t\t\t\t\t// set changed graph type\n\t\t\t\t\t\t\t\tgraphType: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_ERROR':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\terrorMsg: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error();\n\t\t}\n}\n\nexport { initial_state, stateReducer };\n\n","import React  from 'react';\nimport { Carousel  } from 'react-bootstrap';\n\n/*\n * =======================================\n *      Carousel Componente for React \n * =======================================\n */\n\nfunction CoruselContainer(){\n\t\treturn(\n\t\t\t\t<Carousel>\n\t\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName=\"d-block w-100\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"graph_scaled_down.jpg\"\n\t\t\t\t\t\t\t\t\t\talt=\"First slide\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t\t\t\t<h3>First slide label</h3>\n\t\t\t\t\t\t\t\t\t\t<p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n\t\t\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t\t</Carousel.Item>\n\t\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName=\"d-block h-100 w-100\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"graph1.jpg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Third slide\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t\t\t\t<h3>Second slide label</h3>\n\t\t\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n\t\t\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t\t</Carousel.Item>\n\t\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName=\"d-block h-100 w-100\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"graph2.jpg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Third slide\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t\t\t\t<h3>Third slide label</h3>\n\t\t\t\t\t\t\t\t\t\t<p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\n\t\t\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t\t</Carousel.Item>\n\t\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName=\"d-block h-100 w-100\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"graph3.jpg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Third slide\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t\t\t\t<h3>Third slide label</h3>\n\t\t\t\t\t\t\t\t\t\t<p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\n\t\t\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t\t</Carousel.Item>\n\t\t\t\t</Carousel>\n\t\t)\n}\n\nexport default CoruselContainer;\n","const unselectedNodeColor = '#3D3C3A'\nconst unselectedLinkColor = '#d3d3d3'\nconst selectedNodeColor = '#E41B17'\nconst selectedLinkColor = '#E41B17'\nconst pathNodeColor = '#17E0E3'\nconst pathLinkColor = '#17E0E3'\n//const pathLinkColor = '#E41B17'\n\n// function for getting random num\nconst getRandomInt = (max) => {\n\t\treturn Math.floor(Math.random() * Math.floor(max))+1 ;\n}\n\n// fuction for getting a random string\nconst getRandomStr = (length) => {\n\t\tvar result           = '';\n\t\tvar characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\t\tvar charactersLength = characters.length;\n\t\tfor ( var i = 0; i < length; i++ ) result += characters.charAt(Math.floor(Math.random() * charactersLength));\n\t\treturn result;\n}\n\n//generate random link\nconst getRandomLinks = (link_number, word, nodes) => {\n\t\tvar seen_targets = [] \n\t\tvar links = [];\n\t\tfor (var i = 0; i < link_number; i++ ){\n\t\t\t\tvar target = nodes[getRandomInt(nodes.length-1)].id;\n\t\t\t\tif(!seen_targets.includes(target)){\n\t\t\t\t\t\tlinks.push({ source: word, target: target });\n\t\t\t\t\t\tseen_targets.push(target);\n\t\t\t\t}\n\t\t}\n\t\treturn links;\n}\n\n// Generate a random node \nconst genRandomNode = (nodes) => {\n\t\tvar title = getRandomStr(6);\n\t\tvar links = getRandomLinks(getRandomInt(6), title, nodes);\n\t\treturn { node:{ id: title }, links };\n}\n\n\n// generate a list of grapth recursibly\nconst genGrapNodes = (word, depth=0, data=[]) =>{\n\t\tfor(var i = 0; i < getRandomInt(3); i++){\n\t\t\t\tvar adjacent_word = getRandomStr(8);\n\t\t\t\tdata.push({  node:{id: adjacent_word }, links:[{ source: word, target: adjacent_word }] });\n\t\t\t\tif( depth > 0 ) genGrapNodes(adjacent_word, depth -1, data);\n\t\t}\n\t\treturn data;\n}\n\nconst makeNewNode = (prevNode, newNode, path=false, selected=false) => {\n\t\tvar nodeColor = (path)? pathNodeColor : (selected)? selectedNodeColor : unselectedNodeColor\n\t\tvar linkColor = (path)? pathLinkColor : (selected)? selectedLinkColor : unselectedLinkColor\n\t\t\t\treturn { \n\t\t\t\t\t\tnode:{ id: newNode, color: nodeColor}, \n\t\t\t\t\t\tlinks:[{ source: prevNode, target: newNode, color: linkColor}] \n\t\t\t\t}\n\t\t};\n\n// Generate a Nodes path from  node to the other\nconst genPath = (start, destination) =>{\n\t\tlet distance  = getRandomInt(10) + 5;\n\t\tlet currentNode = start;\n\t\tlet data = [];\n\t\tdata.push({node:{ id: start, color: pathNodeColor}, links:[] });\n\t\tfor(var i = 0; i < distance; i++){\n\t\t\t\tvar nextNode = getRandomStr(8);\n\t\t\t\tdata.push(makeNewNode(currentNode, nextNode, true));\n\t\t\t\tfor(var j = 0; j < getRandomInt(5); j++){\n\t\t\t\t\t\tvar adjacentNode = getRandomStr(8);\n\t\t\t\t\t\tdata.push(makeNewNode(nextNode, adjacentNode));\n\t\t\t\t}\n\t\t\t\tcurrentNode = nextNode;\n\t\t}\n\t\tdata.push(makeNewNode(currentNode, destination, true));\n\t\treturn data;\n}\n\n\n// generate a list of grapth recursibly sent them in lists \nconst genGrapDepth = (word, depth=0, data={ nodes:[], links:[] }) =>{\n\t\t// Add word to data nodes \n\t\tdata.nodes.push({ id: word });\n\t\t//for word get adjacent words into link data\n\t\tif( depth <= 0 ) return data;\n\t\tfor(var i = 0; i < getRandomInt(6); i++){\n\t\t\t\t//gen a adjecent word\n\t\t\t\tvar adjacent_word = getRandomStr(8);\n\t\t\t\t// Add link \n\t\t\t\tdata.links.push({ source: word, target: adjacent_word });\n\t\t\t\t// be a recursive bitch\n\t\t\t\tgenGrapDepth(adjacent_word, depth -1, data);\n\t\t}\n\t\treturn data;\n}\n\n\nexport { getRandomInt, getRandomStr, getRandomLinks, genRandomNode, genGrapNodes, genPath, genGrapDepth }\n","import { colors, API_ENDPOINT }  from \"./myConfig\";\nimport { getRandomInt }  from \"./Components/RandomGenerator\";\n/*\n * ==================================================\n *      Functions Definnitions for handeling changes\n * ==================================================\n * \n */\n\n/* \n * Functions for processing single node search and adjacent nodes \n * */\n\nconst processNode = (node) =>{\n\t\t/* process a node from the api into one for the dispatcher\n\t\t * it changes title for id, for instance */\n\t\tnode['id'] = node.w_id;\n\t\tnode['label'] = node.word;\n\t\tnode['key'] = node.w_id;\n\t\tnode['isSelected'] = false;\n\t\tnode['isDone'] = false;\n\t\tnode['color'] = colors.node.default;\n\t\treturn node\n}\n\n/* retrive node with given node id from state */\nconst getNode = (nodeId, state) => \n\t\tstate.nodes.filter( node => \n\t\t\t\tnode.id === nodeId )[0]\n\n/* returns true id node is not in state in state, \n * could import time complexity by using a hash table */\nconst isNewNode = (nodeId, state) => \n\t\tstate.nodes.every( node => node.id !== nodeId )\n\n/* when user clicks on a node, query adjacent nodes\n * and set node as selected */\nconst onClickNode = (input, state, dispatchState) => {\n\t\tlet node = (typeof input == 'string')? \n\t\t\t\tgetNode(input, state.forceData) : input;\n\t\tstate.selected['color'] = colors.node.done;\n\t\tqueryAdjecentNodes(node, state, dispatchState)\n\t\tdispatchState({type:'SET_NODE_DONE', payload: state.selected})\n\t\tdispatchState({type:'SWITCH_SELECTED_NODE', payload: node})\n\t\tnode['isDone'] = true;\n\t\tnode['color'] =  colors.node.selected;\n};\n\n/* takes a dispachState functions and dispaches it in a \n\t * random timply fashion this is usefulf for node not to \n\t * appear all at once in the graph and make it easier on \n\t * the browser. Returns nothing*/\n\nconst timelyDispatch = (dispatchFunc , waitTime=0.5, random=0) => \n\t\tsetTimeout(dispatchFunc, waitTime + getRandomInt(random));\n\n/* reset the graph state and start a new query into a word, \n * sometime this stymes when it is called a second time,\n * this might be because of dispatchState being called twice\n * must investigate.  */\nconst queryNewWord = (word, state, dispatchState) => {\n\t\t//console.log(\"query New owrd ran\")\n\t\tfetch(API_ENDPOINT + word) // fetch word\n\t\t\t\t.then(result => result.json()) //unpack node\n\t\t\t\t.then(result => catchError(result, state, dispatchState)) \n\t\t//check if word was found\n\t\t\t\t.then(result => processNode(result)) //process node\n\t\t\t\t.then(node => { node['color'] = colors.node.selected ; return node })//process node\n\t\t\t\t.then(node => { //dispatch as new word\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype: 'SET_NEW_NODE', \n\t\t\t\t\t\t\t\tpayload: node\n\t\t\t\t\t\t}); \n\t\t\t\t\t\treturn node; })\n\t\t// get the surrounding words\n\t\t\t\t.then(node => { \n\t\t\t\t\t\t//console.log(\"querying adhjacent nodes\")\n\t\t\t\t\t\t//console.log(node)\n\t\t\t\t\t\tqueryAdjecentNodes(node, state, dispatchState)\n\t\t\t\t})\n\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}));\n}\n\n/* Fetch all the adjancent node of a given node and dispatch */\nconst queryAdjecentNodes = (node, state, dispatchState) => {\n\t\t// define whether we should link te deeper\n\t\tlet linkAll = state.isDeepLinks;\n\t\t// define which type of graph we are requesting\n\t\tlet graph_type = 'synonyms/';\n\t\t// request the synonyms\n\t\tfetch(API_ENDPOINT + graph_type + node.id )\n\t\t\t\t.then(result => result.json()) // unpack json\n\t\t\t\t.then(adjNodes =>  \n\t\t\t\t\t\tadjNodes.forEach(// for every node in the fetched array\n\t\t\t\t\t\t\t\tadjNode => timelyDispatch(() => {// dispacth timely\n\t\t\t\t\t\t\t\t\t\t// for each of the nodes in the list \t\t\n\t\t\t\t\t\t\t\t\t\tadjNode = processNode(adjNode); //process node \n\t\t\t\t\t\t\t\t\t\t//console.log(\"node processed to dispatch\")\n\t\t\t\t\t\t\t\t\t\t//console.log(adjNode)\n\t\t\t\t\t\t\t\t\t\t// proces is it is new node, or deep link set\n\t\t\t\t\t\t\t\t\t\tif(isNewNode(adjNode.id, state)){\n\t\t\t\t\t\t\t\t\t\t\t\t// if it is a new node append \n\t\t\t\t\t\t\t\t\t\t\t\tdispatchState({//dispatch node with link node\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NODE_LINK', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode: adjNode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: adjNode, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//color: 'red',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}else if(linkAll){\n\t\t\t\t\t\t\t\t\t\t\t\tdispatchState({// if deep links is on , and it is a new node\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NEW_LINK', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: getNode(adjNode.id, state.forceData), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//color: 'red',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t).catch(() => dispatchState({type:'SET_FETCH_FAILED'}))\n}\n\n\n/* \n * Functions for processing paths of nodes \n *\n * */\n\n/* takes a list of inputs \n * and divied it into pairs */\nconst pairUp = (list) => {\n\t\tlet pairs = [];\n\t\tfor(let i = 0; i+1 <= list.length - 1; i++)\n\t\t\t\tpairs.push({'first': list[i], 'last':list[i+1]});\n\t\treturn pairs\n}\n\n/* gets a list of word and removes the ones which \n * do not checkout in the api.\n * This seemly simple task becomes complex to do \n * with promises*/\nconst removeNotFoundWords = async (words, dispatchState) => {\n\t\tvar foundWords = new Array(words.lenght)\n\t\t// make a empty array of as long as\n\t\t// the origial to mantain the same order\n\t\tawait Promise.all( words.map( (word, index) => \n\t\t\t\t// for every word check the api, \n\t\t\t\t// await untill all promises are returned\n\t\t\t\tfetch(API_ENDPOINT+'check/'+ word +\"/\")\n\t\t\t\t.then( response => response.json())\n\t\t\t\t.then( response => { \n\t\t\t\t\t\tif(response.detail === \"Found.\"){ \n\t\t\t\t\t\t\t\tfoundWords[index] = word \n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\ttype:'SET_WORD_NOT_FOUND', \n\t\t\t\t\t\t\t\t\t\tpayload: word})\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(err => console.log(err))\n\t\t))\n\t\treturn foundWords.filter( Boolean )\n}\n\n/* add foreach node in the path where it comming from,\n\t\t* also adds the color to be graphed */\nconst processPath = (path, request) =>{\n\t\tlet prevNode = null; //declare prev node\n\t\tif(path instanceof Array){ // only if it is a list \n\t\t\t\tpath.forEach((node) => { \n\t\t\t\t\t\tnode = processNode(node); //might as well process node \n\t\t\t\t\t\t// set the previous node if there was a previous one\n\t\t\t\t\t\tnode['prevNode'] = (prevNode)? prevNode : node.id;\n\t\t\t\t\t\t// colo if it is reuested\n\t\t\t\t\t\tif(node.word === request.first || node.word === request.last)\n\t\t\t\t\t\t\t\tnode['color'] = colors.node.selected // color as selected\n\t\t\t\t\t\t// if it is start of path set first previous to itself\n\t\t\t\t\t\tprevNode = node.id;\n\t\t\t\t})\n\t\t}\n\t\treturn path\n}\n\n\n/* gets a list of pair request for paths an queryes the api \n * then is saves those paths in a order list and returns*/\nconst fetchPathsParts = async (pathRequests, dispatchState) => {\n\t\t// make an empty array of the same length as request paths\n\t\tvar paths = new Array(pathRequests.length)\n\t\tawait Promise.all( //wait for all promises to return \n\t\t\t\tpathRequests.map((request, index) =>\n\t\t\t\t\t\tfetch(API_ENDPOINT+'path/'+request.first+\"/\"+request.last)\n\t\t\t\t\t\t.then( response => response.json())\n\t\t\t\t\t\t.then( response => processPath(response, request))\n\t\t\t\t\t\t.then( response => { \n\t\t\t\t\t\t\t\tif(response.detail === \"Path not found.\"){ \n\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\ttype:'SET_PATH_NOT_FOUND', \n\t\t\t\t\t\t\t\t\t\t\t\tpayload: request});\n\t\t\t\t\t\t\t\t\t\tpaths[index] = null;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tpaths[index] = response;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => console.log(err))\n\t\t\t\t))\n\t\treturn paths;\n}\n\nconst amendPath = async (paths) => {\n\t\t/* takes a list of paths and is there\n\t\t * is a gap tries to find a connecting path*/\n\t\tconst getGaps = (paths) => {\n\t\t\t\t/* takes a list of paths retusn a list of \n\t\t\t\t * indexes where the gaps are*/\n\t\t\t\tlet gaps = [];\n\t\t\t\tlet gap = {start:null, end:null}\n\t\t\t\tlet wasPath = false;\n\t\t\t\tlet wasGap = false;\n\t\t\t\tpaths.forEach((path, index) => {\n\t\t\t\t\t\tif(path === null ){// if it is gap\n\t\t\t\t\t\t\t\tif(wasPath){  // comes from gap\n\t\t\t\t\t\t\t\t\t\tgap.start = index //save start\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// and comes from path\n\t\t\t\t\t\t\t\twasGap = true; // switch to gap\n\t\t\t\t\t\t\t\twasPath = false \n\t\t\t\t\t\t}else{ //if is path\n\t\t\t\t\t\t\t\tif(wasGap){   // and comes from gap\n\t\t\t\t\t\t\t\t\t\tgap.end = index; // record end\n\t\t\t\t\t\t\t\t\t\tgaps.push({...gap}); //save gap\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\twasPath = true; // switch to path \n\t\t\t\t\t\t\t\twasGap = false;\n\t\t\t\t\t\t}\n\t\t\t\t}) \n\t\t\t\treturn gaps;\n\t\t}\n\n\t\tfunction* nextNodeGenerator(start, end, paths) {\n\t\t\t\t/* makes a generator to go thought the nodes\n\t\t\t\t * which must try to find a bridge*/\n\t\t\t\t// for every path left in paths\n\t\t\t\tfor(let pathIndex = end; pathIndex < paths.length; pathIndex++){\n\t\t\t\t\t\tlet curPath = paths[pathIndex]\n\t\t\t\t\t\tif(paths[pathIndex] !== null){ // if it is not a null path\n\t\t\t\t\t\t\t\t// \tif gap is one length, start at 1, else 0\n\t\t\t\t\t\t\t\t//let index = (end-start > 1)? 0 : 1; \n\t\t\t\t\t\t\t\t// for every node in the current path\n\t\t\t\t\t\t\t\tfor(let nodeIndex = 0; nodeIndex < curPath.length; nodeIndex++){\n\t\t\t\t\t\t\t\t\t\tlet stop = yield curPath[nodeIndex]; // return the current path \n\t\t\t\t\t\t\t\t\t\tif(stop === true) // if the messeage send back is to stop\n\t\t\t\t\t\t\t\t\t\t\t\treturn null; // stop generation\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null; // reached the end\n\t\t}\n\n\n\t\tconst bridgeGap = async (start, end, paths) => {\n\t\t\t\t/* gets a set of indexes indicating the gap, \n\t\t\t\t * make fetch request to attempt to find a \n\t\t\t\t * conncetion */\n\t\t\t\t/* generator fuction for trying node to  find a bridge*/\n\t\t\t\tlet leftPath = paths[start-1];\n\t\t\t\t// last word in the left side path\n\t\t\t\tlet lastWord = leftPath[leftPath.length-1].word;\n\t\t\t\t// if there exacly one gap, dont bother chechi\n\t\t\t\t//let index = (end-start > 1)? 0 : 1; \n\t\t\t\tlet gen = nextNodeGenerator(start, end, paths);\n\t\t\t\tlet curIter = gen.next();\n\t\t\t\tconst foundBridge = (response) =>{\n\t\t\t\t\t\tif(response.detail === \"Path not found.\"){ \n\t\t\t\t\t\t\t\tcurIter = gen.next(); // get the next node\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tpaths[start] = response; //set the bridge\n\t\t\t\t\t\t\t\tcurIter = gen.next(true); //break loop\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\t \n\t\t\t\twhile(!curIter.done){ // while the bridge is not been found\n\t\t\t\t\t\tawait fetch(API_ENDPOINT+'path/'+lastWord+\"/\"+ curIter.value.word)\n\t\t\t\t\t\t\t\t.then( response => response.json())\n\t\t\t\t\t\t\t\t.then( response => processPath(response))\n\t\t\t\t\t\t\t\t.then( foundBridge )\n\t\t\t\t\t\t\t\t.catch(err => console.log(err))\n\t\t\t\t}\n\t\t}\n\t\tlet gaps = getGaps(paths);\n\t\tawait Promise.all(gaps.map( gap => bridgeGap(gap.start, gap.end, paths)))\n\t\treturn paths;\n}\n\n\n/* get a list of paths of words, joins them together \n * and dipatches it to state*/\nconst dispatchPath = (paths, state, dispatchState) => {\n\t\tlet finalPath = []; // declare final array\n\t\t//if( paths isIntanceof Array) return null;\n\t\t\t\tpaths = paths.filter( Boolean ); // filter any null chars\n\t\t// add all paths together\n\t\tpaths.forEach(path => finalPath.push(...path)) \n\t\t//console.log(finalPath)\n\t\tfinalPath.forEach((node, index) =>//for every node in final path\n\t\t\t\ttimelyDispatch(() => { // dispath in a timely order\n\t\t\t\t\t\t//console.log(state.isEmpty)\n\t\t\t\t\t\tif(index === 0){ // if this is the first node\n\t\t\t\t\t\t\t\tdispatchState({ //dipatch as new node\n\t\t\t\t\t\t\t\t\t\ttype: 'SET_NEW_NODE', \n\t\t\t\t\t\t\t\t\t\tpayload: node, })\n\t\t\t\t\t\t}else{ // is not first node\n\t\t\t\t\t\t\t\tdispatchState({ //if append a node list\n\t\t\t\t\t\t\t\t\t\ttype: 'SET_PATH_NODE', \n\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\tnode: node,\n\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: node.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node.prevNode, \n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t)\n}\n\n/* gets passesed a set of two words, \n * queries the server for the path and \n * dispateches the result to state */\nconst queryPath = async (words, state, dispatchState) => {\n\t\t//first remove all words from the input which are not in api\n\t\twords = await removeNotFoundWords(words, dispatchState)\n\t\t\t\t.catch(err =>  //catch error is could not fetch\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype:'SET_ERROR', \n\t\t\t\t\t\t\t\tpayload:\"Could not get words\"}));\n\t\t// get the list of words and return them in pair\n\t\t// w1, w2, w3, w4 => (w1, w2), (w2, w3), (w3, w4)\n\t\tlet pathRequests = pairUp(words);\n\t\t// for every pair of words query the api for a path between them\n\t\tlet pathParts = await fetchPathsParts(pathRequests, dispatchState)\n\t\t\t\t.catch(err => \n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype:'SET_ERROR', //catch error is could not fetch\n\t\t\t\t\t\t\t\tpayload: \"could not get paths\"}));\n\t\t// get the final path and attempt to cannect them together\n\t\t// to form one cohesive path\n\t\tlet finalPath = await amendPath(pathParts)\n\t\t.catch(err => \n\t\t\t\tdispatchState({\n\t\t\t\t\t\ttype:'SET_ERROR', \n\t\t\t\t\t\tpayload: \"Could not amend path\"}))\n\t\tdispatchPath(finalPath, state, dispatchState)\n\t\t// dispatch the ammedned path to state to be graphed\n}\n\n\n/* Set error to state when user search a word not found */\nconst catchError = (response, state, dispatchState) => {\n\t\t//console.log(\"got to cath error:\")\n\t\t//console.log(response)\n\t\tif(response instanceof Array){\n\t\t\t\tlet foundWords = []\n\t\t\t\t//console.log(\"words was not found\")\n\t\t\t\t// if it has the response for many words\n\t\t\t\tresponse.forEach((word, index, words) => {\n\t\t\t\t\t\tif(word.detail === \"Not Found.\"){\n\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\ttype: 'SET_WORD_NOT_FOUND', \n\t\t\t\t\t\t\t\t\t\tpayload: word.w_id});\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tfoundWords.push(word);\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\treturn foundWords;\n\t\t}else{ // if it only one elment\n\t\t\t\tif(response.detail === \"Not found.\") {\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype: 'SET_WORD_NOT_FOUND', \n\t\t\t\t\t\t\t\tpayload: state.searchTerm});\n\t\t\t\t\t\tthrow new Error(\"word not found\");\n\t\t\t\t}else if(response.detail === \"Path not found.\"){\n\t\t\t\t\t\t// if the error is path not found\n\t\t\t\t\t\t//console.log(\"path was not found\")\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype: 'SET_PATH_NOT_FOUND', \n\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t'first': response.first,\n\t\t\t\t\t\t\t\t\t\t'last': response.last, }})\n\t\t\t\t\t\tthrow new Error(\"path not found\");\n\t\t\t\t}else{\n\t\t\t\t\t\treturn response\n\t\t\t\t}\n\t\t}\n}\n\nconst onMouseOverNode = function(nodeId, dispatchState) {\n\t\tdispatchState({type:'SET_DEFINED_NODE', payload: nodeId})  \n\t\t// need to fund a way to also run the default fuction \n};\n\nexport { processNode, catchError, queryNewWord, queryAdjecentNodes, queryPath, onClickNode, onMouseOverNode }\n\n","import React  from 'react';\nimport { ProSidebar, SidebarHeader, SidebarContent, Menu, MenuItem, SubMenu  } from 'react-pro-sidebar';\nimport 'react-pro-sidebar/dist/css/styles.css';\nimport { onClickNode } from '../node_functions';\nimport { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\nimport { \n\t\tfaLandmark, \n\t\tfaStickyNote, \n\t\tfaAlignLeft, \n\t\tfaBook,\n\t\tfaBookOpen,\n\t\tfaCircle,\n\t\tfaProjectDiagram,\n\t\tfaScroll,\n} from '@fortawesome/free-solid-svg-icons'\n\n\n/*\n * =======================================\n *      SideBar Componente for React \n * =======================================\n *     Using proSideBar \n */\n\nfunction SideBarContainer({state, dispatchState}){\n\n\t\tconst renderDefinitions = (node) => {\n\t\t\t\tlet syntaxes = new Set();\n\t\t\t\tnode.definitions.forEach( def => syntaxes.add(def.syntax));\n\t\t\t\treturn <Menu>\n\t\t\t\t\t\t{(!state.isSideBar)? <h1>Definitions:</h1>: <></> }\n\t\t\t\t\t\t{ [...syntaxes].map( (syntax, i) => \n\t\t\t\t\t\t\t\t(i===0)?\n\t\t\t\t\t\t\t\t\t\t<SubMenu key={i} title={syntax} open={true} icon={<FontAwesomeIcon icon={faCircle}/>}>\n\t\t\t\t\t\t\t\t\t\t\t\t{ node.definitions.map( (definition, i) => \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(syntax === definition.syntax)?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SidebarContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{paddingRight: 2}}>{definition.definition}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</SidebarContent> \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>: null\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</SubMenu> \n\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<SubMenu key={i} title={syntax} icon={<FontAwesomeIcon icon={faCircle}/>} >\n\t\t\t\t\t\t\t\t\t\t\t\t{ node.definitions.map( (definition, i) => \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(syntax === definition.syntax)?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SidebarContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{paddingRight: 2}}>{definition.definition}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</SidebarContent> \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>: null\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</SubMenu> \n\t\t\t\t\t\t) }\n\t\t\t\t</Menu>\n\t\t}\n\n\t\tconst renderExamples = (node) => {\n\t\t\t\treturn <>\n\t\t\t\t\t\t{(node.examples.length !== 0)? \n\t\t\t\t\t\t\t\t<Menu popperArrow={true}>\n\t\t\t\t\t\t\t\t\t\t<SubMenu title=\"Examples:\" icon={<FontAwesomeIcon icon={faAlignLeft}/>} style={{fontSize:'20px'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t{ node.examples.map( (example, i) => \n\t\t\t\t\t\t\t\t\t\t\t\t<SidebarContent key={i}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{example['example']}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</SidebarContent> \n\t\t\t\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t</Menu> : null\n\t\t\t\t\t\t}\n\t\t\t\t</>\n\t\t}\n\n\t\tconst renderEtymology = (node) => {\n\t\t\t\treturn <>\n\t\t\t\t\t\t{(node.etymology !== \"\")? \n\t\t\t\t\t\t\t\t<Menu popperArrow={true} >\n\t\t\t\t\t\t\t\t\t\t<SubMenu title=\"Etymology:\" icon={<FontAwesomeIcon icon={faLandmark}/>} style={{fontSize:'20px'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<SidebarContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{node.etymology}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</SidebarContent> \n\t\t\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t</Menu> : null\n\t\t\t\t\t\t}\n\t\t\t\t</>\n\t\t}\n\n\t\tconst renderNodes = (node) => {\n\t\t\t\treturn <>\n\t\t\t\t\t\t{(node.notes !== \"\")? \n\t\t\t\t\t\t\t\t<Menu popperArrow={true}>\n\t\t\t\t\t\t\t\t\t\t<SubMenu title=\"Anotations:\"\n\t\t\t\t\t\t\t\t\t\t\t\ticon={<FontAwesomeIcon icon={faStickyNote}/>}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{fontSize:'20px'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<SidebarContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{node.Notes}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</SidebarContent> \n\t\t\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t</Menu> : null\n\t\t\t\t\t\t}\n\t\t\t\t</>\n\t\t}\n\n\t\tconst renderSynonyms = (node) => {\n\t\t\t\treturn <>\n\t\t\t\t\t\t{(node.synonyms.length !== 0)? \n\t\t\t\t\t\t\t\t<Menu popperArrow={true}>\n\t\t\t\t\t\t\t\t\t\t<SubMenu title=\"Synonyms:\" icon={<FontAwesomeIcon icon={faProjectDiagram}/>} style={{fontSize:'20px'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t{ node.synonyms.map( (synonym, i) => \n\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem key={i} active={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onClickNode(synonym['synonym'], state, dispatchState)} >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{synonym['synonym']}\n\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem> \n\t\t\t\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t</Menu> : null\n\t\t\t\t\t\t}\n\t\t\t\t</>\n\t\t}\n\n\t\tconst toogleSideBar = () => dispatchState({type:'TOGGLE_SIDE_BAR'})\n\n\t\treturn(\n\t\t\t\t<div style={{ float:'left', position: 'absolute', height:'91%'}}>\n\t\t\t\t\t\t<ProSidebar collapsed={state.isSideBar} >\n\t\t\t\t\t\t\t\t{(state.isSideBar)?\n\t\t\t\t\t\t\t\t\t\t<MenuItem onClick={toogleSideBar} icon={\n\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginLeft:'1.7rem', marginTop:'1rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight:'25px', width:'25px'}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ticon={faBook}/>}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t:<MenuItem onClick={toogleSideBar} icon={\n\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginLeft:'6.5rem', marginTop:'1rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight:'55px', width:'55px'}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ticon={faBookOpen}/>}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t<Menu iconShape=\"square\">\n\t\t\t\t\t\t\t\t\t\t{(!state.isSideBar)?\n\t\t\t\t\t\t\t\t\t\t\t\t<SidebarHeader style={{textAlign:'center'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h1>{state.definedNode.word}</h1>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i>{(state.definedNode.definitions[0])?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.definedNode.definitions[0].syntax\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}</i>\n\t\t\t\t\t\t\t\t\t\t\t\t</SidebarHeader> \n\t\t\t\t\t\t\t\t\t\t\t\t: <SubMenu icon={<FontAwesomeIcon icon={faScroll}/>}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem active={true} >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h1>{state.definedNode.word}</h1>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i>{(state.definedNode.definitions[0])?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.definedNode.definitions[0].syntax\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}</i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t{renderDefinitions(state.definedNode)}\n\t\t\t\t\t\t\t\t\t\t{renderExamples(state.definedNode)}\n\t\t\t\t\t\t\t\t\t\t{renderEtymology(state.definedNode)}\n\t\t\t\t\t\t\t\t\t\t{renderSynonyms(state.definedNode)}\n\t\t\t\t\t\t\t\t\t\t{renderNodes(state.definedNode)}\n\t\t\t\t\t\t\t\t</Menu>\n\t\t\t\t\t\t</ProSidebar>\n\t\t\t\t</div>\n\t\t)\n}\n\nexport default SideBarContainer;\n","import { useEffect  } from 'react';\n/**\n ** useKeyPress\n ** @param {string} key - the name of the key to respond to, compared against event.key\n ** @param {function} action - the action to perform on key press\n **/\nexport default function useKeypress(key, action) {\n\t\tuseEffect(() => {\n\t\t\t\tfunction onKeyup(e) {\n\t\t\t\t\t\tif (e.key === key) action()\n\t\t\t\t}\n\t\t\t\twindow.addEventListener('keyup', onKeyup);\n\t\t\t\treturn () => window.removeEventListener('keyup', onKeyup);\n\t\t\t\t  \n\t\t}, [action, key]);\n\t\t\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT }  from \"../../myConfig\";\nimport useKeypress from '../../hooks/useKeypress';\nimport './SearchSuggestion.css'; \n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/' //add this to myconfig\n\nfunction SuggestionsContainer(props){\n\t\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t\t//let handleSearchSubmit =  props.handleSearchSubmit;\n\t\tconst [suggestions, setSuggestions] = useState([])\t\n\t\tconst [selected, setSelected] = useState(0)\t\n\t\t\n\n\t\tuseKeypress('ArrowDown', () =>\n\t\t\t\t(selected < 0)?\n\t\t\t\tsetSelected(suggestions.length-1)\n\t\t\t\t: setSelected(selected + 1)\n\t\t);\n\n\t\tuseKeypress('ArrowUp', () => \n\t\t\t\t(selected > suggestions.length-1)?\n\t\t\t\tsetSelected(0)\n\t\t\t\t:setSelected(selected - 1)\n\t\t);\n\n\t\tuseKeypress('Enter', () => {\n\t\t\t\t/* there is a bug where becuase the summit button is insdie the child component the \n\t\t\t\t * Enter input is registered twice and handle serach summit run twice.\n\t\t\t\t * This caused duplicate links and nodes.\n\t\t\t\t * I fixed this by adding a checker and addit the link ony if it is new link, \n\t\t\t\t * however the bug still there, beware*/\n\t\t\t\tif(isWrittingWord()){\n\t\t\t\t\t\tif(suggestions.length > 0){\n\t\t\t\t\t\t\t\taddToSearchTerm(suggestions[selected].word);\n\t\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tif (event.keyCode === 13) {\n\t\t\t\t\t\t\t\tconst form = event.target.form;\n\t\t\t\t\t\t\t\tconst index = Array.prototype.indexOf.call(form, event.target);\n\t\t\t\t\t\t\t\tform.elements[index + 1].focus();\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t*/\n\t\t\t\t\t\t//handleSearchSubmit();\n\t\t\t\t}\n\t\t})\n\n\t\tconst isWrittingWord = () =>{\n\t\t\t\t/* uses the state to see if\n\t\t\t\t\t\t* the user is in the middle of writting a word */\n\t\t\t\tlet len = state.searchTerm.length;\n\t\t\t\tlet last = state.searchTerm[state.searchTerm.length-1];\n\t\t\t\tif(len === 0){ return false;\n\t\t\t\t}else if (last === \" \"){ return false;\n\t\t\t\t}else return true; \n\t\t}\n\n\t\tconst filterSuggestions = suggestions => \n\t\t\t\t/* filter out all words which have spaces */\n\t\t\t\tsuggestions instanceof Array ? // if reques has been found\n\t\t\t\t\t\tsuggestions.filter( suggestion => /\\s/.test(suggestion)) : []\n\n\t\tconst addToSearchTerm = (word) => {\n\t\t\t\t/* append a given word to the seate searchTerm */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\tlet len = wordList.length \n\t\t\t\twordList[len-1] = word // set the last word as clicke word\n\t\t\t\tdispatchState({ \n\t\t\t\t\t\ttype: 'SET_SEARCH_TERM',\n\t\t\t\t\t\tpayload: wordList.join(\" \") + \" \",\n\t\t\t\t});\t\n\t\t\t\tsetSuggestions([]); // reset suggestions\n\t\t\t\tsetSelected(0); // reset selected\n\t\t}\n\n\t\tconst onClick = (word) => addToSearchTerm(word);\n\n\t\tuseEffect(() => {\n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\t//split the search into words\n\t\t\t\tlet len = wordList.length;\n\t\t\t\t//get the length\n\t\t\t\tlet last = wordList[len-1]\n\t\t\t\t//fetch the last element \n\t\t\t\tfetch(API_ENDPOINT + query_search + last)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => filterSuggestions(suggestions))\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch((err) => console.log(err));\n\t\t}, [state.searchTerm, dispatchState])\n\n\n\t\tconst SuggestionList = () =>\n\t\t\t\t<ul className=\"suggestions\">\n\t\t\t\t\t\t{ suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => {  \n\t\t\t\t\t\t\t\t\t\treturn  <li \n\t\t\t\t\t\t\t\t\t\t\t\tkey={index} \n\t\t\t\t\t\t\t\t\t\t\t\tclassName={index === selected? \"selected\": null}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onClick(suggestion.word)}>\n\t\t\t\t\t\t\t\t\t\t\t\t{suggestion.word}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t</ul>\n\n\t\t\t\t\t\treturn <div className=\"input\">\n\t\t\t\t\t\t\t\t{props.children}\n\t\t\t\t\t\t\t\t{isWrittingWord()? <SuggestionList/>: <></> }\n\t\t\t\t\t\t</div>\n}\n\nexport default SuggestionsContainer;\n","import React from 'react';\nimport { queryNewWord, queryPath } from '../node_functions';\nimport { colors }  from \"../myConfig\";\nimport SuggestionsContainer from \"./SearchSuggestion/SearchSuggestion\";\nimport { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\nimport { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\n/*\n * ===========================================\n *      NavBar Componente for React \n * ===========================================\n * \t Using ReaactBootStrap to render the navbar\n */\n\nfunction NavBarContainer({ state, dispatchState }){\n\n\t\tconst ref = React.createRef();\n\n\t\t// handle the change by seting the state variable to \n\t\tconst handleSearchChange = change => \n\t\t\t\tdispatchState({ \n\t\t\t\t\t\ttype: 'SET_SEARCH_TERM',\n\t\t\t\t\t\tpayload: change.target.value \n\t\t\t\t});\n\n\t\tconst handleSearchSubmit = () =>  {\n\t\t\t\t/* handle submit search button */\n\t\t\t\t// get words if there are multiple of them \n\t\t\t\tlet words = getmultipleWords(state.searchTerm.toLowerCase());\n\t\t\t\t// set all serches to lowercase\n\t\t\t\tif(words.length > 1){\n\t\t\t\t\t\t//if it has more that two words\n\t\t\t\t\t\tqueryPath(words, state, dispatchState);\n\t\t\t\t}else{ \n\t\t\t\t\t\t// if there is only one word\n\t\t\t\t\t\tqueryNewWord(words[0], state, dispatchState);\n\t\t\t\t}\n\t\t}\n\n\t\tconst getmultipleWords = (string) => {\n\t\t\t\t/* determines qhereteher a string \n\t\t\t\t * is compossed of multiple words */\n\t\t\t\t//remove multiple spaces\n\t\t\t\t//trim, remove multiple and seperate by spaces\n\t\t\t\treturn string.replace(/  +/g, ' ').trim().split(' ') \n\t\t}\n\n\t\tconst handleRadioGraphChange = (changeEvent) => \n\t\t\t\tdispatchState({type:'SET_GRAPH_TYPE', payload:changeEvent.target.value});\n\n\t\tconst handleToggleDeepLinks = () => {\n\t\t\t\t/* hangles the toggle of the deep links, \n\t\t\t\t * resets the graph if there is already a \n\t\t\t\t * selected node */\n\t\t\t\tlet selectedNode = state.selected;\n\t\t\t\tif(!state.isEmpty) queryNewWord(selectedNode.id, state, dispatchState);\n\t\t\t\tdispatchState({type:'TOGGLE_DEEP_LINKS'});\n\t\t}\n\n\n\t\treturn(\n\t\t\t\t<Navbar expand=\"lg\" className=\"justify-content-center\"\n\t\t\t\t\t\tvariant=\"dark\" style={{backgroundColor: colors.black}}>\n\t\t\t\t\t\t<a href=\"index.html\">\n\t\t\t\t\t\t\t\t<img src=\"/logo.png\" width=\"150\"\n\t\t\t\t\t\t\t\t\t\theight=\"70\"\n\t\t\t\t\t\t\t\t\t\talt=\"React Bootstrap logo\" />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<Navbar.Brand href=\"index.html\" className=\"row\"  >\n\t\t\t\t\t\t\t\t<h1>Dictographo</h1>\n\t\t\t\t\t\t</Navbar.Brand>\n\t\t\t\t\t\t<InputGroup  size='lg' md='auto' className=\"pl-3\" style={{maxWidth: \"700px\"}} >\n\t\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t\t\t<SuggestionsContainer state={state} dispatchState={dispatchState} handleSearchSubmit={handleSearchSubmit}/ >\n\t\t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t\t<FormControl size=\"lg\" as='input' type=\"text\" placeholder=\"Write some words...\" \n\t\t\t\t\t\t\t\t\t\tvalue={state.searchTerm} onChange={handleSearchChange}/>\n\t\t\t\t\t\t\t\t<InputGroup.Append className=\"pr-2\" >\n\t\t\t\t\t\t\t\t\t\t<Button ref={ref} size=\"lg\" variant=\"outline-info\" onClick={handleSearchSubmit}>Search</Button>\n\t\t\t\t\t\t\t\t</InputGroup.Append>\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t<Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\t\t\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\" >\n\t\t\t\t\t\t\t\t<Nav >\n\t\t\t\t\t\t\t\t\t\t<NavDropdown \n\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Options\" \n\t\t\t\t\t\t\t\t\t\t\t\ticon={<FontAwesomeIcon icon={faSlidersH}/>}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{backgroundColor: colors.black }} \n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"text-left ml-3 pl-3\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group as={Col}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Check\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"switch\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"pb-1 ml-2 text-left\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Nodes\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"d3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"formHorizontalRadios\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"d3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={state.graphType === \"d3\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleRadioGraphChange}/ >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Check\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"switch\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"pb-1 ml-2 text-left\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Words\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"2D\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"formHorizontalRadios\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"formHorizontalRadios2\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={state.graphType === \"2D\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleRadioGraphChange} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Check\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"switch\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"pb-1 ml-2 text-left\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\" 3D\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"3D\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"formHorizontalRadios\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"formHorizontalRadios3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={state.graphType === \"3D\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleRadioGraphChange}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Check \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"switch\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"text-center\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"custom-switch\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Deep Links\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={state.isDeepLinks} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleToggleDeepLinks}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t\t\t</NavDropdown>\n\t\t\t\t\t\t\t\t</Nav>\n\t\t\t\t\t\t</Navbar.Collapse>\n\t\t\t\t</Navbar>\n\t\t)\n}\n\nexport default NavBarContainer;\n","import React, { useCallback, useEffect, useState }  from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { colors, graphConfig }  from \"../../myConfig\";\n//import d3Switcher from \"./d3Switcher\";\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport SpriteText from 'three-spritetext';\n//import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({state, dispatchState}){\n\n\t\tconst handleClick = useCallback((nodeId) => {  //  handle click of node\n\t\t\t\tonClickNode(nodeId, state, dispatchState)\n\t\t}, [state, dispatchState]);\n\n\t\tconst [dimensions, setDimensions] = useState({ \n\t\t\t\theight: window.innerHeight - 87,\n\t\t\t\twidth: window.innerWidth - 15,\n\t\t})\n\n\t\tuseEffect(() => {\n\t\t\t\tfunction handleResize(){\n\t\t\t\t\t\tsetDimensions({\n\t\t\t\t\t\t\t\theight: window.innerHeight - 87,\n\t\t\t\t\t\t\t\twidth: window.innerWidth - 15,\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\twindow.addEventListener('resize', handleResize)\n\t\t\t\treturn _ => {\n\t\t\t\t\t\twindow.removeEventListener('resize', handleResize)\n\t\t\t\t}\n\t\t});\n\n\t\tconst chosenGraph = (type) =>{ \n\t\t\t\tswitch(type) {\n\t\t\t\t\t\tcase 'd3':\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state.d3Data}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\tconfig={ {...graphConfig, height: dimensions.height, width: dimensions.width}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tcase '2D':\n\t\t\t\t\t\t\t\treturn <ForceGraph2D\n\t\t\t\t\t\t\t\t\t\tgraphData={state.forceData}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tnodeLabel=\"id\"\n\t\t\t\t\t\t\t\t\t\theight={dimensions.height}\n\t\t\t\t\t\t\t\t\t\twidth={dimensions.width}\n\t\t\t\t\t\t\t\t\t\tnodeRelSize={5}\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowLength={1}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowRelPos={1}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticles={0.5}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticleSpeed={0.003}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticleWidth={3}\n\t\t\t\t\t\t\t\t\t\tlinkWidth={1.8}\n\t\t\t\t\t\t\t\t\t\tonNodeDragEnd={node => {\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fx = node.x;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fy = node.y;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fz = node.z;\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tnodeCanvasObject={(node, ctx, globalScale) => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst label = node.id;\n\t\t\t\t\t\t\t\t\t\t\t\tconst fontSize = 15/(globalScale);\n\t\t\t\t\t\t\t\t\t\t\t\tctx.font = `${fontSize}px Sans-Serif`;\n\t\t\t\t\t\t\t\t\t\t\t\tconst textWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\t\t\t\t\t\tconst bckgDimensions = [textWidth, fontSize].map(n => \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tn + fontSize * 0.3); // some padding\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillRect(node.x - bckgDimensions[0]/2, node.y - bckgDimensions[1]/2, ...bckgDimensions);\n\t\t\t\t\t\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillStyle = node.color;\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillText(label, node.x, node.y);\n\t\t\t\t\t\t\t\t\t\t\t\t          \n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tcase '3D':\n\t\t\t\t\t\t\t\treturn <ForceGraph3D\n\t\t\t\t\t\t\t\t\t\tgraphData={state.forceData}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tnodeLabel=\"id\"\n\t\t\t\t\t\t\t\t\t\theight={dimensions.height}\n\t\t\t\t\t\t\t\t\t\twidth={dimensions.width}\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowRelPos={1}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowLength={1}\n\t\t\t\t\t\t\t\t\t\tbackgroundColor={'black'}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticles={1.5}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticleSpeed={0.005}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticleWidth={1}\n\t\t\t\t\t\t\t\t\t\tlinkWidth={0.5}\n\t\t\t\t\t\t\t\t\t\tonNodeDragEnd={node => {\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fx = node.x;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fy = node.y;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fz = node.z;\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tnodeThreeObject={node => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst sprite = new SpriteText(node.id);\n\t\t\t\t\t\t\t\t\t\t\t\tsprite.color = (node.color === colors.node.selected)? node.color : (node.color === colors.node.done)? colors.node.default : colors.node.done;\n\t\t\t\t\t\t\t\t\t\t\t\tsprite.textHeight = 8;\n\t\t\t\t\t\t\t\t\t\t\t\treturn sprite;\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\tconfig={ {...graphConfig, height: dimensions.height, width: dimensions.width}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t} \n\t\t}\n\n\n\t\treturn <div style={{backgroundImage: 'url(./grid.png)'}} >\n\t\t\t\t{chosenGraph(state.graphType)}\n\t\t</div>\n\t\t\n}\n\nexport default GraphContainer;\n","import React, { useState, useEffect } from 'react';\nimport { Alert, ProgressBar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({state, dispatchState}) {\n\t\t/* functions that return an error mesage depending onthe state */\n\t\t// set timer ro dismiss with hook\n\t\tconst [ percentage, setPercentange ] = useState(0)\n\t\t// use effect to set the interval to make a contant preogress\n\t\t\n\t\tuseEffect(() => { // run queh component mounted\n\t\t\t\tlet interval = null; \n\t\t\t\tif (percentage < 115) { // while percentage is not complete\n\t\t\t\t\t\tinterval = setInterval(() => \n\t\t\t\t\t\t\t\tsetPercentange(percentage => percentage + 3), 100);\n\t\t\t\t} else{ // if it has reached 100 percent\n\t\t\t\t\t\tsetPercentange(0); // set percentage back to 0\n\t\t\t\t\t\tdispatchState({type: 'DISSMISS_ERROR' }); // unmount itself\n\t\t\t\t}\n\t\t\t\treturn () => {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t}\n\t\t}, [ percentage, dispatchState]);\n\n\t\treturn(\n\t\t\t\t<Alert variant=\"danger\" dismissible \n\t\t\t\t\t\tonClose={() => dispatchState({type: 'DISSMISS_ERROR'})} >\n\t\t\t\t\t\t<ProgressBar \n\t\t\t\t\t\t\t\tstyle={{ color:'white', maxHeight: 4, backgroundColor: 'pink'}}\n\t\t\t\t\t\t\t\tvariant='danger'\n\t\t\t\t\t\t\t\tnow={percentage} />\n\t\t\t\t\t\t<Alert.Heading>Oh Snap!</Alert.Heading>\n\t\t\t\t\t\t{state.isWordNotFound? //if the there is not words found\n\t\t\t\t\t\t<p>Looks like <b>\n\t\t\t\t\t\t\t\t{ [...state.wordsNotFound].map(word => <i>{word}, </i> ) }\n\t\t\t\t\t\t</b>in no our dictionary yet.</p> : <></>}\n\t\t\t\t\t\t{state.isPathNotFound? //if there is a path not found\n\t\t\t\t\t\t<p>looks like there is no path between: \n\t\t\t\t\t\t\t\t{[...state.pathsNotFound].map(\n\t\t\t\t\t\t\t\t\t\tpath => <i><b> {path.first}</b> and <b>{path.last},</b></i> )}\n\t\t\t\t\t\t</p> : <></> }\n\t\t\t\t\t\t{state.isFetchFailed? //There is a problem with the network\n\t\t\t\t\t\t<p>Could not connect to server.</p> : <></> }\n\t\t\t\t\t\t<p>{state.errorMsg}</p>\n\t\t\t\t</Alert>)\n}\n\nexport default AlertContainer;\n\n","import { initial_state, stateReducer } from './Components/State';\nimport CarouselContainer from './Components/Carousel';\nimport SideBarContainer from './Components/SideBar';\nimport NavBarContainer from './Components/NavBar';\nimport GraphContainer from './Components/Graph/Graph';\nimport AlertContainer from './Components/Alert';\nimport React from 'react';\nimport './App.css';\n\nfunction App() {\n\t\t/* define dispatcher for the Internal data */\n\t\tconst [state, dispatchState] = React.useReducer( stateReducer, initial_state );\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<NavBarContainer \n\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\tdispatchState={dispatchState} />\n\t\t\t\t\t\t{ state.isError?  // is ther is error mount Error\n\t\t\t\t\t\t\t\t<AlertContainer\n\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t\tdispatchState={dispatchState} />\n\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{ state.isEmpty? // if there is a word\n\t\t\t\t\t\t\t\t<CarouselContainer/>\n\t\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t<div style={{display: 'inline',}}>\n\t\t\t\t\t\t\t\t\t\t<SideBarContainer \n\t\t\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t\t\t\tdispatchState={dispatchState} />\n\t\t\t\t\t\t\t\t\t\t<GraphContainer \n\t\t\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t\t\t\tdispatchState={dispatchState} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}