{"version":3,"sources":["myConfig.js","Components/State.js","Components/Carousel.js","Components/RandomGenerator.js","node_functions.js","Components/SideBar.js","hooks/useKeypress.js","Components/SearchSuggestion/SearchSuggestion.js","Components/NavBar.js","Components/Graph.js","Components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["API_ENDPOINT","window","width","innerWidth","height","innerHeight","getWindowDimensions","colors","default","done","stroke","highlight","highlightStroke","selected","onPath","gray","antonim","graphConfig","initial_state","nodes","links","definedNode","isError","errorMsg","isFetchFailed","isWordNotFound","wordsNotFound","isPathNotFound","pathsNotFound","isEmpty","isLoading","searchTerm","DestinationTerm","isDeepLinks","showModal","isSideBar","stateReducer","state","action","node","type","payload","link","color","filter","id","destinationTerm","Set","Error","CoruselContainer","Carousel","Item","className","src","alt","Caption","getRandomInt","max","Math","floor","random","processNode","w_id","onClickNode","nodeId","dispatchState","queryAdjecentNodes","getNode","timelyDispatch","dispatchFunc","waitTime","setTimeout","queryNewWord","word","fetch","then","result","json","catchError","catch","linkAll","adjNodes","forEach","adjNode","every","isNewNode","source","target","pairUp","list","pairs","i","length","push","removeNotFoundWords","words","a","foundWords","Array","lenght","Promise","all","map","index","response","detail","err","console","log","Boolean","processPath","path","prevNode","fetchPathsParts","pathRequests","paths","request","first","last","amendPath","generateSequence","start","end","pathIndex","curPath","nodeIndex","getGaps","gaps","gap","wasPath","wasGap","bridgeGap","leftPath","lastWord","gen","curIter","next","foundBridge","value","dispatchPath","finalPath","queryPath","pathParts","SideBarContainer","toogleSideBar","style","float","position","collapsed","onClick","icon","marginLeft","marginTop","faBook","faBookOpen","iconShape","faScroll","active","definitions","syntax","textAlign","syntaxes","def","add","key","title","open","faCircle","definition","paddingRight","renderDefinitions","examples","popperArrow","faAlignLeft","fontSize","example","etymology","faLandmark","renderEtymology","synonyms","faProjectDiagram","synonym","renderSynonyms","notes","faStickyNote","Notes","renderNodes","useKeypress","useEffect","onKeyup","e","addEventListener","removeEventListener","SuggestionsContainer","props","useState","suggestions","setSuggestions","setSelected","isWrittingWord","addToSearchTerm","toLowerCase","replace","trim","split","len","wordList","join","suggestion","test","filterSuggestions","SuggestionList","class","children","NavBarContainer","getmultipleWords","string","Navbar","expand","variant","backgroundColor","href","Brand","InputGroup","size","md","maxWidth","FormControl","as","placeholder","onChange","change","Append","Button","Collapse","Nav","NavDropdown","faSlidersH","Divider","Form","Check","label","selectedNode","GraphContainer","backgroundImage","data","config","AlertContainer","Alert","dismissible","onClose","Heading","App","React","useReducer","NavBar","display","SideBar","Graph","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9ddb24f8.chunk.js","sourcesContent":["// the graph configuration, you only need to pass down properties\n// that you want to override, otherwise default ones will be used\n// Also misc. settings\n\nconst DEBUGGING = false\n\nconst API_ENDPOINT = DEBUGGING ? \n\t'http://127.0.0.1:8000/api/' :  //debuging local\n\t'http://128.199.9.124:8080/api/' //production\n\nfunction getWindowDimensions() {\n\t\tconst { innerWidth: width, innerHeight: height  } = window;\n\t\treturn { width, height };\n}\n\nconst {width, height} = getWindowDimensions();\n\nconst colors = {\n\t\tred: '#800517', // firerick\n\t\tblack: '#1d1d1d', // some shade of black \n\t\tblue: '#17a2b8', // bootstrap info blue\n\t\tnode: {  \n\t\t\t\tdefault: '#3D3C3A', // oil black\n\t\t\t\tdone: '#B6B6B4', // gray cloud\n\t\t\t\tstroke: '#8bb5bc', // bootstrap info blue\n\t\t\t\thighlight: '#E41B17', // red\n\t\t\t\thighlightStroke: '#27332F', \n\t\t\t\tselected: '#800517', // firerick\n\t\t\t\tonPath: '#990012', // red wine\n\t\t},\n\t\tlink:{\n\t\t\t\tdefault: 'rgba(23,162,184,50%)', //bootstrap faded info blue\n\t\t\t\tgray: '#D1D0CE', // gray goose\n\t\t\t\tonPath: '#990012', // Red wine\n\t\t\t\thighlight: '#E41B17', // red\n\t\t\t\tantonim: '',\n\t\t},\n\t\tfont: {\n\t\t\t\tdefault: \"black\",\n\t\t}\n}\n\nconst  graphConfig = {\n\t\t\"automaticRearrangeAfterDropNode\": false,\n\t\t\"collapsible\": false,\n\t\t\"directed\": false,\n\t\t\"focusAnimationDuration\": 0.75,\n\t\t\"backgroundColor\": \"black\",\n\t\t\"focusZoom\": 1,\n\t\t\"height\": height - 87,\n\t\t\"width\": width - 15,\n\t\t\"highlightDegree\": 100,\n\t\t\"highlightOpacity\": 0.5,\n\t\t\"linkHighlightBehavior\": true,\n\t\t\"maxZoom\": 10,\n\t\t\"minZoom\": 0.1,\n\t\t\"nodeHighlightBehavior\": true,\n\t\t\"panAndZoom\": false,\n\t\t\"staticGraph\": false,\n\t\t\"staticGraphWithDragAndDrop\": false,\n\t\t\"d3\": {\n\t\t\t\t\"alphaTarget\": 0.3,\n\t\t\t\t\"gravity\": -140,\n\t\t\t\t\"linkLength\": 3,\n\t\t\t\t\"linkStrength\": 2,\n\t\t\t\t\"disableLinkForce\": false\n\t\t},\n\t\t\"node\": {\n\t\t\t\t\"color\": colors.node.default,\n\t\t\t\t\"fontColor\": colors.font.default,\n\t\t\t\t\"fontSize\": 8,\n\t\t\t\t\"fontWeight\": \"bold\",\n\t\t\t\t\"highlightColor\": colors.node.highlight,\n\t\t\t\t\"highlightFontSize\": 14,\n\t\t\t\t\"highlightFontWeight\": \"bold\",\n\t\t\t\t\"highlightStrokeColor\": colors.node.highlightStroke,\n\t\t\t\t\"highlightStrokeWidth\": 2,\n\t\t\t\t\"labelProperty\": \"id\",\n\t\t\t\t\"mouseCursor\": \"pointer\",\n\t\t\t\t\"opacity\": 1,\n\t\t\t\t\"renderLabel\": true,\n\t\t\t\t\"size\": 210,\n\t\t\t\t\"strokeColor\": colors.node.stroke,\n\t\t\t\t\"strokeWidth\": \"1.6\",\n\t\t\t\t\"svg\": \"\",\n\t\t\t\t\"symbolType\": \"circle\"\n\t\t},\n\t\t\"link\": {\n\t\t\t\t\"color\": colors.link.default,\n\t\t\t\t\"fontColor\": \"black\",\n\t\t\t\t\"fontSize\": 8,\n\t\t\t\t\"fontWeight\": \"normal\",\n\t\t\t\t\"highlightColor\": colors.link.highlight,\n\t\t\t\t\"highlightFontSize\": 8,\n\t\t\t\t\"highlightFontWeight\": \"normal\",\n\t\t\t\t\"labelProperty\": \"label\",\n\t\t\t\t\"mouseCursor\": \"pointer\",\n\t\t\t\t\"opacity\": 0.7,\n\t\t\t\t\"renderLabel\": true,\n\t\t\t\t\"semanticStrokeWidth\": false,\n\t\t\t\t\"strokeWidth\": 1.5,\n\t\t\t\t\"markerHeight\": 6,\n\t\t\t\t\"markerWidth\": 6\n\n\t\t}\n};\n\nexport { DEBUGGING, API_ENDPOINT, graphConfig, colors, getWindowDimensions };\n","import { colors }  from \"../myConfig\";\n\nconst initial_state = {\n\t\t/* graph payload (with minimalist structure) */\n\t\tnodes: [],\n\t\tlinks: [],\n\t\tselected:{},\n\t\tdefinedNode:{},\n\t\tisError: false,\n\t\terrorMsg: \"\",\n\t\tisFetchFailed: false,\n\t\tisWordNotFound: false,\n\t\twordsNotFound: [],\n\t\tisPathNotFound: false,\n\t\tpathsNotFound: [],\n\t\tisEmpty: true,\n\t\tisLoading: true,\n\t\tsearchTerm: '',\n\t\tDestinationTerm: '',\n\t\tisDeepLinks: false,\n\t\tshowModal: false,\n\t\tisSideBar: true,\n};\n\nconst stateReducer = (state, action) =>{\n\t\t/* make reducer for the words data and internal state */\n\t\tlet node;\n\t\tswitch (action.type){\n\t\t\t\tcase 'SET_NEW_NODES':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload ],\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NEW_LINKS':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload ]\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NODE_LINK':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, action.payload.node ],\n\t\t\t\t\t\t\t\tlinks: [ ...state.links, action.payload.link ]\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_STATE':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NEW_NODE':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [ { ...action.payload, selected: true, color: colors.node.selected  } ],\n\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\tselected: action.payload, // save as selected\n\t\t\t\t\t\t\t\tdefinedNode: action.payload, // save as a definietion \n\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_PATH_NODE':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, { ...action.payload.node, selected: true, color: colors.node.selected } ],\n\t\t\t\t\t\t\t\tlinks: [ ...state.links, { ...action.payload.link, color: colors.node.selected } ],\n\t\t\t\t\t\t\t\tselected: action.payload.node, // save as selected\n\t\t\t\t\t\t\t\tdefinedNode: action.payload.node, // save as a definietion \n\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NODE_DONE':\n\t\t\t\t\t\tnode = state.nodes.filter( node => node.id === action.payload )[0];\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, { ...node, color: colors.node.done }], \n\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_DEFINED_NODE':\n\t\t\t\t\t\tnode = state.nodes.filter( node => node.id === action.payload )[0];\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tdefinedNode: node,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'ERASE_NODES':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_SEARCH_TERM':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tsearchTerm: action.payload,\t\t\t\t\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_DEST_TERM':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tdestinationTerm: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NODE_SELECTED':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, { ...action.payload, color: colors.node.selected }], // change color\n\t\t\t\t\t\t\t\tselected: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SWITCH_SELECTED_NODE':\n\t\t\t\t\t\tnode = state.nodes.filter( node => node.id === action.payload )[0];\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [ \n\t\t\t\t\t\t\t\t\t\t...state.nodes, \n\t\t\t\t\t\t\t\t\t\t{ ...state.selected, color: colors.node.done, }, \n\t\t\t\t\t\t\t\t\t\t{ ...node, color: colors.node.selected },\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tselected: node,\n\t\t\t\t\t\t\t\tdefinedNode: node,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'TOGGEL_MODAL':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tshowModal: !state.showModal,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_SHOW_MODAL':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tshowModal: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_WORD_NOT_FOUND':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\tisWordNotFound: true,\n\t\t\t\t\t\t\t\t// add not found wors to list\n\t\t\t\t\t\t\t\twordsNotFound: new Set([ ...state.wordsNotFound, action.payload]),\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_PATH_NOT_FOUND':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\tisPathNotFound: true,\n\t\t\t\t\t\t\t\tpathsNotFound: new Set([ ...state.pathsNotFound, { ...action.payload}]),\n\t\t\t\t\t\t};\n\t\t\t\tcase 'DISSMISS_ERROR':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: false,\n\t\t\t\t\t\t\t\terrorMsg: \"\",\n\t\t\t\t\t\t\t\tisWordNotFound: false,\n\t\t\t\t\t\t\t\twordsNotFound: [],\n\t\t\t\t\t\t\t\tisPathNotFound: false,\n\t\t\t\t\t\t\t\tpathsNotFound:  [],\n\t\t\t\t\t\t};\n\t\t\t\tcase 'TOGGLE_DEEP_LINKS':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisDeepLinks: !state.isDeepLinks,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'TOGGLE_SIDE_BAR':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisSideBar: !state.isSideBar,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_FETCH_FAILED':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\tisFetchFailed: true,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_ERROR':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\terrorMsg: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error();\n\t\t}\n}\n\nexport { initial_state, stateReducer };\n\n","import React  from 'react';\nimport { Carousel  } from 'react-bootstrap';\n\n/*\n * =======================================\n *      Carousel Componente for React \n * =======================================\n */\n\nfunction CoruselContainer(){\n\t\treturn(\n\t\t\t\t<Carousel>\n\t\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName=\"d-block w-100\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"graph_scaled_down.jpg\"\n\t\t\t\t\t\t\t\t\t\talt=\"First slide\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t\t\t\t<h3>First slide label</h3>\n\t\t\t\t\t\t\t\t\t\t<p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n\t\t\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t\t</Carousel.Item>\n\t\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName=\"d-block h-100 w-100\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"graph1.jpg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Third slide\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t\t\t\t<h3>Second slide label</h3>\n\t\t\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n\t\t\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t\t</Carousel.Item>\n\t\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName=\"d-block h-100 w-100\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"graph2.jpg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Third slide\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t\t\t\t<h3>Third slide label</h3>\n\t\t\t\t\t\t\t\t\t\t<p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\n\t\t\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t\t</Carousel.Item>\n\t\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName=\"d-block h-100 w-100\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"graph3.jpg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Third slide\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t\t\t\t<h3>Third slide label</h3>\n\t\t\t\t\t\t\t\t\t\t<p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\n\t\t\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t\t</Carousel.Item>\n\t\t\t\t</Carousel>\n\t\t)\n}\n\nexport default CoruselContainer;\n","const unselectedNodeColor = '#3D3C3A'\nconst unselectedLinkColor = '#d3d3d3'\nconst selectedNodeColor = '#E41B17'\nconst selectedLinkColor = '#E41B17'\nconst pathNodeColor = '#17E0E3'\nconst pathLinkColor = '#17E0E3'\n//const pathLinkColor = '#E41B17'\n\n// function for getting random num\nconst getRandomInt = (max) => {\n\t\treturn Math.floor(Math.random() * Math.floor(max))+1 ;\n}\n\n// fuction for getting a random string\nconst getRandomStr = (length) => {\n\t\tvar result           = '';\n\t\tvar characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\t\tvar charactersLength = characters.length;\n\t\tfor ( var i = 0; i < length; i++ ) result += characters.charAt(Math.floor(Math.random() * charactersLength));\n\t\treturn result;\n}\n\n//generate random link\nconst getRandomLinks = (link_number, word, nodes) => {\n\t\tvar seen_targets = [] \n\t\tvar links = [];\n\t\tfor (var i = 0; i < link_number; i++ ){\n\t\t\t\tvar target = nodes[getRandomInt(nodes.length-1)].id;\n\t\t\t\tif(!seen_targets.includes(target)){\n\t\t\t\t\t\tlinks.push({ source: word, target: target });\n\t\t\t\t\t\tseen_targets.push(target);\n\t\t\t\t}\n\t\t}\n\t\treturn links;\n}\n\n// Generate a random node \nconst genRandomNode = (nodes) => {\n\t\tvar title = getRandomStr(6);\n\t\tvar links = getRandomLinks(getRandomInt(6), title, nodes);\n\t\treturn { node:{ id: title }, links };\n}\n\n\n// generate a list of grapth recursibly\nconst genGrapNodes = (word, depth=0, data=[]) =>{\n\t\tfor(var i = 0; i < getRandomInt(3); i++){\n\t\t\t\tvar adjacent_word = getRandomStr(8);\n\t\t\t\tdata.push({  node:{id: adjacent_word }, links:[{ source: word, target: adjacent_word }] });\n\t\t\t\tif( depth > 0 ) genGrapNodes(adjacent_word, depth -1, data);\n\t\t}\n\t\treturn data;\n}\n\nconst makeNewNode = (prevNode, newNode, path=false, selected=false) => {\n\t\tvar nodeColor = (path)? pathNodeColor : (selected)? selectedNodeColor : unselectedNodeColor\n\t\tvar linkColor = (path)? pathLinkColor : (selected)? selectedLinkColor : unselectedLinkColor\n\t\t\t\treturn { \n\t\t\t\t\t\tnode:{ id: newNode, color: nodeColor}, \n\t\t\t\t\t\tlinks:[{ source: prevNode, target: newNode, color: linkColor}] \n\t\t\t\t}\n\t\t};\n\n// Generate a Nodes path from  node to the other\nconst genPath = (start, destination) =>{\n\t\tlet distance  = getRandomInt(10) + 5;\n\t\tlet currentNode = start;\n\t\tlet data = [];\n\t\tdata.push({node:{ id: start, color: pathNodeColor}, links:[] });\n\t\tfor(var i = 0; i < distance; i++){\n\t\t\t\tvar nextNode = getRandomStr(8);\n\t\t\t\tdata.push(makeNewNode(currentNode, nextNode, true));\n\t\t\t\tfor(var j = 0; j < getRandomInt(5); j++){\n\t\t\t\t\t\tvar adjacentNode = getRandomStr(8);\n\t\t\t\t\t\tdata.push(makeNewNode(nextNode, adjacentNode));\n\t\t\t\t}\n\t\t\t\tcurrentNode = nextNode;\n\t\t}\n\t\tdata.push(makeNewNode(currentNode, destination, true));\n\t\treturn data;\n}\n\n\n// generate a list of grapth recursibly sent them in lists \nconst genGrapDepth = (word, depth=0, data={ nodes:[], links:[] }) =>{\n\t\t// Add word to data nodes \n\t\tdata.nodes.push({ id: word });\n\t\t//for word get adjacent words into link data\n\t\tif( depth <= 0 ) return data;\n\t\tfor(var i = 0; i < getRandomInt(6); i++){\n\t\t\t\t//gen a adjecent word\n\t\t\t\tvar adjacent_word = getRandomStr(8);\n\t\t\t\t// Add link \n\t\t\t\tdata.links.push({ source: word, target: adjacent_word });\n\t\t\t\t// be a recursive bitch\n\t\t\t\tgenGrapDepth(adjacent_word, depth -1, data);\n\t\t}\n\t\treturn data;\n}\n\n\nexport { getRandomInt, getRandomStr, getRandomLinks, genRandomNode, genGrapNodes, genPath, genGrapDepth }\n","import { colors, API_ENDPOINT }  from \"./myConfig\";\nimport { getRandomInt }  from \"./Components/RandomGenerator\";\n\n/*\n * ==================================================\n *      Functions Definnitions for handeling changes\n * ==================================================\n * \n */\n\n/* \n * Functions for processing single node search and adjacent nodes \n * */\n\nconst processNode = (node) =>{\n\t\t/* process a node from the api into one for the dispatcher\n\t\t * it changes title for id, for instance */\n\t\tnode['id'] = node.w_id;\n\t\tnode['key'] = node.w_id;\n\t\tnode['isSelected'] = false;\n\t\tnode['color'] = colors.node.default;\n\t\treturn node\n}\n\n/* retrive node with given node id from state */\nconst getNode = (nodeId, state) => \n\t\tstate.nodes.filter( node => \n\t\t\t\tnode.id === nodeId )[0]\n\n/* returns true id node is not in state in state, \n * could import time complexity by using a hash table */\nconst isNewNode = (nodeId, state) => \n\t\tstate.nodes.every( node => node.id !== nodeId )\n\n/* when user clicks on a node, query adjacent nodes\n * and set node as selected */\nconst onClickNode = (nodeId, state, dispatchState) => {\n\t\tqueryAdjecentNodes(getNode(nodeId, state), state, dispatchState)\n\t\tdispatchState({type:'SWITCH_SELECTED_NODE', payload: nodeId})};\n\n/* takes a dispachState functions and dispaches it in a \n\t * random timply fashion this is usefulf for node not to \n\t * appear all at once in the graph and make it easier on \n\t * the browser. Returns nothing*/\nconst timelyDispatch = (dispatchFunc , waitTime=0.5, random=0) => \n\t\tsetTimeout(dispatchFunc, waitTime + getRandomInt(random));\n\n/* reset the graph state and start a new query into a word, \n * sometime this stymes when it is called a second time,\n * this might be because of dispatchState being called twice\n * must investigate.  */\nconst queryNewWord = (word, state, dispatchState) => {\n\t\tfetch(API_ENDPOINT + word) // fetch word\n\t\t\t\t.then(result => //unpack node\n\t\t\t\t\t\tresult.json())\n\t\t\t\t.then(result => //check if word was found\n\t\t\t\t\t\tcatchError(result, state, dispatchState)) \n\t\t\t\t.then(result => //process node\n\t\t\t\t\t\tprocessNode(result)) \n\t\t\t\t.then(node => { //dispatch as new word\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype: 'SET_NEW_NODE', \n\t\t\t\t\t\t\t\tpayload: node\n\t\t\t\t\t\t}); \n\t\t\t\t\t\treturn node; })\n\t\t\t\t.then(node => // get the surrounding words\n\t\t\t\t\t\tqueryAdjecentNodes(node, state, dispatchState))\n\t\t\t\t.catch(() => \n\t\t\t\t\t\tdispatchState({type:'SET_FETCH_FAILED'}));\n}\n\n/* Fetch all the adjancent node of a given node and dispatch */\nconst queryAdjecentNodes = (node, state, dispatchState) => {\n\t\t// define whether we should link te deeper\n\t\tlet linkAll = state.isDeepLinks;\n\t\t// define which type of graph we are requesting\n\t\tlet graph_type = 'synonyms/';\n\t\t// fetch nodes\n\t\tfetch(API_ENDPOINT + graph_type + node.id )\n\t\t\t\t.then(result =>// request the synonyms\n\t\t\t\t\t\tresult.json())\n\t\t\t\t\t\t.then(result =>// catch erros if there are any\n\t\t\t\t\t\t\t\tcatchError(result, state, dispatchState))\n\t\t\t\t\t\t.then(adjNodes =>  \n\t\t\t\t\t\t\t\tadjNodes.forEach(// for every node in the fetched array\n\t\t\t\t\t\t\t\t\t\tadjNode => timelyDispatch(() => {// dispacth timely\n\t\t\t\t\t\t\t\t\t\t\t\t// for each of the nodes in the list \t\t\n\t\t\t\t\t\t\t\t\t\t\t\tadjNode = processNode(adjNode); //process node \n\t\t\t\t\t\t\t\t\t\t\t\t// proces is it is new node, or deep link set\n\t\t\t\t\t\t\t\t\t\t\t\tif(linkAll || isNewNode(adjNode.id, state)){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchState({//dispatch node with link node\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NODE_LINK', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode: adjNode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node.id ,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: adjNode.id \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\n\t\t\t\t))\n\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}))\n}\n\n\n/* \n * Functions for processing paths of nodes \n *\n * */\n\n/* takes a list of inputs \n * and divied it into pairs */\nconst pairUp = (list) => {\n\t\tlet pairs = [];\n\t\tfor(let i = 0; i+1 <= list.length - 1; i++)\n\t\t\t\tpairs.push({'first': list[i], 'last':list[i+1]});\n\t\treturn pairs\n}\n\n/* gets a list of word and removes the ones which \n * do not checkout in the api.\n * This seemly simple task becomes complex to do \n * with promises*/\nconst removeNotFoundWords = async (words, dispatchState) => {\n\t\tvar foundWords = new Array(words.lenght)\n\t\t// make a empty array of as long as\n\t\t// the origial to mantain the same order\n\t\tawait Promise.all( words.map( (word, index) => \n\t\t\t\t// for every word check the api, \n\t\t\t\t// await untill all promises are returned\n\t\t\t\tfetch(API_ENDPOINT+'check/'+ word +\"/\")\n\t\t\t\t.then( response => response.json())\n\t\t\t\t.then( response => { \n\t\t\t\t\t\tif(response.detail === \"Found.\"){ \n\t\t\t\t\t\t\t\tfoundWords[index] = word \n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\ttype:'SET_WORD_NOT_FOUND', \n\t\t\t\t\t\t\t\t\t\tpayload: word})\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(err => console.log(err))\n\t\t))\n\t\treturn foundWords.filter( Boolean )\n}\n\n/* add for each node in the path where it comming from */\nconst processPath = (path) =>{\n\t\tlet prevNode = null; //declare prev node\n\t\tif(path instanceof Array){ // only if it is a list \n\t\t\t\tpath.forEach((node) => { \n\t\t\t\t\t\tnode = processNode(node); //might as well process node \n\t\t\t\t\t\t// set the previous node if there was a previous one\n\t\t\t\t\t\tnode['prevNode'] = (prevNode)? prevNode : node.id;\n\t\t\t\t\t\t// if it is start of path set first previous to itself\n\t\t\t\t\t\tprevNode = node.id;\n\t\t\t\t})\n\t\t}\n\t\treturn path\n}\n\n\n/* gets a list of pair request for paths an queryes the api \n * then is saves those paths in a order list and returns*/\nconst fetchPathsParts = async (pathRequests, dispatchState) => {\n\t\tvar paths = new Array(pathRequests.length)\n\t\tawait Promise.all( \n\t\t\t\tpathRequests.map((request, index) =>\n\t\t\t\t\t\tfetch(API_ENDPOINT+'path/'+request.first+\"/\"+request.last)\n\t\t\t\t\t\t.then( response => response.json())\n\t\t\t\t\t\t.then( response => processPath(response))\n\t\t\t\t\t\t.then( response => { \n\t\t\t\t\t\t\t\tif(response.detail === \"Path not found.\"){ \n\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\ttype:'SET_PATH_NOT_FOUND', \n\t\t\t\t\t\t\t\t\t\t\t\tpayload: request});\n\t\t\t\t\t\t\t\t\t\tpaths[index] = null;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tpaths[index] = response;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => console.log(err))\n\t\t\t\t))\n\t\treturn paths;\n}\n\nconst amendPath = async (paths) => {\n\t\tconst getGaps = (paths) => {\n\t\t\t\tlet gaps = [];\n\t\t\t\tlet gap = {start:null, end:null}\n\t\t\t\tlet wasPath = false;\n\t\t\t\tlet wasGap = false;\n\t\t\t\tpaths.forEach((path, index) => {\n\t\t\t\t\t\tif(path === null ){// if it is gap\n\t\t\t\t\t\t\t\tif(wasPath){  // comes from gap\n\t\t\t\t\t\t\t\t\t\tgap.start = index //save start\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// and comes from path\n\t\t\t\t\t\t\t\twasGap = true; // switch to gap\n\t\t\t\t\t\t\t\twasPath = false \n\t\t\t\t\t\t}else{ //if is path\n\t\t\t\t\t\t\t\tif(wasGap){   // and comes from gap\n\t\t\t\t\t\t\t\t\t\tgap.end = index; // record end\n\t\t\t\t\t\t\t\t\t\tgaps.push({...gap}); //save gap\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\twasPath = true; // switch to path \n\t\t\t\t\t\t\t\twasGap = false;\n\t\t\t\t\t\t}\n\t\t\t\t}) \n\t\t\t\treturn gaps;\n\t\t}\n\n\t\tfunction* generateSequence(start, end, paths) {\n\t\t\t\t// for every path left in paths\n\t\t\t\tfor(let pathIndex = end; pathIndex < paths.length; pathIndex++){\n\t\t\t\t\t\tlet curPath = paths[pathIndex]\n\t\t\t\t\t\tif(paths[pathIndex] !== null){ // if it is not a null path\n\t\t\t\t\t\t\t\t// \tif gap is one length, start at 1, else 0\n\t\t\t\t\t\t\t\t//let index = (end-start > 1)? 0 : 1; \n\t\t\t\t\t\t\t\t// for every node in the current path\n\t\t\t\t\t\t\t\tfor(let nodeIndex = 0; nodeIndex < curPath.length; nodeIndex++){\n\t\t\t\t\t\t\t\t\t\tlet stop = yield curPath[nodeIndex]; // return the current path \n\t\t\t\t\t\t\t\t\t\tif(stop === true) // if the messeage send back is to stop\n\t\t\t\t\t\t\t\t\t\t\t\treturn null; // stop generation\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null; // reached the end\n\t\t}\n\n\n\t\tconst bridgeGap = async (start, end, paths) => {\n\t\t\t\t/* gets a set of indexes indicating the gap, \n\t\t\t\t * make fetch request to attempt to find a \n\t\t\t\t * conncetion */\n\t\t\t\t/* generator fuction for trying node to  find a bridge*/\n\t\t\t\t\n\t\t\t\tconsole.log(start)\n\t\t\t\tconsole.log(end)\n\t\t\t\tconsole.log(paths)\n\t\t\t\tlet leftPath = paths[start-1];\n\t\t\t\t// last word in the left side path\n\t\t\t\tlet lastWord = leftPath[leftPath.length-1].word;\n\t\t\t\t// if there exacly one gap, dont bother chechi\n\t\t\t\t//let index = (end-start > 1)? 0 : 1; \n\t\t\t\tlet gen = generateSequence(start, end, paths);\n\t\t\t\tlet curIter = gen.next();\n\t\t\t\tconst foundBridge = (response) =>{\n\t\t\t\t\t\tif(response.detail === \"Path not found.\"){ \n\t\t\t\t\t\t\t\tcurIter = gen.next(); // get the next node\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tpaths[start] = response; //set the bridge\n\t\t\t\t\t\t\t\tcurIter = gen.next(true); //break loop\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\t \n\t\t\t\twhile(!curIter.done){ // while the bridge is not been found\n\t\t\t\t\t\tconsole.log(curIter.value.word);\n\t\t\t\t\t\tawait fetch(API_ENDPOINT+'path/'+lastWord+\"/\"+ curIter.value.word)\n\t\t\t\t\t\t\t\t.then( response => response.json())\n\t\t\t\t\t\t\t\t.then( response => processPath(response))\n\t\t\t\t\t\t\t\t.then( foundBridge )\n\t\t\t\t\t\t\t\t.catch(err => console.log(err))\n\t\t\t\t}\n\t\t}\n\t\tlet gaps = getGaps(paths);\n\t\tawait Promise.all(gaps.map( gap => bridgeGap(gap.start, gap.end, paths)))\n\t\treturn paths;\n}\n\n\n/* get a list of paths of words, joins them together \n * and dipatches it to state*/\nconst dispatchPath = (paths, state, dispatchState) => {\n\t\tconsole.log(paths)\n\t\tlet finalPath = [];\n\t\tpaths = paths.filter( Boolean ); // filter any null chars\n\t\t// add all paths together\n\t\tpaths.forEach(path => finalPath.push(...path)) \n\t\t//console.log(finalPath)\n\t\tfinalPath.forEach((node, index) =>//for every node in final path\n\t\t\t\ttimelyDispatch(() => { // dispath in a timely order\n\t\t\t\t\t\t//console.log(state.isEmpty)\n\t\t\t\t\t\tif(index === 0){ // if this is the first node\n\t\t\t\t\t\t\t\tdispatchState({ //dipatch as new node\n\t\t\t\t\t\t\t\t\t\ttype: 'SET_NEW_NODE', \n\t\t\t\t\t\t\t\t\t\tpayload: node, })\n\t\t\t\t\t\t}else{ // is not first node\n\t\t\t\t\t\t\t\t//console.log(node.prevNode)\n\t\t\t\t\t\t\t\t//console.log(\" --> \")\n\t\t\t\t\t\t\t\t//console.log(node.id)\n\t\t\t\t\t\t\t\t//console.log(\"\\n\")\n\t\t\t\t\t\t\t\tdispatchState({ //if append a node list\n\t\t\t\t\t\t\t\t\t\ttype: 'SET_PATH_NODE', \n\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\tnode: node,\n\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: node.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node.prevNode, \n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t)\n}\n\n/* gets passesed a set of two words, \n * queries the server for the path and \n * dispateches the result to state */\nconst queryPath = async (words, state, dispatchState) => {\n\t\t//first remove all words from the input which are not in api\n\t\twords = await removeNotFoundWords(words, dispatchState)\n\t\t\t\t.catch(err =>  //catch error is could not fetch\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype:'SET_ERROR', \n\t\t\t\t\t\t\t\tpayload:\"Could not get words\"}));\n\t\t// get the list of words and return them in pair\n\t\t// w1, w2, w3, w4 => (w1, w2), (w2, w3), (w3, w4)\n\t\tlet pathRequests = pairUp(words)\n\t\t// for every pair of words query the api for a path between them\n\t\tlet pathParts = await fetchPathsParts(pathRequests, dispatchState)\n\t\t\t\t.catch(err => \n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype:'SET_ERROR', //catch error is could not fetch\n\t\t\t\t\t\t\t\tpayload: \"could not get paths\"}));\n\t\t// get the final path and attempt to cannect them together\n\t\t// to form one cohesive path\n\t\tlet finalPath = await amendPath(pathParts)\n\t\t.catch(err => \n\t\t\t\tdispatchState({\n\t\t\t\t\t\ttype:'SET_ERROR', \n\t\t\t\t\t\tpayload: \"Could not amend path\"}))\n\t\tdispatchPath(finalPath, state, dispatchState)\n\t\t// dispatch the ammedned path to state to be graphed\n}\n\n\n/* Set error to state when user search a word not found */\nconst catchError = (response, state, dispatchState) => {\n\t\t//console.log(\"got to cath error:\")\n\t\t//console.log(response)\n\t\tif(response instanceof Array){\n\t\t\t\tlet foundWords = []\n\t\t\t\t//console.log(\"words was not found\")\n\t\t\t\t// if it has the response for many words\n\t\t\t\tresponse.forEach((word, index, words) => {\n\t\t\t\t\t\tif(word.detail === \"Not Found.\"){\n\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\ttype: 'SET_WORD_NOT_FOUND', \n\t\t\t\t\t\t\t\t\t\tpayload: word.w_id});\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tfoundWords.push(word);\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\treturn foundWords;\n\t\t}else{ // if it only one elment\n\t\t\t\tif(response.detail === \"Not found.\") {\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype: 'SET_WORD_NOT_FOUND', \n\t\t\t\t\t\t\t\tpayload: state.searchTerm});\n\t\t\t\t\t\tthrow new Error(\"word not found\");\n\t\t\t\t}else if(response.detail === \"Path not found.\"){\n\t\t\t\t\t\t// if the error is path not found\n\t\t\t\t\t\t//console.log(\"path was not found\")\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype: 'SET_PATH_NOT_FOUND', \n\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t'first': response.first,\n\t\t\t\t\t\t\t\t\t\t'last': response.last, }})\n\t\t\t\t\t\tthrow new Error(\"path not found\");\n\t\t\t\t}else{\n\t\t\t\t\t\treturn response\n\t\t\t\t}\n\t\t}\n}\n\nconst onMouseOverNode = function(nodeId, dispatchState) {\n\t\tdispatchState({type:'SET_DEFINED_NODE', payload: nodeId})  \n\t\t// need to fund a way to also run the default fuction \n};\n\nexport { processNode, catchError, queryNewWord, queryAdjecentNodes, queryPath, onClickNode, onMouseOverNode }\n\n","import React  from 'react';\nimport { ProSidebar, SidebarHeader, SidebarContent, Menu, MenuItem, SubMenu  } from 'react-pro-sidebar';\nimport 'react-pro-sidebar/dist/css/styles.css';\nimport { onClickNode } from '../node_functions';\nimport { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\nimport { \n\t\tfaLandmark, \n\t\tfaStickyNote, \n\t\tfaAlignLeft, \n\t\tfaBook,\n\t\tfaBookOpen,\n\t\tfaCircle,\n\t\tfaProjectDiagram,\n\t\tfaScroll,\n} from '@fortawesome/free-solid-svg-icons'\n\n\n/*\n * =======================================\n *      SideBar Componente for React \n * =======================================\n *     Using proSideBar \n */\n\nfunction SideBarContainer({state, dispatchState}){\n\n\t\tconst renderDefinitions = (node) => {\n\t\t\t\tlet syntaxes = new Set();\n\t\t\t\tnode.definitions.forEach( def => syntaxes.add(def.syntax));\n\t\t\t\treturn <Menu>\n\t\t\t\t\t\t{(!state.isSideBar)? <h1>Definitions:</h1>: <></> }\n\t\t\t\t\t\t{ [...syntaxes].map( (syntax, i) => \n\t\t\t\t\t\t\t\t(i===0)?\n\t\t\t\t\t\t\t\t\t\t<SubMenu key={i} title={syntax} open={true} icon={<FontAwesomeIcon icon={faCircle}/>}>\n\t\t\t\t\t\t\t\t\t\t\t\t{ node.definitions.map( (definition, i) => \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(syntax === definition.syntax)?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SidebarContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{paddingRight: 2}}>{definition.definition}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</SidebarContent> \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>: null\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</SubMenu> \n\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<SubMenu key={i} title={syntax} icon={<FontAwesomeIcon icon={faCircle}/>} >\n\t\t\t\t\t\t\t\t\t\t\t\t{ node.definitions.map( (definition, i) => \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(syntax === definition.syntax)?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SidebarContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{paddingRight: 2}}>{definition.definition}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</SidebarContent> \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>: null\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</SubMenu> \n\t\t\t\t\t\t) }\n\t\t\t\t</Menu>\n\t\t}\n\n\t\tconst renderExamples = (node) => {\n\t\t\t\treturn <>\n\t\t\t\t\t\t{(node.examples.length !== 0)? \n\t\t\t\t\t\t\t\t<Menu popperArrow={true}>\n\t\t\t\t\t\t\t\t\t\t<SubMenu title=\"Examples:\" icon={<FontAwesomeIcon icon={faAlignLeft}/>} style={{fontSize:'20px'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t{ node.examples.map( (example, i) => \n\t\t\t\t\t\t\t\t\t\t\t\t<SidebarContent key={i}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{example['example']}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</SidebarContent> \n\t\t\t\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t</Menu> : null\n\t\t\t\t\t\t}\n\t\t\t\t</>\n\t\t}\n\n\t\tconst renderEtymology = (node) => {\n\t\t\t\treturn <>\n\t\t\t\t\t\t{(node.etymology !== \"\")? \n\t\t\t\t\t\t\t\t<Menu popperArrow={true} >\n\t\t\t\t\t\t\t\t\t\t<SubMenu title=\"Etymology:\" icon={<FontAwesomeIcon icon={faLandmark}/>} style={{fontSize:'20px'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<SidebarContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{node.etymology}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</SidebarContent> \n\t\t\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t</Menu> : null\n\t\t\t\t\t\t}\n\t\t\t\t</>\n\t\t}\n\n\t\tconst renderNodes = (node) => {\n\t\t\t\treturn <>\n\t\t\t\t\t\t{(node.notes !== \"\")? \n\t\t\t\t\t\t\t\t<Menu popperArrow={true}>\n\t\t\t\t\t\t\t\t\t\t<SubMenu title=\"Anotations:\"\n\t\t\t\t\t\t\t\t\t\t\t\ticon={<FontAwesomeIcon icon={faStickyNote}/>}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{fontSize:'20px'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<SidebarContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{node.Notes}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</SidebarContent> \n\t\t\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t</Menu> : null\n\t\t\t\t\t\t}\n\t\t\t\t</>\n\t\t}\n\n\t\tconst renderSynonyms = (node) => {\n\t\t\t\treturn <>\n\t\t\t\t\t\t{(node.synonyms.length !== 0)? \n\t\t\t\t\t\t\t\t<Menu popperArrow={true}>\n\t\t\t\t\t\t\t\t\t\t<SubMenu title=\"Synonyms:\" icon={<FontAwesomeIcon icon={faProjectDiagram}/>} style={{fontSize:'20px'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t{ node.synonyms.map( (synonym, i) => \n\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem key={i} active={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onClickNode(synonym['synonym'], state, dispatchState)} >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{synonym['synonym']}\n\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem> \n\t\t\t\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t</Menu> : null\n\t\t\t\t\t\t}\n\t\t\t\t</>\n\t\t}\n\n\t\tconst toogleSideBar = () => dispatchState({type:'TOGGLE_SIDE_BAR'})\n\n\t\treturn(\n\t\t\t\t<div style={{ float:'left', position: 'absolute', height:'91%'}}>\n\t\t\t\t\t\t<ProSidebar collapsed={state.isSideBar} >\n\t\t\t\t\t\t\t\t{(state.isSideBar)?\n\t\t\t\t\t\t\t\t\t\t<MenuItem onClick={toogleSideBar} icon={\n\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginLeft:'1.7rem', marginTop:'1rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight:'25px', width:'25px'}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ticon={faBook}/>}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t:<MenuItem onClick={toogleSideBar} icon={\n\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginLeft:'6.5rem', marginTop:'1rem',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight:'55px', width:'55px'}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ticon={faBookOpen}/>}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t<Menu iconShape=\"square\">\n\t\t\t\t\t\t\t\t\t\t{(!state.isSideBar)?\n\t\t\t\t\t\t\t\t\t\t\t\t<SidebarHeader style={{textAlign:'center'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h1>{state.definedNode.word}</h1>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i>{(state.definedNode.definitions[0])?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.definedNode.definitions[0].syntax\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}</i>\n\t\t\t\t\t\t\t\t\t\t\t\t</SidebarHeader> \n\t\t\t\t\t\t\t\t\t\t\t\t: <SubMenu icon={<FontAwesomeIcon icon={faScroll}/>}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem active={true} >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h1>{state.definedNode.word}</h1>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i>{(state.definedNode.definitions[0])?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate.definedNode.definitions[0].syntax\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}</i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t{renderDefinitions(state.definedNode)}\n\t\t\t\t\t\t\t\t\t\t{renderExamples(state.definedNode)}\n\t\t\t\t\t\t\t\t\t\t{renderEtymology(state.definedNode)}\n\t\t\t\t\t\t\t\t\t\t{renderSynonyms(state.definedNode)}\n\t\t\t\t\t\t\t\t\t\t{renderNodes(state.definedNode)}\n\t\t\t\t\t\t\t\t</Menu>\n\t\t\t\t\t\t</ProSidebar>\n\t\t\t\t</div>\n\t\t)\n}\n\nexport default SideBarContainer;\n","import { useEffect  } from 'react';\n/**\n ** useKeyPress\n ** @param {string} key - the name of the key to respond to, compared against event.key\n ** @param {function} action - the action to perform on key press\n **/\nexport default function useKeypress(key, action) {\n\t\tuseEffect(() => {\n\t\t\t\tfunction onKeyup(e) {\n\t\t\t\t\t\tif (e.key === key) action()\n\t\t\t\t}\n\t\t\t\twindow.addEventListener('keyup', onKeyup);\n\t\t\t\treturn () => window.removeEventListener('keyup', onKeyup);\n\t\t\t\t  \n\t\t}, [action, key]);\n\t\t\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT }  from \"../../myConfig\";\nimport useKeypress from '../../hooks/useKeypress';\nimport './SearchSuggestion.css'; \nimport { queryNewWord, queryPath } from '../../node_functions';\n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/' //add this to myconfig\n\nfunction SuggestionsContainer(props){\n\t\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t\tconst [suggestions, setSuggestions] = useState([])\t\n\t\tconst [selected, setSelected] = useState(0)\t\n\t\t\n\n\t\tuseKeypress('ArrowDown', () =>\n\t\t\t\t(selected < 0)?\n\t\t\t\tsetSelected(suggestions.length-1)\n\t\t\t\t: setSelected(selected + 1)\n\t\t);\n\n\t\tuseKeypress('ArrowUp', () => \n\t\t\t\t(selected > suggestions.length-1)?\n\t\t\t\tsetSelected(0)\n\t\t\t\t:setSelected(selected - 1)\n\t\t);\n\n\n\t\tconst getmultipleWords = (string) => {\n\t\t\t\t/* determines qhereteher a string \n\t\t\t\t * is compossed of multiple words */\n\t\t\t\t//remove multiple spaces\n\t\t\t\t//trim, remove multiple and seperate by spaces\n\t\t\t\treturn string.replace(/  +/g, ' ').trim().split(' ') \n\t\t}\n\n\t\tuseKeypress('Enter', () => {\n\t\t\t\tif(isWrittingWord()){\n\t\t\t\t\t\tif(suggestions.length > 0){\n\t\t\t\t\t\t\t\taddToSearchTerm(suggestions[selected].word);\n\t\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t\tlet words = getmultipleWords(state.searchTerm.toLowerCase());\n\t\t\t\t\t\t// set all serches to lowercase\n\t\t\t\t\t\tif(words.length > 1){\n\t\t\t\t\t\t\t\t//if it has more that two words\n\t\t\t\t\t\t\t\tqueryPath(words, state, dispatchState);\n\t\t\t\t\t\t}else{ \n\t\t\t\t\t\t\t\t// if there is only one word\n\t\t\t\t\t\t\t\tqueryNewWord(words[0], state, dispatchState);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t})\n\n\t\tconst isWrittingWord = () =>{\n\t\t\t\t/* uses the state to see if\n\t\t\t\t\t\t* the user is in the middle of writting a word */\n\t\t\t\tlet len = state.searchTerm.length;\n\t\t\t\tlet last = state.searchTerm[state.searchTerm.length-1];\n\t\t\t\tif(len === 0){ return false;\n\t\t\t\t}else if (last === \" \"){ return false;\n\t\t\t\t}else return true; \n\t\t}\n\n\t\tconst filterSuggestions = suggestions => \n\t\t\t\t/* filter out all words which have spaces */\n\t\t\t\tsuggestions.filter( suggestion => /\\s/.test(suggestion))\n\n\t\t\n\t\tconst addToSearchTerm = (word) => {\n\t\t\t\t/* append a given word to the seate searchTerm */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\tlet len = wordList.length \n\t\t\t\twordList[len-1] = word // set the last word as clicke word\n\t\t\t\tdispatchState({ \n\t\t\t\t\t\ttype: 'SET_SEARCH_TERM',\n\t\t\t\t\t\tpayload: wordList.join(\" \") + \" \",\n\t\t\t\t});\t\n\t\t\t\tsetSuggestions([]); // reset suggestions\n\t\t\t\tsetSelected(0); // reset selected\n\t\t}\n\n\n\t\tconst onClick = (word) => addToSearchTerm(word);\n\t\t\n\n\t\tuseEffect(() => {\n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\t//split the search into words\n\t\t\t\tlet len = wordList.length;\n\t\t\t\t//get the length\n\t\t\t\tlet last = wordList[len-1]\n\t\t\t\t//fetch the last element \n\t\t\t\tfetch(API_ENDPOINT + query_search + last)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(result => {console.log(result); return result}) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => filterSuggestions(suggestions))\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch((err) => console.log(err));\n\t\t}, [state.searchTerm, dispatchState])\n\n\n\t\tconst SuggestionList = () =>\n\t\t\t\t<ul class=\"suggestions\">\n\t\t\t\t\t\t{ suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => {  \n\t\t\t\t\t\t\t\t\t\treturn  <li \n\t\t\t\t\t\t\t\t\t\t\t\tkey={index} \n\t\t\t\t\t\t\t\t\t\t\t\tclassName={index === selected? \"selected\": null}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onClick(suggestion.word)}>\n\t\t\t\t\t\t\t\t\t\t\t\t{suggestion.word}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t</ul>\n\n\t\t\t\t\t\treturn <div className=\"input\">\n\t\t\t\t\t\t\t\t{props.children}\n\t\t\t\t\t\t\t\t{isWrittingWord()? <SuggestionList/>: <></> }\n\t\t\t\t\t\t</div>\n}\n\nexport default SuggestionsContainer;\n","import React from 'react';\nimport { queryNewWord, queryPath } from '../node_functions';\nimport { colors }  from \"../myConfig\";\nimport SuggestionsContainer from \"./SearchSuggestion/SearchSuggestion\";\nimport { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\nimport { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n/*\n * =======================================\n *      NavBar Componente for React \n * =======================================\n * \t Using ReaactBootStrap to render the navbar\n */\n\nfunction NavBarContainer({ state, dispatchState }){\n\n\t\t// handle the change by seting the state variable to \n\t\tconst handleSearchChange = change => \n\t\t\t\tdispatchState({ \n\t\t\t\t\t\ttype: 'SET_SEARCH_TERM',\n\t\t\t\t\t\tpayload: change.target.value \n\t\t\t\t});\n\n\t\tconst handleSearchSubmit = () =>  {\n\t\t\t\t/* handle submit search button */\n\t\t\t\tlet words = getmultipleWords(state.searchTerm.toLowerCase());\n\t\t\t\t// set all serches to lowercase\n\t\t\t\tif(words.length > 1){\n\t\t\t\t\t\t//if it has more that two words\n\t\t\t\t\t\tqueryPath(words, state, dispatchState);\n\t\t\t\t}else{ \n\t\t\t\t\t\t// if there is only one word\n\t\t\t\t\t\tqueryNewWord(words[0], state, dispatchState);\n\t\t\t\t}\n\t\t}\n\n\t\tconst getmultipleWords = (string) => {\n\t\t\t\t/* determines qhereteher a string \n\t\t\t\t * is compossed of multiple words */\n\t\t\t\t//remove multiple spaces\n\t\t\t\t//trim, remove multiple and seperate by spaces\n\t\t\t\treturn string.replace(/  +/g, ' ').trim().split(' ') \n\t\t}\n\n\t\tconst handleToggleDeepLinks = () => {\n\t\t\t\t/* hangles the toggle of the deep links, \n\t\t\t\t * resets the graph if there is already a \n\t\t\t\t * selected node */\n\t\t\t\tlet selectedNode = state.selected;\n\t\t\t\tif(!state.isEmpty) queryNewWord(selectedNode.id, state, dispatchState);\n\t\t\t\tdispatchState({type:'TOGGLE_DEEP_LINKS'});\n\t\t}\n\n\n\t\treturn(\n\t\t\t\t<Navbar expand=\"lg\" className=\"justify-content-center\"\n\t\t\t\t\t\tvariant=\"dark\" style={{backgroundColor: colors.black}}>\n\t\t\t\t\t\t<a href=\"index.html\">\n\t\t\t\t\t\t\t\t<img src=\"/logo.png\" width=\"150\"\n\t\t\t\t\t\t\t\t\t\theight=\"70\"\n\t\t\t\t\t\t\t\t\t\talt=\"React Bootstrap logo\" />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<Navbar.Brand href=\"index.html\" className=\"row\"  >\n\t\t\t\t\t\t\t\t<h1>Dictographo</h1>\n\t\t\t\t\t\t</Navbar.Brand>\n\t\t\t\t\t\t<SuggestionsContainer\n\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\tdispatchState={dispatchState}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<InputGroup  size='lg' md='auto' className=\"mx-3\" style={{maxWidth: \"600px\"}} >\n\t\t\t\t\t\t\t\t\t\t<FormControl size=\"lg\" as='input' type=\"text\" placeholder=\"Write some words here...\" \n\t\t\t\t\t\t\t\t\t\t\t\tvalue={state.searchTerm} onChange={handleSearchChange} />\n\t\t\t\t\t\t\t\t\t\t<InputGroup.Append>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button size=\"lg\" variant=\"outline-info\" onClick={handleSearchSubmit}>Search</Button>\n\t\t\t\t\t\t\t\t\t\t</InputGroup.Append>\n\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t</SuggestionsContainer>\n\t\t\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t\t\t\t\t<Nav className=\"ml-auto mx-4\">\n\t\t\t\t\t\t\t\t\t\t<NavDropdown variant=\"dark\"\n\t\t\t\t\t\t\t\t\t\t\t\tsize=\"lg\" title=\"Options\" \n\t\t\t\t\t\t\t\t\t\t\t\ticon={<FontAwesomeIcon icon={faSlidersH}/>}\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"basic-nav-dropdown\">\n\t\t\t\t\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Check type=\"switch\" id=\"custom-switch\" label=\"Deep Links\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={state.isDeepLinks} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleToggleDeepLinks}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</NavDropdown>\n\t\t\t\t\t\t\t\t</Nav>\n\t\t\t\t\t\t</Navbar.Collapse>\n\t\t\t\t</Navbar>\n\t\t)\n}\n\nexport default NavBarContainer;\n","import React  from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../node_functions';\nimport { graphConfig }  from \"../myConfig\";\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({state, dispatchState}){\n\t\t\n\t\t// redifine the function inside this context \n\t\tlet onClickNode_func =\n\t\t\t\t(nodeId) => onClickNode(nodeId, state, dispatchState);\n\n\t\treturn(\n\t\t\t\t<div style={{backgroundImage: 'url(./grid.png)'}} >\n\t\t\t\t\t\t<Graph \n\t\t\t\t\t\t\t\tid=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\tonClickNode={onClickNode_func}\n\t\t\t\t\t\t\t\tbackgroundColor=\"black\"\n\t\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\n\n\t\t)\n}\n\nexport default GraphContainer;\n","import React  from 'react';\nimport { Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({state, dispatchState}) {\n\t\t/* functions that return an error mesage depending onthe state */\n\t\tif (state.isError) {\n\t\t\t\treturn(\n\t\t\t\t\t\t<Alert variant=\"danger\" dismissible \n\t\t\t\t\t\t\t\tonClose={() => dispatchState({type: 'DISSMISS_ERROR'})} >\n\t\t\t\t\t\t\t\t<Alert.Heading>Oh Snap!</Alert.Heading>\n\t\t\t\t\t\t\t\t{state.isWordNotFound? //if the there is not words found\n\t\t\t\t\t\t\t\t<p>Looks like <b>\n\t\t\t\t\t\t\t\t\t\t{ [...state.wordsNotFound].map(word => <i>{word}, </i> ) }\n\t\t\t\t\t\t\t\t</b>in no our dictionary yet.</p> : <></>}\n\t\t\t\t\t\t\t\t{state.isPathNotFound? //if there is a path not found\n\t\t\t\t\t\t\t\t<p>looks like there is no path between: \n\t\t\t\t\t\t\t\t\t\t{[...state.pathsNotFound].map(\n\t\t\t\t\t\t\t\t\t\t\t\tpath => <i><b> {path.first}</b> and <b>{path.last},</b></i> )}\n\t\t\t\t\t\t\t\t</p> : <></> }\n\t\t\t\t\t\t\t\t{state.isFetchFailed? //There is a problem with the network\n\t\t\t\t\t\t\t\t<p>Could not connect to server.</p> : <></> }\n\t\t\t\t\t\t\t\t<p>{state.errorMsg}</p>\n\t\t\t\t\t\t</Alert>)\n\t\t}else{\n\t\t\t\treturn <></>\n\t\t}\n}\n\nexport default AlertContainer;\n\n","import { initial_state, stateReducer } from './Components/State';\nimport CarouselContainer from './Components/Carousel';\nimport SideBarContainer from './Components/SideBar';\nimport NavBarContainer from './Components/NavBar';\nimport GraphContainer from './Components/Graph';\nimport AlertContainer from './Components/Alert';\nimport React from 'react';\nimport './App.css';\n\nfunction App() {\n\t\t/* define dispatcher for the Internal data */\n\t\tconst [state, dispatchState] = React.useReducer( stateReducer, initial_state );\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<NavBarContainer \n\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\tdispatchState={dispatchState} />\n\t\t\t\t\t\t<AlertContainer\n\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\tdispatchState={dispatchState} />\n\t\t\t\t\t\t{ state.isEmpty? \n\t\t\t\t\t\t\t\t<CarouselContainer/>\n\t\t\t\t\t\t\t\t: <div style={{display: 'inline',}}>\n\t\t\t\t\t\t\t\t\t\t<SideBarContainer \n\t\t\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t\t\t\tdispatchState={dispatchState} />\n\t\t\t\t\t\t\t\t\t\t<GraphContainer \n\t\t\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t\t\t\tdispatchState={dispatchState} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}