{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT } from \"../../myConfig\"; //import { queryNewWord, queryPath } from '../node_functions';\n//import { colors }  from \"../myConfig\";\n//import { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n//import { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\n//import { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nimport Autosuggest from 'react-autosuggest';\nconst languages = [{\n  name: 'C',\n  year: 1972\n}, {\n  name: 'Elm',\n  year: 2012\n}];\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n};\n\nconst getSuggestionValue = suggestion => suggestion; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 3\n  }\n}, suggestion);\n\nclass Example extends React.Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      console.log(newValue);\n      fetch(API_ENDPOINT + query_search + newValue).then(result => result.json()) //unpack suggestions\n      .then(suggestions => this.setState({\n        suggestions: suggestions,\n        value: newValue\n      })).catch(err => console.log(err));\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Type a programming language',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nlet query_search = 'querysearch/';\n\nfunction SuggestionsContainer(props) {\n  let state = props.state;\n  let dispatchState = props.dispatchState;\n  /* tahek a child fro a input an add suggestions to it */\n  // handle the change by seting the state variable to \n\n  const [suggestions, setSuggestions] = useState([]);\n  useEffect(() => {\n    /* query server for search suggestionsa\n     * and sets the  */\n    console.log(\"I ran\");\n    fetch(API_ENDPOINT + query_search + state.searchTerm).then(result => result.json()) //unpack suggestions\n    .then(suggestions => setSuggestions(suggestions)).catch(() => dispatchState({\n      type: 'SET_ERROR'\n    }));\n  }, [state.searchTerm, dispatchState]);\n\n  const SuggestionList = () => /*#__PURE__*/React.createElement(\"ul\", {\n    class: \"suggestions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, suggestions.map((suggestion, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 32\n    }\n  }, suggestion)));\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Example, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }), props.children, state.searchTerm.length > 2 ? /*#__PURE__*/React.createElement(SuggestionList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 35\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n}\n\nexport default SuggestionsContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js"],"names":["React","useState","useEffect","API_ENDPOINT","Autosuggest","languages","name","year","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","Example","Component","constructor","onChange","event","newValue","console","log","fetch","query_search","then","result","json","suggestions","setState","catch","err","onSuggestionsFetchRequested","onSuggestionsClearRequested","state","render","inputProps","placeholder","SuggestionsContainer","props","dispatchState","setSuggestions","searchTerm","type","SuggestionList","map","index","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT }  from \"../../myConfig\";\n//import { queryNewWord, queryPath } from '../node_functions';\n//import { colors }  from \"../myConfig\";\n//import { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n//import { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\n//import { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nimport Autosuggest from 'react-autosuggest';\n\nconst languages = [\n\t\t{\n\t\t\t\t    name: 'C',\n\t\t\t\t    year: 1972\n\t\t\t\t  \n\t\t},\n\t\t{\n\t\t\t\t    name: 'Elm',\n\t\t\t\t    year: 2012\n\t\t\t\t  \n\t\t},\n];\n\n\nconst getSuggestions = value => {\n\t\t  const inputValue = value.trim().toLowerCase();\n\t\t  const inputLength = inputValue.length;\n\n\t\t  return inputLength === 0 ? [] : languages.filter(lang =>\n\t\t\t    lang.name.toLowerCase().slice(0, inputLength) === inputValue\n\t\t\t  );\n\t\t\n};\n\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n\t\t<div>\n\t\t\t\t{suggestion}\n\t\t</div>\n);\n\nclass Example extends React.Component {\n\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.state = {\n\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\tsuggestions: []\n\t\t\t\t\t\t    \n\t\t\t\t};\n\t\t\t\t  }\n\n\n\t\tonChange = (event, { newValue  }) => {\n\t\t\t\tconsole.log(newValue)\n\t\t\t\tfetch(API_ENDPOINT + query_search + newValue)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => this.setState({\n\t\t\t\t\t\t\t\tsuggestions: suggestions,\n\t\t\t\t\t\t\t\tvalue: newValue })\n\t\t\t\t\t\t).catch((err) => console.log(err));\n\t\t};\n\t\t\n\t\tonSuggestionsFetchRequested = ({ value  }) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\t      suggestions: getSuggestions(value)\n\t\t\t\t\t\t    \n\t\t\t\t});\n\t\t\t\t  \n\t\t};\n\n\t\tonSuggestionsClearRequested = () => {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\t      suggestions: []\n\t\t\t\t});\n\t\t\t\t  \n\t\t};\n\n\t\trender() {\n\t\t\t\t    const { value, suggestions  } = this.state;\n\n\t\t\t\t// Autosuggest will pass through all these props to the input.\n\t\t\t\tconst inputProps = {\n\t\t\t\t\t\tplaceholder: 'Type a programming language',\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tonChange: this.onChange\n\t\t\t\t};\n\n\t\t\t\t// Finally, render it!\n\t\t\t\treturn (\n\t\t\t\t\t\t<Autosuggest\n\t\t\t\t\t\t\t\tsuggestions={suggestions}\n\t\t\t\t\t\t\t\tonSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n\t\t\t\t\t\t\t\tonSuggestionsClearRequested={this.onSuggestionsClearRequested}\n\t\t\t\t\t\t\t\tgetSuggestionValue={getSuggestionValue}\n\t\t\t\t\t\t\t\trenderSuggestion={renderSuggestion}\n\t\t\t\t\t\t\t\tinputProps={inputProps}\n\t\t\t\t\t\t/>\n\t\t\t\t);\n\t\t}\n}\n\n\n\n\nlet query_search = 'querysearch/'\n\nfunction SuggestionsContainer(props){\n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tconst  [suggestions, setSuggestions] = useState([])\t\n\n\t\t\t\t\n\t\tuseEffect(() => {\n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tconsole.log(\"I ran\");\n\t\t\t\tfetch(API_ENDPOINT + query_search + state.searchTerm)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch(() => dispatchState({type:'SET_ERROR'}));\n\t\t}, [state.searchTerm, dispatchState])\n\n\n\t\tconst SuggestionList = () =>\n\t\t\t\t<ul class=\"suggestions\">\n\t\t\t\t\t\t{suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => <li key={index}>{suggestion}</li> )}\n\t\t\t\t</ul>\n\n\t\treturn <>\n\t\t\t\t<Example/>\n\t\t\t\t{props.children}\n\t\t\t\t{state.searchTerm.length > 2? <SuggestionList/>: <></> }\n\t\t</>\n}\n\nexport default SuggestionsContainer;\n"]},"metadata":{},"sourceType":"module"}