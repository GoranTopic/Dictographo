{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Alert.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Alert, ProgressBar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({\n  state,\n  dispatchState\n}) {\n  /* functions that return an error mesage depending onthe state */\n  // set timer ro dismiss with hook\n  const [percentage, setPercentange] = useState(0); // use effect to set the interval to make a contant preogress\n\n  useEffect(() => {\n    // run queh component mounted\n    let interval = null;\n    console.log(percentage);\n\n    if (percentage < 100) {\n      // while percentage is not complete\n      interval = setInterval(() => setPercentange(percentage => percentage + 1), 100);\n    } else {\n      // if it has reached 100 percent\n      setPercentange(0); // set percentage back to 0\n\n      dispatchState({\n        type: 'DISSMISS_ERROR'\n      }); // unmount itself\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [percentage, dispatchState]);\n  return /*#__PURE__*/React.createElement(Alert, {\n    variant: \"danger\",\n    dismissible: true,\n    onClose: () => dispatchState({\n      type: 'DISSMISS_ERROR'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ProgressBar, {\n    style: {\n      maxHeight: 5,\n      color: 'pink'\n    },\n    variant: \"danger\",\n    now: percentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Alert.Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"Oh Snap!\"), state.isWordNotFound ?\n  /*#__PURE__*/\n  //if the there is not words found\n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Looks like \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, [...state.wordsNotFound].map(word => /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 48\n    }\n  }, word, \", \"))), \"in no our dictionary yet.\") : /*#__PURE__*/React.createElement(React.Fragment, null), state.isPathNotFound ?\n  /*#__PURE__*/\n  //if there is a path not found\n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"looks like there is no path between:\", [...state.pathsNotFound].map(path => /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 22\n    }\n  }, \" \", path.first), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 47\n    }\n  }, path.last, \",\")))) : /*#__PURE__*/React.createElement(React.Fragment, null), state.isFetchFailed ?\n  /*#__PURE__*/\n  //There is a problem with the network\n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"Could not connect to server.\") : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, state.errorMsg));\n}\n\nexport default AlertContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Alert.js"],"names":["React","useState","useEffect","Alert","ProgressBar","AlertContainer","state","dispatchState","percentage","setPercentange","interval","console","log","setInterval","type","clearInterval","maxHeight","color","isWordNotFound","wordsNotFound","map","word","isPathNotFound","pathsNotFound","path","first","last","isFetchFailed","errorMsg"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,WAAhB,QAAmC,iBAAnC;AACA,OAAO,sCAAP;AAEA;;;;;;;AAOA,SAASC,cAAT,CAAwB;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAxB,EAAgD;AAC9C;AACA;AACA,QAAM,CAAEC,UAAF,EAAcC,cAAd,IAAiCR,QAAQ,CAAC,CAAD,CAA/C,CAH8C,CAI9C;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAAE;AAChB,QAAIQ,QAAQ,GAAG,IAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;;AACA,QAAIA,UAAU,GAAG,GAAjB,EAAsB;AAAE;AACtBE,MAAAA,QAAQ,GAAGG,WAAW,CAAC,MACrBJ,cAAc,CAACD,UAAU,IAAIA,UAAU,GAAG,CAA5B,CADM,EAC0B,GAD1B,CAAtB;AAED,KAHD,MAGM;AAAE;AACNC,MAAAA,cAAc,CAAC,CAAD,CAAd,CADI,CACe;;AACnBF,MAAAA,aAAa,CAAC;AAACO,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAb,CAFI,CAEsC;AAC3C;;AACD,WAAO,MAAM;AACXC,MAAAA,aAAa,CAACL,QAAD,CAAb;AACD,KAFD;AAGD,GAbQ,EAaN,CAAEF,UAAF,EAAcD,aAAd,CAbM,CAAT;AAeA,sBACE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,QAAf;AAAwB,IAAA,WAAW,MAAnC;AACE,IAAA,OAAO,EAAE,MAAMA,aAAa,CAAC;AAACO,MAAAA,IAAI,EAAE;AAAP,KAAD,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,WAAD;AACE,IAAA,KAAK,EAAE;AAACE,MAAAA,SAAS,EAAE,CAAZ;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KADT;AAEE,IAAA,OAAO,EAAC,QAFV;AAGE,IAAA,GAAG,EAAET,UAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAOE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,EAQGF,KAAK,CAACY,cAAN;AAAA;AAAsB;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACV,CAAC,GAAGZ,KAAK,CAACa,aAAV,EAAyBC,GAAzB,CAA6BC,IAAI,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,IAAJ,OAArC,CADU,CAAd,8BADC,gBAGmC,yCAXtC,EAYGf,KAAK,CAACgB,cAAN;AAAA;AAAsB;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACG,CAAC,GAAGhB,KAAK,CAACiB,aAAV,EAAyBH,GAAzB,CACCI,IAAI,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAKA,IAAI,CAACC,KAAV,CAAH,wBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,IAAI,CAACE,IAAT,MAA5B,CADT,CADH,CADC,gBAIM,yCAhBT,EAiBGpB,KAAK,CAACqB,aAAN;AAAA;AAAqB;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADC,gBACqC,yCAlBxC,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIrB,KAAK,CAACsB,QAAV,CAnBF,CADF;AAsBD;;AAED,eAAevB,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Alert, ProgressBar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({state, dispatchState}) {\n\t\t/* functions that return an error mesage depending onthe state */\n\t\t// set timer ro dismiss with hook\n\t\tconst [ percentage, setPercentange ] = useState(0)\n\t\t// use effect to set the interval to make a contant preogress\n\t\t\n\t\tuseEffect(() => { // run queh component mounted\n\t\t\t\tlet interval = null; \n\t\t\t\tconsole.log(percentage);\n\t\t\t\tif (percentage < 100) { // while percentage is not complete\n\t\t\t\t\t\tinterval = setInterval(() => \n\t\t\t\t\t\t\t\tsetPercentange(percentage => percentage + 1), 100);\n\t\t\t\t} else{ // if it has reached 100 percent\n\t\t\t\t\t\tsetPercentange(0); // set percentage back to 0\n\t\t\t\t\t\tdispatchState({type: 'DISSMISS_ERROR' }); // unmount itself\n\t\t\t\t}\n\t\t\t\treturn () => {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t}\n\t\t}, [ percentage, dispatchState]);\n\n\t\treturn(\n\t\t\t\t<Alert variant=\"danger\" dismissible \n\t\t\t\t\t\tonClose={() => dispatchState({type: 'DISSMISS_ERROR'})} >\n\t\t\t\t\t\t<ProgressBar \n\t\t\t\t\t\t\t\tstyle={{maxHeight: 5, color: 'pink'}}\n\t\t\t\t\t\t\t\tvariant=\"danger\" \n\t\t\t\t\t\t\t\tnow={percentage} \n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Alert.Heading>Oh Snap!</Alert.Heading>\n\t\t\t\t\t\t{state.isWordNotFound? //if the there is not words found\n\t\t\t\t\t\t<p>Looks like <b>\n\t\t\t\t\t\t\t\t{ [...state.wordsNotFound].map(word => <i>{word}, </i> ) }\n\t\t\t\t\t\t</b>in no our dictionary yet.</p> : <></>}\n\t\t\t\t\t\t{state.isPathNotFound? //if there is a path not found\n\t\t\t\t\t\t<p>looks like there is no path between: \n\t\t\t\t\t\t\t\t{[...state.pathsNotFound].map(\n\t\t\t\t\t\t\t\t\t\tpath => <i><b> {path.first}</b> and <b>{path.last},</b></i> )}\n\t\t\t\t\t\t</p> : <></> }\n\t\t\t\t\t\t{state.isFetchFailed? //There is a problem with the network\n\t\t\t\t\t\t<p>Could not connect to server.</p> : <></> }\n\t\t\t\t\t\t<p>{state.errorMsg}</p>\n\t\t\t\t</Alert>)\n}\n\nexport default AlertContainer;\n\n"]},"metadata":{},"sourceType":"module"}