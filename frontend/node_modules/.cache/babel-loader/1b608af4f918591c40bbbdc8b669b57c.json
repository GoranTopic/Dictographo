{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Alert.js\";\nimport React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({\n  state,\n  dispatchState\n}) {\n  /* functions that return an error mesage depending onthe state */\n  const errorMsg = () => /*#__PURE__*/React.createElement(Alert, {\n    variant: \"danger\",\n    dismissible: true,\n    onClose: () => dispatchState({\n      type: 'DISSMISS_NOT_ERROR'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Alert.Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, \"Oh Snap!\"), state.isWordNotFound ?\n  /*#__PURE__*/\n  //if the there is not words found\n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, \"Looks like \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  }, state.wordsNotFound.map(word => /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 43\n    }\n  }, \"\\\"\", word, \",\\\"\"))), \"in our dictionary yet.\") : /*#__PURE__*/React.createElement(React.Fragment, null), state.isPathNotFound ?\n  /*#__PURE__*/\n  //if there is a path not found\n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, \"Looks like \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, state.wordsNotFound.map(word => /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 43\n    }\n  }, \"\\\"\", word, \",\\\"\"))), \"in our dictionary yet.\") : /*#__PURE__*/React.createElement(React.Fragment, null), \"}\");\n\n  if (state.isError) {\n    return errorMsg();\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n}\n\nexport default AlertContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Alert.js"],"names":["React","Alert","AlertContainer","state","dispatchState","errorMsg","type","isWordNotFound","wordsNotFound","map","word","isPathNotFound","isError"],"mappings":";AAAA,OAAOA,KAAP,MAAmB,OAAnB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,OAAO,sCAAP;AAEA;;;;;;;AAOA,SAASC,cAAT,CAAwB;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAxB,EAAgD;AAE9C;AACA,QAAMC,QAAQ,GAAG,mBACf,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,QAAf;AAAwB,IAAA,WAAW,MAAnC;AACE,IAAA,OAAO,EAAE,MAAMD,aAAa,CAAC;AAACE,MAAAA,IAAI,EAAE;AAAP,KAAD,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGGH,KAAK,CAACI,cAAN;AAAA;AAAsB;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACVJ,KAAK,CAACK,aAAN,CAAoBC,GAApB,CAAwBC,IAAI,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,IAAL,QAAhC,CADU,CAAd,2BADC,gBAGgC,yCANnC,EAOGP,KAAK,CAACQ,cAAN;AAAA;AAAsB;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACVR,KAAK,CAACK,aAAN,CAAoBC,GAApB,CAAwBC,IAAI,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,IAAL,QAAhC,CADU,CAAd,2BADC,gBAGgC,yCAVnC,MADF;;AAgBA,MAAIP,KAAK,CAACS,OAAV,EAAmB;AACjB,WAAOP,QAAQ,EAAf;AACD,GAFD,MAEK;AACH,wBAAO,yCAAP;AACD;AACF;;AAED,eAAeH,cAAf","sourcesContent":["import React  from 'react';\nimport { Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({state, dispatchState}) {\n\n\t\t/* functions that return an error mesage depending onthe state */\n\t\tconst errorMsg = () =>  \n\t\t\t\t<Alert variant=\"danger\" dismissible \n\t\t\t\t\t\tonClose={() => dispatchState({type: 'DISSMISS_NOT_ERROR'})} >\n\t\t\t\t\t\t<Alert.Heading>Oh Snap!</Alert.Heading>\n\t\t\t\t\t\t{state.isWordNotFound? //if the there is not words found\n\t\t\t\t\t\t<p>Looks like <b>\n\t\t\t\t\t\t\t\t{ state.wordsNotFound.map(word => <i>\"{word},\"</i> ) }\n\t\t\t\t\t\t</b>in our dictionary yet.</p> : <></>}\n\t\t\t\t\t\t{state.isPathNotFound? //if there is a path not found\n\t\t\t\t\t\t<p>Looks like <b> \n\t\t\t\t\t\t\t\t{ state.wordsNotFound.map(word => <i>\"{word},\"</i> ) }\n\t\t\t\t\t\t</b>in our dictionary yet.</p> : <></> }\n\t\t\t\t\t\t}\n\t\t\t\t</Alert>\n\n\n\t\tif (state.isError) {\n\t\t\t\treturn errorMsg();\n\t\t}else{\n\t\t\t\treturn <></>\n\t\t}\n}\n\nexport default AlertContainer;\n\n"]},"metadata":{},"sourceType":"module"}