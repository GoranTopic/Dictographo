{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Graph/Graph.js\";\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { graphConfig } from \"../../myConfig\"; //import d3Switcher from \"./d3Switcher\";\n\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport _ from \"lodash\"; //import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({\n  state,\n  dispatchState\n}) {\n  const {\n    //useState,\n    //useEffect, \n    useCallback\n  } = React; // if graph is d3 and previous graph is not d3, the it is switching to d3\n\n  const isSwitchingTo3d = state.graphType === 'd3' && state.prevGraphType !== 'd3';\n  const changeState = useCallback(() => dispatchState({\n    type: 'CHANGE_D3_STATE'\n  }), [dispatchState]);\n  /*\n  \t\tuseLayoutEffect(() => {\n  \t\t\t\tconsole.log(\"use layout effect\")\n  \t\t\t\t//isSwitchingTo3d && setD3State({...state, links:[] })\n  \t\t\t\tisSwitchingTo3d && changeState()\n  \t\t}, [isSwitchingTo3d, changeState])\n  \t\t*/\n\n  const stateCopy = state => {\n    let d3State = _.cloneDeep(state);\n\n    console.log(d3State);\n    return d3State;\n\n    for (let i = 0; i < state.links.length; i++) {\n      console.log(state.links);\n\n      if (!d3State.links[i].source instanceof String) {\n        d3State.links[i].source = state.links[i].source.id;\n        d3State.links[i].target = state.links[i].target.id;\n      }\n    }\n\n    console.log(d3State);\n    console.log(\"changed the state\");\n    return d3State;\n  };\n  /*\n  \t\tuseEffect(() => {  \n  \t\t\t\tconsole.log('isSwitching: ' + isSwitchingTo3d);\n  \t\t\t\t//isSwitchingTo3d && setD3State(state)\n  \t\t\t\tif(isSwitchingTo3d){\n  \t\t\t\t\t\tstate.links.forEach((link) => { \n  \t\t\t\t\t\t\t\t//setD3State({...state, links: [ ...state.links, {source: link.source.id, target: link.target.id} ]})\n  \t\t\t\t\t\t\t\tconsole.log(\"settin link:\")\n  \t\t\t\t\t\t\t\tconsole.log(link)\n  \n  \t\t\t\t\t\t})\n  \t\t\t\t\t\tconsole.log(\"set state\")\n  \t\t\t\t}\n  \n  \t\t\t\treturn () => {\n  \t\t\t\t\t\tconsole.log(\"clean up ran\")\n  \t\t\t\t\t\t\t \n  \t\t\t\t}\n  \t\t\t}, [isSwitchingTo3d, state])\n  */\n\n\n  const handleClick = useCallback( // handle click of node\n  nodeId => {\n    console.log(nodeId);\n    onClickNode(nodeId, state, dispatchState);\n  }, [state, dispatchState]);\n\n  const chosenGraph = type => {\n    switch (type) {\n      case 'd3':\n        //console.log(state)\n        if (isSwitchingTo3d) {\n          //console.log(\"checking the state\")\n          //console.log(state)\n          //console.log({...state, links:[]})\n          return /*#__PURE__*/React.createElement(Graph, {\n            id: \"graph-id\" // id is mandatory, \n            // if no id is defined rd3g will throw an error\n            ,\n            data: state,\n            config: graphConfig,\n            onClickNode: handleClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 18\n            }\n          });\n        } else {\n          //console.log(\"checking the state\")\n          console.log(state); //console.log({...state, links:[]})\n\n          return /*#__PURE__*/React.createElement(Graph, {\n            id: \"graph-id\" // id is mandatory, \n            // if no id is defined rd3g will throw an error\n            ,\n            data: state,\n            config: graphConfig,\n            onClickNode: handleClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 18\n            }\n          });\n        }\n\n      case '2D':\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(ForceGraph2D, {\n          enableNodeDrag: true,\n          onNodeClick: handleClick,\n          graphData: stateCopy(state),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 16\n          }\n        });\n\n      case '3D':\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(ForceGraph3D, {\n          enableNodeDrag: true,\n          onNodeClick: handleClick,\n          graphData: { ...state\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(Graph, {\n          id: \"graph-id\" // id is mandatory, \n          // if no id is defined rd3g will throw an error\n          ,\n          data: state,\n          config: graphConfig,\n          onClickNode: handleClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 16\n          }\n        });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundImage: 'url(./grid.png)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 10\n    }\n  }, chosenGraph(state.graphType));\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Graph/Graph.js"],"names":["React","useState","useEffect","useLayoutEffect","Graph","onClickNode","graphConfig","ForceGraph2D","ForceGraph3D","_","GraphContainer","state","dispatchState","useCallback","isSwitchingTo3d","graphType","prevGraphType","changeState","type","stateCopy","d3State","cloneDeep","console","log","i","links","length","source","String","id","target","handleClick","nodeId","chosenGraph","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useState,  useEffect, useLayoutEffect }  from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { graphConfig }  from \"../../myConfig\";\n//import d3Switcher from \"./d3Switcher\";\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport _ from \"lodash\";\n//import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({state, dispatchState}){\n\n\t\tconst { \n\t\t\t\t//useState,\n\t\t\t\t//useEffect, \n\t\t\t\tuseCallback\n\t\t} = React;\n\n\t\t// if graph is d3 and previous graph is not d3, the it is switching to d3\n\t\tconst isSwitchingTo3d = (state.graphType === 'd3' && state.prevGraphType !== 'd3')\n\t\tconst changeState = useCallback(() => dispatchState({type:'CHANGE_D3_STATE'}), [dispatchState])\n/*\n\t\tuseLayoutEffect(() => {\n\t\t\t\tconsole.log(\"use layout effect\")\n\t\t\t\t//isSwitchingTo3d && setD3State({...state, links:[] })\n\t\t\t\tisSwitchingTo3d && changeState()\n\t\t}, [isSwitchingTo3d, changeState])\n\t\t*/\n\t\t\n\t\tconst stateCopy = (state) => {\n\t\t\t\tlet d3State = _.cloneDeep(state);\n\t\t\t\tconsole.log(d3State)\n\t\t\t\treturn d3State;\n\t\t\t\tfor(let i = 0; i < state.links.length; i++ ){\n\t\t\t\t\t\tconsole.log(state.links)\n\t\t\t\t\t\tif(!d3State.links[i].source instanceof String){\n\t\t\t\t\t\t\td3State.links[i].source = state.links[i].source.id\n\t\t\t\t\t\t\td3State.links[i].target = state.links[i].target.id\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconsole.log(d3State)\n\t\t\t\tconsole.log(\"changed the state\")\n\t\t\t\treturn d3State;\n\t\t}\n\n/*\n\t\tuseEffect(() => {  \n\t\t\t\tconsole.log('isSwitching: ' + isSwitchingTo3d);\n\t\t\t\t//isSwitchingTo3d && setD3State(state)\n\t\t\t\tif(isSwitchingTo3d){\n\t\t\t\t\t\tstate.links.forEach((link) => { \n\t\t\t\t\t\t\t\t//setD3State({...state, links: [ ...state.links, {source: link.source.id, target: link.target.id} ]})\n\t\t\t\t\t\t\t\tconsole.log(\"settin link:\")\n\t\t\t\t\t\t\t\tconsole.log(link)\n\n\t\t\t\t\t\t})\n\t\t\t\t\t\tconsole.log(\"set state\")\n\t\t\t\t}\n\n\t\t\t\treturn () => {\n\t\t\t\t\t\tconsole.log(\"clean up ran\")\n\t\t\t\t\t\t\t \n\t\t\t\t}\n\t\t\t}, [isSwitchingTo3d, state])\n*/\n\n\t\tconst handleClick = useCallback( // handle click of node\n\t\t\t\t(nodeId) => { console.log(nodeId); onClickNode(nodeId, state, dispatchState)}, \n\t\t\t\t[state, dispatchState]);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\n\t\tconst chosenGraph = (type) =>{ \n\t\t\t\tswitch(type) {\n\t\t\t\t\t\tcase 'd3':\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\tif(isSwitchingTo3d){\n\t\t\t\t\t\t\t\t\t\t//console.log(\"checking the state\")\n\t\t\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\t\t\t//console.log({...state, links:[]})\n\t\t\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t//console.log(\"checking the state\")\n\t\t\t\t\t\t\t\t\t\tconsole.log(state)\n\t\t\t\t\t\t\t\t\t\t//console.log({...state, links:[]})\n\t\t\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcase '2D':\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <ForceGraph2D\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tgraphData={stateCopy(state)}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tcase '3D':\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <ForceGraph3D\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tgraphData={{...state}}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t} \n\t\t}\n\n\n\t\treturn <div style={{backgroundImage: 'url(./grid.png)'}} >\n\t\t\t\t{chosenGraph(state.graphType)}\n\t\t</div>\n\t\t\n}\n\nexport default GraphContainer;\n"]},"metadata":{},"sourceType":"module"}