{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Graph/Graph.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { colors, graphConfig } from \"../../myConfig\"; //import d3Switcher from \"./d3Switcher\";\n\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport SpriteText from 'three-spritetext'; //import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({\n  state,\n  dispatchState\n}) {\n  const handleClick = useCallback(nodeId => {\n    //  handle click of node\n    onClickNode(nodeId, state, dispatchState);\n  }, [state, dispatchState]);\n  const [dimensions, setDimensions] = useState({\n    height: window.innerHeight - 87,\n    width: window.innerWidth - 15\n  });\n  useEffect(() => {\n    function handleResize() {\n      setDimensions({\n        height: window.innerHeight - 87,\n        width: window.innerWidth - 15\n      });\n    }\n\n    window.addEventListener('resize', handleResize);\n    return _ => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  const chosenGraph = type => {\n    switch (type) {\n      case 'd3':\n        return /*#__PURE__*/React.createElement(Graph, {\n          id: \"graph-id\" // id is mandatory, \n          // if no id is defined rd3g will throw an error\n          ,\n          data: state.d3Data,\n          onClickNode: handleClick,\n          config: { ...graphConfig,\n            height: dimensions.height,\n            width: dimensions.width\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 16\n          }\n        });\n\n      case '2D':\n        return /*#__PURE__*/React.createElement(ForceGraph2D, {\n          graphData: state.forceData,\n          onNodeClick: handleClick,\n          nodeLabel: \"id\",\n          height: dimensions.height - 20,\n          width: dimensions.width + 1,\n          nodeRelSize: 5,\n          enableNodeDrag: true,\n          linkDirectionalArrowLength: 1,\n          linkDirectionalArrowRelPos: 1,\n          linkDirectionalParticles: 0.5,\n          linkDirectionalParticleSpeed: 0.003,\n          linkDirectionalParticleWidth: 3,\n          linkWidth: 1.8,\n          onNodeDragEnd: node => {\n            node.fx = node.x;\n            node.fy = node.y;\n            node.fz = node.z;\n          },\n          nodeCanvasObject: (node, ctx, globalScale) => {\n            const label = node.id;\n            const fontSize = 15 / globalScale;\n            ctx.font = `${fontSize}px Sans-Serif`;\n            const textWidth = ctx.measureText(label).width;\n            const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.3); // some padding\n\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n            ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            ctx.fillStyle = node.color;\n            ctx.fillText(label, node.x, node.y);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 16\n          }\n        });\n\n      case '3D':\n        return /*#__PURE__*/React.createElement(ForceGraph3D, {\n          graphData: state.forceData,\n          onNodeClick: handleClick,\n          nodeLabel: \"id\",\n          height: dimensions.height,\n          width: dimensions.width,\n          enableNodeDrag: true,\n          linkDirectionalArrowRelPos: 1,\n          linkDirectionalArrowLength: 1,\n          backgroundColor: 'black',\n          linkDirectionalParticles: 1.5,\n          linkDirectionalParticleSpeed: 0.005,\n          linkDirectionalParticleWidth: 1,\n          linkWidth: 0.5,\n          onNodeDragEnd: node => {\n            node.fx = node.x;\n            node.fy = node.y;\n            node.fz = node.z;\n          },\n          nodeThreeObject: node => {\n            const sprite = new SpriteText(node.id);\n            sprite.color = node.color === colors.node.selected ? node.color : node.color === colors.node.done ? colors.node.default : colors.node.done;\n            sprite.textHeight = 8;\n            return sprite;\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(Graph, {\n          id: \"graph-id\" // id is mandatory, \n          // if no id is defined rd3g will throw an error\n          ,\n          data: state,\n          onClickNode: handleClick,\n          config: { ...graphConfig,\n            height: dimensions.height,\n            width: dimensions.width\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 16\n          }\n        });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundImage: 'url(./grid.png)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 10\n    }\n  }, chosenGraph(state.graphType));\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Graph/Graph.js"],"names":["React","useCallback","useEffect","useState","Graph","onClickNode","colors","graphConfig","ForceGraph2D","ForceGraph3D","SpriteText","GraphContainer","state","dispatchState","handleClick","nodeId","dimensions","setDimensions","height","window","innerHeight","width","innerWidth","handleResize","addEventListener","_","removeEventListener","chosenGraph","type","d3Data","forceData","node","fx","x","fy","y","fz","z","ctx","globalScale","label","id","fontSize","font","textWidth","measureText","bckgDimensions","map","n","fillStyle","fillRect","textAlign","textBaseline","color","fillText","sprite","selected","done","default","textHeight","backgroundImage","graphType"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState }  from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { colors, graphConfig }  from \"../../myConfig\";\n//import d3Switcher from \"./d3Switcher\";\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport SpriteText from 'three-spritetext';\n//import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({state, dispatchState}){\n\n\t\tconst handleClick = useCallback((nodeId) => {  //  handle click of node\n\t\t\t\tonClickNode(nodeId, state, dispatchState)\n\t\t}, [state, dispatchState]);\n\n\t\tconst [dimensions, setDimensions] = useState({ \n\t\t\t\theight: window.innerHeight - 87,\n\t\t\t\twidth: window.innerWidth - 15,\n\t\t})\n\n\t\tuseEffect(() => {\n\t\t\t\tfunction handleResize(){\n\t\t\t\t\t\tsetDimensions({\n\t\t\t\t\t\t\t\theight: window.innerHeight - 87,\n\t\t\t\t\t\t\t\twidth: window.innerWidth - 15,\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\twindow.addEventListener('resize', handleResize)\n\t\t\t\treturn _ => {\n\t\t\t\t\t\twindow.removeEventListener('resize', handleResize)\n\t\t\t\t}\n\t\t});\n\n\t\tconst chosenGraph = (type) =>{ \n\t\t\t\tswitch(type) {\n\t\t\t\t\t\tcase 'd3':\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state.d3Data}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\tconfig={ {...graphConfig, height: dimensions.height, width: dimensions.width}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tcase '2D':\n\t\t\t\t\t\t\t\treturn <ForceGraph2D\n\t\t\t\t\t\t\t\t\t\tgraphData={state.forceData}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tnodeLabel=\"id\"\n\t\t\t\t\t\t\t\t\t\theight={dimensions.height - 20}\n\t\t\t\t\t\t\t\t\t\twidth={dimensions.width + 1}\n\t\t\t\t\t\t\t\t\t\tnodeRelSize={5}\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowLength={1}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowRelPos={1}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticles={0.5}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticleSpeed={0.003}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticleWidth={3}\n\t\t\t\t\t\t\t\t\t\tlinkWidth={1.8}\n\t\t\t\t\t\t\t\t\t\tonNodeDragEnd={node => {\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fx = node.x;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fy = node.y;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fz = node.z;\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tnodeCanvasObject={(node, ctx, globalScale) => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst label = node.id;\n\t\t\t\t\t\t\t\t\t\t\t\tconst fontSize = 15/(globalScale);\n\t\t\t\t\t\t\t\t\t\t\t\tctx.font = `${fontSize}px Sans-Serif`;\n\t\t\t\t\t\t\t\t\t\t\t\tconst textWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\t\t\t\t\t\tconst bckgDimensions = [textWidth, fontSize].map(n => \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tn + fontSize * 0.3); // some padding\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillRect(node.x - bckgDimensions[0]/2, node.y - bckgDimensions[1]/2, ...bckgDimensions);\n\t\t\t\t\t\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillStyle = node.color;\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillText(label, node.x, node.y);\n\t\t\t\t\t\t\t\t\t\t\t\t          \n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tcase '3D':\n\t\t\t\t\t\t\t\treturn <ForceGraph3D\n\t\t\t\t\t\t\t\t\t\tgraphData={state.forceData}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tnodeLabel=\"id\"\n\t\t\t\t\t\t\t\t\t\theight={dimensions.height}\n\t\t\t\t\t\t\t\t\t\twidth={dimensions.width}\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowRelPos={1}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowLength={1}\n\t\t\t\t\t\t\t\t\t\tbackgroundColor={'black'}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticles={1.5}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticleSpeed={0.005}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalParticleWidth={1}\n\t\t\t\t\t\t\t\t\t\tlinkWidth={0.5}\n\t\t\t\t\t\t\t\t\t\tonNodeDragEnd={node => {\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fx = node.x;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fy = node.y;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fz = node.z;\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tnodeThreeObject={node => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst sprite = new SpriteText(node.id);\n\t\t\t\t\t\t\t\t\t\t\t\tsprite.color = (node.color === colors.node.selected)? node.color : (node.color === colors.node.done)? colors.node.default : colors.node.done;\n\t\t\t\t\t\t\t\t\t\t\t\tsprite.textHeight = 8;\n\t\t\t\t\t\t\t\t\t\t\t\treturn sprite;\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\tconfig={ {...graphConfig, height: dimensions.height, width: dimensions.width}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t} \n\t\t}\n\n\n\t\treturn <div style={{backgroundImage: 'url(./grid.png)'}} >\n\t\t\t\t{chosenGraph(state.graphType)}\n\t\t</div>\n\t\t\n}\n\nexport default GraphContainer;\n"]},"metadata":{},"sourceType":"module"}