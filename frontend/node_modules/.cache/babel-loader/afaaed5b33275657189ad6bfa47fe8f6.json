{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictio-grapho/frontend/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport myConfig from \"./myConfig\";\nconst API_ENDPOINT = 'http://127.0.0.1:8000/api/v1/'; // graph payload (with minimalist structure)\n\nconst initial_state = {\n  nodes: [],\n  links: [],\n  isError: false,\n  isEmpty: true,\n  isLoading: true,\n  searchTerm: '',\n  DestinationTerm: ''\n};\n\nfunction App() {\n  // make reducer for the words data and internal state \n  const stateReducer = (state, action) => {\n    switch (action.type) {\n      case 'SET_NEW_NODES':\n        return { ...state,\n          nodes: [...state.nodes, ...action.payload]\n        };\n\n      case 'SET_NEW_LINKS':\n        return { ...state,\n          links: [...state.links, ...action.payload]\n        };\n\n      case 'SET_NODE_LINK':\n        return { ...state,\n          nodes: [...state.nodes, action.payload.node],\n          links: [...state.links, action.payload.link]\n        };\n\n      case 'SET_STATE':\n        return { ...state,\n          nodes: [...state.nodes, ...action.payload.nodes],\n          links: [...state.links, ...action.payload.links]\n        };\n\n      case 'SET_SEARCH_NODE':\n        return { ...state,\n          nodes: [action.payload],\n          links: [],\n          isEmpty: false\n        };\n\n      case 'SET_NODE_DONE':\n        let node = state.nodes.filter(node => node.id === action.payload)[0];\n        return { ...state,\n          nodes: [...state.nodes, { ...node,\n            color: 'blue'\n          }],\n          isEmpty: false\n        };\n\n      case 'ERASE_NODES':\n        return { ...state,\n          nodes: [],\n          links: []\n        };\n\n      case 'SET_SEARCH_TERM':\n        return { ...state,\n          searchTerm: action.payload\n        };\n\n      case 'SET_DEST_TERM':\n        return { ...state,\n          destinationTerm: action.payload\n        };\n\n      case 'SET_FETCH_FAILED':\n        return { ...state,\n          isError: true\n        };\n\n      default:\n        throw new Error();\n    }\n  };\n  /* define dispatcher for the Internal data */\n\n\n  const [state, dispatchState] = React.useReducer(stateReducer, initial_state);\n\n  const processNode = node => {\n    /* process a node from the api into one for the dispatcher\n     * it changes title for id, for instance */\n    node['id'] = node.title;\n    return node;\n  }; // handle the change by seting the state variable to \n\n\n  const handleSearchChange = change => dispatchState({\n    type: 'SET_SEARCH_TERM',\n    payload: change.target.value\n  }); // handle the change by seting the state variable to \n\n\n  const handleDestinationChange = change => dispatchState({\n    type: 'SET_DEST_TERM',\n    payload: change.target.value\n  }); // get node with given node id from state \n\n\n  const getNode = nodeId => state.nodes.filter(node => node.id === nodeId)[0];\n\n  const isNodeState = nodeId => state.nodes.every(node => node.id === nodeId);\n\n  const requestSynonymNodes = node => {\n    /* for every node request the adjecent node to it */\n    node.synonyms.forEach(synonym => {\n      if (!isNodeState(synonym['synonym'])) {\n        fetch(API_ENDPOINT + synonym[\"synonym\"]).then(result => result.json()).then(result => processNode(result)).then(adjNode => {\n          dispatchState({\n            type: 'SET_NODE_LINK',\n            payload: {\n              node: adjNode,\n              link: {\n                source: node.id,\n                target: adjNode.id\n              }\n            }\n          });\n        }).catch(() => dispatchState({\n          type: 'SET_FETCH_FAILED'\n        }));\n      }\n    });\n  }; // handle submit search button\n\n\n  const handleSearchSubmit = () => {\n    fetch(API_ENDPOINT + state.searchTerm).then(result => result.json()).then(result => processNode(result)).then(node => {\n      dispatchState({\n        type: 'SET_SEARCH_NODE',\n        payload: node\n      });\n      return node;\n    }).then(node => requestSynonymNodes(node)).catch(() => dispatchState({\n      type: 'SET_FETCH_FAILED'\n    }));\n  }; // handle path button\n\n\n  const handlePathSubmit = () => dispatchState({\n    type: 'RESET_NODE'\n  });\n\n  const onClickNode = function (nodeId) {\n    console.log(`clicked node ${nodeId}`);\n    requestSynonymNodes(getNode(nodeId));\n    dispatchState({\n      type: 'SET_NODE_DONE',\n      payload: nodeId\n    });\n  };\n\n  const onRightClickNode = function (event, nodeId) {\n    window.alert(`Right clicked node ${nodeId}`);\n  };\n\n  const onClickLink = function (source, target) {\n    window.alert(`Clicked link between ${source} and ${target}`);\n  };\n\n  const onRightClickLink = function (event, source, target) {\n    window.alert(`Right clicked link between ${source} and ${target}`);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputWithLabel, {\n    id: \"search\",\n    type: \"text\",\n    isFocuse: true,\n    value: state.searchTerm,\n    onInputChange: handleSearchChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, \"Search:\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disable: !state.searchTerm,\n    onClick: handleSearchSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, \"Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputWithLabel, {\n    id: \"destination\",\n    type: \"text\",\n    value: state.destinationTerm,\n    onInputChange: handleDestinationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, \"Destination:\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disable: !state.destinationTerm,\n    onClick: handlePathSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, \"Get path\")), state.isEmpty ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \"Search a word\") : /*#__PURE__*/React.createElement(Graph, {\n    id: \"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n    ,\n    data: state,\n    config: myConfig,\n    onClickNode: onClickNode,\n    onRightClickNode: onRightClickNode,\n    onClickLink: onClickLink,\n    onRightClickLink: onRightClickLink,\n    backgroundColor: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }));\n}\n\nconst InputWithLabel = ({\n  id,\n  type,\n  value,\n  onInputChange,\n  isFocused,\n  children\n}) => {\n  /* A component with the Input and a Label */\n  // Define an input ref for passing to input component\n  const inputRef = React.useRef(); // set up a side effect it is updates if the focus changes\n\n  React.useEffect(() => {\n    if (isFocused && inputRef.current) inputRef.current.focused();\n  }, [isFocused]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, \" \", children, \" \"), \"\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n    id: id,\n    ref: inputRef,\n    type: type,\n    value: value,\n    onChange: onInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/telix/dictio-grapho/frontend/src/App.js"],"names":["React","Graph","myConfig","API_ENDPOINT","initial_state","nodes","links","isError","isEmpty","isLoading","searchTerm","DestinationTerm","App","stateReducer","state","action","type","payload","node","link","filter","id","color","destinationTerm","Error","dispatchState","useReducer","processNode","title","handleSearchChange","change","target","value","handleDestinationChange","getNode","nodeId","isNodeState","every","requestSynonymNodes","synonyms","forEach","synonym","fetch","then","result","json","adjNode","source","catch","handleSearchSubmit","handlePathSubmit","onClickNode","console","log","onRightClickNode","event","window","alert","onClickLink","onRightClickLink","InputWithLabel","onInputChange","isFocused","children","inputRef","useRef","useEffect","current","focused"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport  myConfig  from \"./myConfig\";\nconst API_ENDPOINT = 'http://127.0.0.1:8000/api/v1/'\n\n// graph payload (with minimalist structure)\nconst initial_state = {\n\t\tnodes: [],\n\t\tlinks: [],\n\t\tisError: false,\n\t\tisEmpty: true,\n\t\tisLoading: true,\n\t\tsearchTerm: '',\n\t\tDestinationTerm: '',\n};\n\nfunction App() {\n\t\t// make reducer for the words data and internal state \n\t\tconst stateReducer = (state, action) =>{\n\t\t\t\tswitch (action.type){\n\t\t\t\t\t\tcase 'SET_NEW_NODES':\n\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload ],\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_NEW_LINKS':\n\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload ]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_NODE_LINK':\n\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, action.payload.node ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, action.payload.link ]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_STATE':\n\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_SEARCH_NODE':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tnodes: [ action.payload ],\n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_NODE_DONE':\n\t\t\t\t\t\t\t\tlet node = state.nodes.filter( node => node.id === action.payload )[0];\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, { ...node, color:'blue'}], \n\t\t\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'ERASE_NODES':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_SEARCH_TERM':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tsearchTerm: action.payload,\t\t\t\t\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_DEST_TERM':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tdestinationTerm: action.payload,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_FETCH_FAILED':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\t\t}\n\n\t\t/* define dispatcher for the Internal data */\n\t\tconst [state, dispatchState] = React.useReducer( stateReducer, initial_state );\n\n\t\tconst processNode = (node) =>{\n\t\t\t\t/* process a node from the api into one for the dispatcher\n\t\t\t\t * it changes title for id, for instance */\n\t\t\t\tnode['id'] = node.title\n\t\t\t\treturn node\n\t\t}\n\t\t\n\n\t\t// handle the change by seting the state variable to \n\t\tconst handleSearchChange = change => dispatchState({ type: 'SET_SEARCH_TERM', payload: change.target.value });\n\t\t// handle the change by seting the state variable to \n\t\tconst handleDestinationChange = change => dispatchState({ type: 'SET_DEST_TERM', payload: change.target.value });\n\n\t\t// get node with given node id from state \n\t\tconst getNode = (nodeId) => state.nodes.filter( node => node.id === nodeId )[0]\n\n\t\tconst isNodeState = (nodeId) => state.nodes.every( node => node.id === nodeId )\n\t\t\n\n\n\t\tconst requestSynonymNodes = (node) => {\n\t\t\t\t/* for every node request the adjecent node to it */\n\t\t\t\tnode.synonyms.forEach(synonym => {\n\t\t\t\t\t\tif(!isNodeState(synonym['synonym'])){\n\t\t\t\t\t\t\t\tfetch(API_ENDPOINT + synonym[\"synonym\"])\n\t\t\t\t\t\t\t\t\t\t.then(result => result.json())\n\t\t\t\t\t\t\t\t\t\t.then(result => processNode(result))\n\t\t\t\t\t\t\t\t\t\t.then(adjNode => {\n\t\t\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NODE_LINK', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode: adjNode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink: { source: node.id , target: adjNode.id }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}))\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t}\n\n\t\t// handle submit search button\n\t\tconst handleSearchSubmit = () =>  {\n\t\t\t\tfetch(API_ENDPOINT + state.searchTerm)\n\t\t\t\t\t\t.then(result => result.json())\n\t\t\t\t\t\t.then(result => processNode(result))\n\t\t\t\t\t\t.then(node => { \n\t\t\t\t\t\t\t\tdispatchState({type: 'SET_SEARCH_NODE', payload: node});\n\t\t\t\t\t\t\t\treturn node;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(node => requestSynonymNodes(node))\n\t\t\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}));\n\t\t}\n\n\t\t// handle path button\n\t\tconst handlePathSubmit = () => dispatchState({ type: 'RESET_NODE' });\n\n\t\tconst onClickNode = function(nodeId) {\n\t\t\t\tconsole.log(`clicked node ${nodeId}`);\n\t\t\t\trequestSynonymNodes(getNode(nodeId))\n\t\t\t\tdispatchState({type:'SET_NODE_DONE', payload: nodeId})  \n\n\n\t\t};\n\n\t\tconst onRightClickNode = function(event, nodeId) {\n\t\t\t\twindow.alert(`Right clicked node ${nodeId}`);\n\t\t};\n\n\t\tconst onClickLink = function(source, target) {\n\t\t\t\twindow.alert(`Clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\tconst onRightClickLink = function(event, source, target) {\n\t\t\t\twindow.alert(`Right clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<InputWithLabel id=\"search\" type=\"text\" isFocuse value={state.searchTerm} onInputChange={handleSearchChange}>\n\t\t\t\t\t\t\t\t\t\t<strong>Search:</strong>\n\t\t\t\t\t\t\t\t</InputWithLabel>\n\t\t\t\t\t\t\t\t<button type=\"button\" disable={!state.searchTerm} onClick={handleSearchSubmit}>\n\t\t\t\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<InputWithLabel id=\"destination\" type=\"text\" value={state.destinationTerm} onInputChange={handleDestinationChange}>\n\t\t\t\t\t\t\t\t\t\t<strong>Destination:</strong>\n\t\t\t\t\t\t\t\t</InputWithLabel>\n\t\t\t\t\t\t\t\t<button type=\"button\" disable={!state.destinationTerm} onClick={handlePathSubmit}>\n\t\t\t\t\t\t\t\t\t\tGet path\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{ state.isEmpty? \n\t\t\t\t\t\t\t\t<p>Search a word</p> \n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<Graph\n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\tconfig={myConfig}\n\t\t\t\t\t\t\t\t\t\tonClickNode={onClickNode}\n\t\t\t\t\t\t\t\t\t\tonRightClickNode={onRightClickNode}\n\t\t\t\t\t\t\t\t\t\tonClickLink={onClickLink}\n\t\t\t\t\t\t\t\t\t\tonRightClickLink={onRightClickLink}\n\t\t\t\t\t\t\t\t\t\tbackgroundColor={\"black\"}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t);\n}\n\nconst InputWithLabel = ({ id, type, value, onInputChange, isFocused, children }) => {\n\t\t/* A component with the Input and a Label */\n\t\t// Define an input ref for passing to input component\n\t\tconst inputRef = React.useRef()\n\t\t// set up a side effect it is updates if the focus changes\n\t\tReact.useEffect(() => { if(isFocused && inputRef.current) inputRef.current.focused(); }, [isFocused])\n\t\treturn <>\n\t\t\t\t<label htmlFor={id}> {children} </label>\n\t\t\t\t&nbsp;\n\t\t\t\t<input id={id} ref={inputRef} type={type} value={value} onChange={onInputChange}/>\n\t\t</>\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}