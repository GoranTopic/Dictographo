{"ast":null,"code":"import tree_add, { addAll as tree_addAll } from \"./add\";\nimport tree_cover from \"./cover\";\nimport tree_data from \"./data\";\nimport tree_extent from \"./extent\";\nimport tree_find from \"./find\";\nimport tree_remove, { removeAll as tree_removeAll } from \"./remove\";\nimport tree_root from \"./root\";\nimport tree_size from \"./size\";\nimport tree_visit from \"./visit\";\nimport tree_visitAfter from \"./visitAfter\";\nimport tree_x, { defaultX } from \"./x\";\nimport tree_y, { defaultY } from \"./y\";\nimport tree_z, { defaultZ } from \"./z\";\nexport default function octree(nodes, x, y, z) {\n  var tree = new Octree(x == null ? defaultX : x, y == null ? defaultY : y, z == null ? defaultZ : z, NaN, NaN, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Octree(x, y, z, x0, y0, z0, x1, y1, z1) {\n  this._x = x;\n  this._y = y;\n  this._z = z;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {\n    data: leaf.data\n  },\n      next = copy;\n\n  while (leaf = leaf.next) next = next.next = {\n    data: leaf.data\n  };\n\n  return copy;\n}\n\nvar treeProto = octree.prototype = Octree.prototype;\n\ntreeProto.copy = function () {\n  var copy = new Octree(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1),\n      node = this._root,\n      nodes,\n      child;\n  if (!node) return copy;\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n  nodes = [{\n    source: node,\n    target: copy._root = new Array(8)\n  }];\n\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 8; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({\n          source: child,\n          target: node.target[i] = new Array(8)\n        });else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\ntreeProto.z = tree_z;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/d3-octree/src/octree.js"],"names":["tree_add","addAll","tree_addAll","tree_cover","tree_data","tree_extent","tree_find","tree_remove","removeAll","tree_removeAll","tree_root","tree_size","tree_visit","tree_visitAfter","tree_x","defaultX","tree_y","defaultY","tree_z","defaultZ","octree","nodes","x","y","z","tree","Octree","NaN","x0","y0","z0","x1","y1","z1","_x","_y","_z","_x0","_y0","_z0","_x1","_y1","_z1","_root","undefined","leaf_copy","leaf","copy","data","next","treeProto","prototype","node","child","length","source","target","Array","pop","i","push","add","cover","extent","find","remove","root","size","visit","visitAfter"],"mappings":"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","sourcesContent":["import tree_add, {addAll as tree_addAll} from \"./add\";\nimport tree_cover from \"./cover\";\nimport tree_data from \"./data\";\nimport tree_extent from \"./extent\";\nimport tree_find from \"./find\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove\";\nimport tree_root from \"./root\";\nimport tree_size from \"./size\";\nimport tree_visit from \"./visit\";\nimport tree_visitAfter from \"./visitAfter\";\nimport tree_x, {defaultX} from \"./x\";\nimport tree_y, {defaultY} from \"./y\";\nimport tree_z, {defaultZ} from \"./z\";\n\nexport default function octree(nodes, x, y, z) {\n  var tree = new Octree(x == null ? defaultX : x, y == null ? defaultY : y, z == null ? defaultZ : z, NaN, NaN, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Octree(x, y, z, x0, y0, z0, x1, y1, z1) {\n  this._x = x;\n  this._y = y;\n  this._z = z;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = octree.prototype = Octree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Octree(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(8)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 8; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(8)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\ntreeProto.z = tree_z;\n"]},"metadata":{},"sourceType":"module"}