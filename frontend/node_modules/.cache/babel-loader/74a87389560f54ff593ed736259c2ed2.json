{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictio-grapho/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport { genGrapDepth } from \"./RandomGenerator\"; // the graph configuration, you only need to pass down properties\n// that you want to override, otherwise default ones will be used\n\nconst myConfig = {\n  \"automaticRearrangeAfterDropNode\": false,\n  \"collapsible\": false,\n  \"directed\": false,\n  \"focusAnimationDuration\": 0.75,\n  \"focusZoom\": 1,\n  \"height\": 800,\n  \"highlightDegree\": 100,\n  \"highlightOpacity\": 0.5,\n  \"linkHighlightBehavior\": true,\n  \"maxZoom\": 10,\n  \"minZoom\": 0.1,\n  \"nodeHighlightBehavior\": true,\n  \"panAndZoom\": false,\n  \"staticGraph\": false,\n  \"staticGraphWithDragAndDrop\": false,\n  \"width\": 2000,\n  \"d3\": {\n    \"alphaTarget\": 0.3,\n    \"gravity\": -150,\n    \"linkLength\": 3,\n    \"linkStrength\": 2,\n    \"disableLinkForce\": false\n  },\n  \"node\": {\n    \"color\": \" #3D3C3A\",\n    \"fontColor\": \"black\",\n    \"fontSize\": 8,\n    \"fontWeight\": \"normal\",\n    \"highlightColor\": \"#E41B17\",\n    \"highlightFontSize\": 8,\n    \"highlightFontWeight\": \"bold\",\n    \"highlightStrokeColor\": \"black\",\n    \"highlightStrokeWidth\": \"#27332F\",\n    \"labelProperty\": \"id\",\n    \"mouseCursor\": \"pointer\",\n    \"opacity\": 1,\n    \"renderLabel\": true,\n    \"size\": 210,\n    \"strokeColor\": \"#C6DEFF\",\n    \"strokeWidth\": 1.6,\n    \"svg\": \"\",\n    \"symbolType\": \"circle\"\n  },\n  \"link\": {\n    \"color\": \"#d3d3d3\",\n    \"fontColor\": \"black\",\n    \"fontSize\": 8,\n    \"fontWeight\": \"normal\",\n    \"highlightColor\": \"#E41B17\",\n    \"highlightFontSize\": 8,\n    \"highlightFontWeight\": \"normal\",\n    \"labelProperty\": \"label\",\n    \"mouseCursor\": \"pointer\",\n    \"opacity\": 0.7,\n    \"renderLabel\": true,\n    \"semanticStrokeWidth\": false,\n    \"strokeWidth\": 1.5,\n    \"markerHeight\": 6,\n    \"markerWidth\": 6\n  }\n};\n\nfunction App() {\n  // graph payload (with minimalist structure)\n  const initial_data = {\n    nodes: [{\n      id: \"Harry\"\n    }, {\n      id: \"Sally\"\n    }, {\n      id: \"Alice\"\n    }],\n    links: [{\n      source: \"Harry\",\n      target: \"Sally\"\n    }, {\n      source: \"Harry\",\n      target: \"Alice\"\n    }]\n  }; // make reducer for the words data and internal state \n\n  const dataReducer = (state, action) => {\n    switch (action.type) {\n      case 'SET_NEW_NODE':\n        return { ...state,\n          nodes: [...state.nodes, action.payload.node],\n          links: [...state.links, ...action.payload.links]\n        };\n\n      case 'SET_FETCH_FAILED':\n        return { ...state,\n          isError: true\n        };\n\n      default:\n        throw new Error();\n    }\n  }; // define dispatcher for the Internal data \n\n\n  const [data, dispatchData] = React.useReducer(dataReducer, initial_data); // function for getting random num\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max)) + 1;\n  } // fuction for getting a random string\n\n\n  function getRandomStr(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) result += characters.charAt(Math.floor(Math.random() * charactersLength));\n\n    return result;\n  } //generate random link\n\n\n  const getRandomLinks = (link_number, word) => {\n    var seen_targets = [];\n    var links = [];\n\n    for (var i = 0; i < link_number; i++) {\n      var target = data.nodes[getRandomInt(data.nodes.length - 1)].id;\n\n      if (!seen_targets.includes(target)) {\n        links.push({\n          source: word,\n          target: target\n        });\n        seen_targets.push(target);\n      }\n    }\n\n    return links;\n  }; // Make a random node \n\n\n  const genRandomNode = () => {\n    const title = getRandomStr(6);\n    const links = getRandomLinks(getRandomInt(6), title);\n    return {\n      node: {\n        id: title\n      },\n      links\n    };\n  }; //\tadd Async word\n\n\n  const getWordAsync = () => new Promise((resolve, reject) => setTimeout(() => resolve(genRandomNode()), 200)); // add a random node\n\n\n  const addNodeAsync = () => {\n    getWordAsync().then(result => {\n      console.log(\"got result?\");\n      console.log(result);\n      dispatchData({\n        type: 'SET_NEW_NODE',\n        payload: result\n      });\n    }).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  };\n\n  const onClickNode = function (nodeId) {};\n\n  const onRightClickNode = function (event, nodeId) {\n    window.alert(`Right clicked node ${nodeId}`);\n  };\n\n  const onClickLink = function (source, target) {\n    window.alert(`Clicked link between ${source} and ${target}`);\n  };\n\n  const onRightClickLink = function (event, source, target) {\n    window.alert(`Right clicked link between ${source} and ${target}`);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Graph, {\n    id: \"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n    ,\n    data: data,\n    config: myConfig,\n    onClickNode: onClickNode,\n    onRightClickNode: onRightClickNode,\n    onClickLink: onClickLink,\n    onRightClickLink: onRightClickLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addNodeAsync,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, \"Add random Node\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/telix/dictio-grapho/src/App.js"],"names":["React","Graph","genGrapDepth","myConfig","App","initial_data","nodes","id","links","source","target","dataReducer","state","action","type","payload","node","isError","Error","data","dispatchData","useReducer","getRandomInt","max","Math","floor","random","getRandomStr","length","result","characters","charactersLength","i","charAt","getRandomLinks","link_number","word","seen_targets","includes","push","genRandomNode","title","getWordAsync","Promise","resolve","reject","setTimeout","addNodeAsync","then","console","log","catch","onClickNode","nodeId","onRightClickNode","event","window","alert","onClickLink","onRightClickLink"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport { genGrapDepth  } from \"./RandomGenerator\";\n\n// the graph configuration, you only need to pass down properties\n// that you want to override, otherwise default ones will be used\nconst myConfig = {\n\t\t\"automaticRearrangeAfterDropNode\": false,\n\t\t\"collapsible\": false,\n\t\t\"directed\": false,\n\t\t\"focusAnimationDuration\": 0.75,\n\t\t\"focusZoom\": 1,\n\t\t\"height\": 800,\n\t\t\"highlightDegree\": 100,\n\t\t\"highlightOpacity\": 0.5,\n\t\t\"linkHighlightBehavior\": true,\n\t\t\"maxZoom\": 10,\n\t\t\"minZoom\": 0.1,\n\t\t\"nodeHighlightBehavior\": true,\n\t\t\"panAndZoom\": false,\n\t\t\"staticGraph\": false,\n\t\t\"staticGraphWithDragAndDrop\": false,\n\t\t\"width\": 2000,\n\t\t\"d3\": {\n\t\t\t\t\"alphaTarget\": 0.3,\n\t\t\t\t\"gravity\": -150,\n\t\t\t\t\"linkLength\": 3,\n\t\t\t\t\"linkStrength\": 2,\n\t\t\t\t\"disableLinkForce\": false\n\n\t\t},\n\t\t\"node\": {\n\t\t\t\t\"color\": \" #3D3C3A\",\n\t\t\t\t\"fontColor\": \"black\",\n\t\t\t\t\"fontSize\": 8,\n\t\t\t\t\"fontWeight\": \"normal\",\n\t\t\t\t\"highlightColor\": \"#E41B17\",\n\t\t\t\t\"highlightFontSize\": 8,\n\t\t\t\t\"highlightFontWeight\": \"bold\",\n\t\t\t\t\"highlightStrokeColor\": \"black\",\n\t\t\t\t\"highlightStrokeWidth\": \"#27332F\",\n\t\t\t\t\"labelProperty\": \"id\",\n\t\t\t\t\"mouseCursor\": \"pointer\",\n\t\t\t\t\"opacity\": 1,\n\t\t\t\t\"renderLabel\": true,\n\t\t\t\t\"size\": 210,\n\t\t\t\t\"strokeColor\": \"#C6DEFF\",\n\t\t\t\t\"strokeWidth\": 1.6,\n\t\t\t\t\"svg\": \"\",\n\t\t\t\t\"symbolType\": \"circle\"\n\n\t\t},\n\t\t\"link\": {\n\t\t\t\t\"color\": \"#d3d3d3\",\n\t\t\t\t\"fontColor\": \"black\",\n\t\t\t\t\"fontSize\": 8,\n\t\t\t\t\"fontWeight\": \"normal\",\n\t\t\t\t\"highlightColor\": \"#E41B17\",\n\t\t\t\t\"highlightFontSize\": 8,\n\t\t\t\t\"highlightFontWeight\": \"normal\",\n\t\t\t\t\"labelProperty\": \"label\",\n\t\t\t\t\"mouseCursor\": \"pointer\",\n\t\t\t\t\"opacity\": 0.7,\n\t\t\t\t\"renderLabel\": true,\n\t\t\t\t\"semanticStrokeWidth\": false,\n\t\t\t\t\"strokeWidth\": 1.5,\n\t\t\t\t\"markerHeight\": 6,\n\t\t\t\t\"markerWidth\": 6\n\n\t\t}\n};\n\nfunction App() {\n\n\t\t// graph payload (with minimalist structure)\n\t\tconst initial_data = {\n\t\t\t\tnodes: [{ id: \"Harry\" }, { id: \"Sally\" }, { id: \"Alice\" }],\n\t\t\t\tlinks: [\n\t\t\t\t\t\t{ source: \"Harry\", target: \"Sally\" },\n\t\t\t\t\t\t{ source: \"Harry\", target: \"Alice\" },\n\t\t\t\t],\n\t\t};\n\n\t\t// make reducer for the words data and internal state \n\t\tconst dataReducer = (state, action) =>{\n\t\t\t\tswitch (action.type){\n\t\t\t\t\t\tcase 'SET_NEW_NODE':\n\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, action.payload.node],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_FETCH_FAILED':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\t\t}\n\n\t\t// define dispatcher for the Internal data \n\t\tconst [data, dispatchData] = React.useReducer( dataReducer, initial_data );\n\n\t\t// function for getting random num\n\t\tfunction getRandomInt(max) {\n\t\t\t\t  return Math.floor(Math.random() * Math.floor(max))+1 ;\n\t\t}\n\n\t\t// fuction for getting a random string\n\t\tfunction getRandomStr(length) {\n\t\t\t\tvar result           = '';\n\t\t\t\tvar characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\t\t\t\tvar charactersLength = characters.length;\n\t\t\t\tfor ( var i = 0; i < length; i++ ) result += characters.charAt(Math.floor(Math.random() * charactersLength));\n\t\t\t\t   return result;\n\t\t}\n\t\t\n\t\t//generate random link\n\t\tconst getRandomLinks = (link_number, word) => {\n\t\t\t\tvar seen_targets = [] \n\t\t\t\tvar links = [];\n\t\t\t\tfor (var i = 0; i < link_number; i++ ){\n\t\t\t\t\t\tvar target = data.nodes[getRandomInt(data.nodes.length-1)].id;\n\t\t\t\t\t\tif(!seen_targets.includes(target)){\n\t\t\t\t\t\t\t\tlinks.push({ source: word, target: target });\n\t\t\t\t\t\t\t\tseen_targets.push(target);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn links;\n\t\t}\n\t\t\n\t\t// Make a random node \n\t\tconst genRandomNode = () => {\n\t\t\tconst title = getRandomStr(6);\n\t\t\tconst links = getRandomLinks(getRandomInt(6), title);\n\t\t\treturn { node:{ id: title }, links };\n\t\t}\n\n\t\t//\tadd Async word\n\t\tconst getWordAsync = () => new Promise((resolve, reject) => setTimeout(() => resolve(genRandomNode()), 200));\n\n\t\t// add a random node\n\t\tconst addNodeAsync = () => { \n\t\t\t\tgetWordAsync()\n\t\t\t\t\t\t.then( result => {\n\t\t\t\t\t\t\t\tconsole.log(\"got result?\")\n\t\t\t\t\t\t\t\tconsole.log(result)\n\t\t\t\t\t\t\t\tdispatchData({ type: 'SET_NEW_NODE', payload: result }) \n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch( () => dispatchData({ type: 'SET_FETCH_FAILED' }) );\n\t\t}\n\n\t\tconst onClickNode = function(nodeId) {\n\t\t};\n\n\t\tconst onRightClickNode = function(event, nodeId) {\n\t\t\t\twindow.alert(`Right clicked node ${nodeId}`);\n\t\t};\n\n\t\tconst onClickLink = function(source, target) {\n\t\t\t\twindow.alert(`Clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\tconst onRightClickLink = function(event, source, target) {\n\t\t\t\twindow.alert(`Right clicked link between ${source} and ${target}`);\n\t\t};\n\n\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<Graph\n\t\t\t\t\t\t\t\tid=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\t\tconfig={myConfig}\n\t\t\t\t\t\t\t\tonClickNode={onClickNode}\n\t\t\t\t\t\t\t\tonRightClickNode={onRightClickNode}\n\t\t\t\t\t\t\t\tonClickLink={onClickLink}\n\t\t\t\t\t\t\t\tonRightClickLink={onRightClickLink}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button type=\"button\" onClick={addNodeAsync}>\n\t\t\t\t\t\t\t\tAdd random Node\n\t\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}