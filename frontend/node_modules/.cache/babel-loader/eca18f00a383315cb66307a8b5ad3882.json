{"ast":null,"code":"import { colors, API_ENDPOINT } from \"./myConfig\";\nimport { getRandomInt } from \"./Components/RandomGenerator\";\n/*\n * ==================================================\n *      Functions Definnitions for handeling changes\n * ==================================================\n * \n */\n\nconst processNode = node => {\n  /* process a node from the api into one for the dispatcher\n   * it changes title for id, for instance */\n  node['id'] = node.w_id;\n  node['key'] = node.w_id;\n  node['isSelected'] = false;\n  node['color'] = colors.node.default;\n  return node;\n}; // retrive node with given node id from state \n\n\nconst getNode = (nodeId, state) => state.nodes.filter(node => node.id === nodeId)[0]; // attemps to return true id node is not in state, \n// maybe make a dic so that is it not n time\n\n\nconst isNewNode = (nodeId, state) => state.nodes.every(node => node.id !== nodeId);\n\nconst onClickNode = (nodeId, state, dispatchState) => {\n  // when user clicks on a node\n  queryAdjecentNodes(getNode(nodeId, state), state, dispatchState);\n  dispatchState({\n    type: 'SWITCH_SELECTED_NODE',\n    payload: nodeId\n  });\n};\n\nconst timelyDispatch = (dispatchFunc, waitTime = 0, random = 10) => {\n  /* takes a dispachState functions and dispaches it in a \n   * random timply fashion this is usefulf for node not to \n   * appear all at once in the graph and make it easier on \n   * the browser. Returns nothing*/\n  setTimeout(dispatchFunc, waitTime + getRandomInt(random));\n};\n\nconst queryNewWord = (word, state, dispatchState) => {\n  /* reset the graph state and start a new query into a word, \n   * sometime this stymes when it is called a second time,\n   * this might be because of dispatchState being called twice\n   * must investigate.  */\n  fetch(API_ENDPOINT + word) // unpack json\n  .then(result => result.json()) //unpack word\n  .then(result => isWordNotFound(result)) //check if word was found\n  .then(result => processNode(result)) //process node\n  .then(node => {\n    //dispatch word\n    dispatchState({\n      type: 'SET_NEW_NODE',\n      payload: node\n    });\n    return node;\n  }) // get the surrounding words\n  .then(node => queryAdjecentNodes(node, state, dispatchState)).catch(() => dispatchState({\n    type: 'SET_FETCH_FAILED'\n  }));\n};\n\nconst queryTwoWordPath = (first, second, state, dispatchState, prevNode = null) => {\n  /* query Two words to the server */\n  fetch(API_ENDPOINT + 'path/' + first + \"/\" + second).then(result => result.json()) // unpack json\n  .then(nodes => isWordNotFound(nodes)) //check if words not found\n  .then(pathNodes => pathNodes.forEach((node, index) => timelyDispatch(() => {\n    node = processNode(node);\n\n    if (prevNode === null) {\n      // if this is the first node\n      dispatchState({\n        type: 'SET_NEW_NODE',\n        payload: node\n      });\n    } else {\n      //if there is already other nodes\n      dispatchState({\n        type: 'SET_PATH_NODE',\n        payload: {\n          node: node,\n          link: {\n            source: prevNode.id,\n            target: node.id\n          }\n        }\n      });\n    }\n\n    prevNode = node;\n  }, 25, 0)) //se the time as 25 and the random to 0\n  ).catch(() => dispatchState({\n    type: 'SET_FETCH_FAILED'\n  }));\n};\n\nconst queryPath = (words, state, dispatchState) => {\n  /* gets passesed a set of two words, \n   * queries the server for the path and \n   * dispateches the result to state */\n  //split words into arrays\n  let first;\n  let second;\n\n  for (var i = 0; i + 1 < words.length; i++) {\n    console.log(i);\n    first = words[i];\n    second = words[i + 1];\n    console.log(first);\n    console.log(second);\n    queryTwoWordPath(first, second, state, dispatchState);\n  }\n};\n\nconst queryAdjecentNodes = (node, state, dispatchState) => {\n  /* for every node request the adjecent node to it */\n  let linkAll = state.isDeepLinks; // define whether we should link te deeper\n\n  let graph_type = 'synonyms/'; // define which type of graph we are requesting\n\n  fetch(API_ENDPOINT + graph_type + node.id) // request the synonyms\n  .then(result => result.json()).then(result => isWordNotFound(result)).then(adjNodes => adjNodes.forEach( // for every node in the array\n  adjNode => timelyDispatch(() => {\n    //for each of the nodes in the list \t\t\n    adjNode = processNode(adjNode); //process node \n\n    if (linkAll || isNewNode(adjNode.id, state)) {\n      // proces is it is new node, or deep link set\n      dispatchState({\n        type: 'SET_NODE_LINK',\n        payload: {\n          node: adjNode,\n          link: {\n            source: node.id,\n            target: adjNode.id\n          }\n        }\n      });\n    }\n  }))).catch(() => dispatchState({\n    type: 'SET_FETCH_FAILED'\n  }));\n};\n\nconst isWordNotFound = (response, dispatchState) => {\n  /* Set error to state when user search a word not found */\n  if (response.detail === \"Not found.\") {\n    dispatchState({\n      type: 'SET_WORD_NOT_FOUND'\n    });\n    throw new Error(\"word not found\");\n  } else {\n    return response;\n  }\n};\n\nconst onMouseOverNode = function (nodeId, dispatchState) {\n  dispatchState({\n    type: 'SET_DEFINED_NODE',\n    payload: nodeId\n  }); // need to fund a way to also run the default fuction \n};\n\nexport { processNode, isWordNotFound, queryNewWord, queryAdjecentNodes, queryPath, onClickNode, onMouseOverNode };","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/node_functions.js"],"names":["colors","API_ENDPOINT","getRandomInt","processNode","node","w_id","default","getNode","nodeId","state","nodes","filter","id","isNewNode","every","onClickNode","dispatchState","queryAdjecentNodes","type","payload","timelyDispatch","dispatchFunc","waitTime","random","setTimeout","queryNewWord","word","fetch","then","result","json","isWordNotFound","catch","queryTwoWordPath","first","second","prevNode","pathNodes","forEach","index","link","source","target","queryPath","words","i","length","console","log","linkAll","isDeepLinks","graph_type","adjNodes","adjNode","response","detail","Error","onMouseOverNode"],"mappings":"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","sourcesContent":["import { colors, API_ENDPOINT }  from \"./myConfig\";\nimport { getRandomInt }  from \"./Components/RandomGenerator\";\n\n/*\n * ==================================================\n *      Functions Definnitions for handeling changes\n * ==================================================\n * \n */\n\n\nconst processNode = (node) =>{\n\t\t/* process a node from the api into one for the dispatcher\n\t\t * it changes title for id, for instance */\n\t\tnode['id'] = node.w_id;\n\t\tnode['key'] = node.w_id;\n\t\tnode['isSelected'] = false;\n\t\tnode['color'] = colors.node.default;\n\t\treturn node\n}\n\n// retrive node with given node id from state \nconst getNode = (nodeId, state) => state.nodes.filter( node => node.id === nodeId )[0]\n\n// attemps to return true id node is not in state, \n// maybe make a dic so that is it not n time\nconst isNewNode = (nodeId, state) => state.nodes.every( node => node.id !== nodeId )\n\nconst onClickNode = (nodeId, state, dispatchState) => {\n\t\t// when user clicks on a node\n\t\tqueryAdjecentNodes(getNode(nodeId, state), state, dispatchState)\n\t\tdispatchState({type:'SWITCH_SELECTED_NODE', payload: nodeId})  \n};\n\nconst timelyDispatch = (dispatchFunc , waitTime=0, random=10) => {\n\t/* takes a dispachState functions and dispaches it in a \n\t * random timply fashion this is usefulf for node not to \n\t * appear all at once in the graph and make it easier on \n\t * the browser. Returns nothing*/\n\t\tsetTimeout(dispatchFunc, waitTime + getRandomInt(random));\n}\n\nconst queryNewWord = (word, state, dispatchState) => {\n\t\t/* reset the graph state and start a new query into a word, \n\t\t * sometime this stymes when it is called a second time,\n\t\t * this might be because of dispatchState being called twice\n\t\t * must investigate.  */\n\t\tfetch(API_ENDPOINT + word)\n\t\t// unpack json\n\t\t\t\t.then(result => result.json()) //unpack word\n\t\t\t\t.then(result => isWordNotFound(result)) //check if word was found\n\t\t\t\t.then(result => processNode(result)) //process node\n\t\t\t\t.then(node => { //dispatch word\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype: 'SET_NEW_NODE', \n\t\t\t\t\t\t\t\tpayload: node\n\t\t\t\t\t\t}); \n\t\t\t\t\t\treturn node; })\n\t\t// get the surrounding words\n\t\t\t\t.then(node => queryAdjecentNodes(node, state, dispatchState))\n\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}));\n}\n\nconst queryTwoWordPath = (first, second, state, dispatchState, prevNode=null) => {\n\t\t/* query Two words to the server */ \n\t\tfetch(API_ENDPOINT + 'path/' +  first  + \"/\" + second) \n\t\t\t\t.then(result => result.json()) // unpack json\n\t\t\t\t.then(nodes => isWordNotFound(nodes)) //check if words not found\n\t\t\t\t.then(pathNodes => \n\t\t\t\t\t\tpathNodes.forEach((node, index) => timelyDispatch(() =>{  \n\t\t\t\t\t\t\t\tnode = processNode(node);\n\t\t\t\t\t\t\t\tif (prevNode === null){ \n\t\t\t\t\t\t\t\t\t\t// if this is the first node\n\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NEW_NODE', \n\t\t\t\t\t\t\t\t\t\t\t\tpayload: node,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t//if there is already other nodes\n\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_PATH_NODE', \n\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode: node,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: prevNode.id, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: node.id \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tprevNode = node;\n\t\t\t\t\t\t}, 25,0)\n\t\t\t\t\t\t) //se the time as 25 and the random to 0\n\t\t\t\t)\n\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}));\n}\n\nconst queryPath = (words, state, dispatchState) => {\n\t\t/* gets passesed a set of two words, \n\t\t * queries the server for the path and \n\t\t * dispateches the result to state */\n\t\t//split words into arrays\n\t\tlet first;\n\t\tlet second;\n\t\tfor( var i = 0; i + 1 < words.length; i++){\n\t\t\t\tconsole.log(i)\n\t\t\t\tfirst = words[i];\n\t\t\t\tsecond = words[i + 1];\n\t\t\t\tconsole.log(first);\n\t\t\t\tconsole.log(second);\n\t\t\t\tqueryTwoWordPath(first, second, state, dispatchState);\n\t\t}\n}\n\nconst queryAdjecentNodes = (node, state, dispatchState) => {\n\t\t/* for every node request the adjecent node to it */\n\t\tlet linkAll = state.isDeepLinks;\n\t\t// define whether we should link te deeper\n\t\tlet graph_type = 'synonyms/';\n\t\t// define which type of graph we are requesting\n\t\tfetch(API_ENDPOINT + graph_type + node.id )\n\t\t// request the synonyms\n\t\t\t\t.then(result => result.json())\n\t\t\t\t.then(result => isWordNotFound(result))\n\t\t\t\t.then(adjNodes => adjNodes.forEach( \n\t\t\t\t\t\t// for every node in the array\n\t\t\t\t\t\tadjNode => timelyDispatch(() => {  \n\t\t\t\t\t\t\t\t//for each of the nodes in the list \t\t\n\t\t\t\t\t\t\t\tadjNode = processNode(adjNode); //process node \n\t\t\t\t\t\t\t\tif(linkAll || isNewNode(adjNode.id, state)){\n\t\t\t\t\t\t\t\t\t\t// proces is it is new node, or deep link set\n\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NODE_LINK', \n\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode: adjNode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node.id ,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: adjNode.id \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t\n\t\t\t\t))\n\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}))\n}\n\nconst isWordNotFound = (response, dispatchState) =>{\n\t\t/* Set error to state when user search a word not found */\n\t\tif( response.detail === \"Not found.\" ) {\n\t\t\t\tdispatchState({type: 'SET_WORD_NOT_FOUND'})\n\t\t\t\tthrow new Error(\"word not found\")\n\t\t}else{\n\t\t\t\treturn response\n\t\t}\n}\n\nconst onMouseOverNode = function(nodeId, dispatchState) {\n\t\tdispatchState({type:'SET_DEFINED_NODE', payload: nodeId})  \n\t\t// need to fund a way to also run the default fuction \n};\n\nexport { processNode, isWordNotFound, queryNewWord, queryAdjecentNodes, queryPath, onClickNode, onMouseOverNode }\n\n"]},"metadata":{},"sourceType":"module"}