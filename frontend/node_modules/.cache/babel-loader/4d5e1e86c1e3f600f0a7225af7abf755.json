{"ast":null,"code":"import Half from \"./half\";\nexport default function (callback) {\n  var halves = [],\n      next = [],\n      q;\n  if (this._root) halves.push(new Half(this._root, this._x0, this._x1));\n\n  while (q = halves.pop()) {\n    var node = q.node;\n\n    if (node.length) {\n      var child,\n          x0 = q.x0,\n          x1 = q.x1,\n          xm = (x0 + x1) / 2;\n      if (child = node[0]) halves.push(new Half(child, x0, xm));\n      if (child = node[1]) halves.push(new Half(child, xm, x1));\n    }\n\n    next.push(q);\n  }\n\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.x1);\n  }\n\n  return this;\n}","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/d3-binarytree/src/visitAfter.js"],"names":["Half","callback","halves","next","q","_root","push","_x0","_x1","pop","node","length","child","x0","x1","xm"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AAEA,eAAe,UAASC,QAAT,EAAmB;AAChC,MAAIC,MAAM,GAAG,EAAb;AAAA,MAAiBC,IAAI,GAAG,EAAxB;AAAA,MAA4BC,CAA5B;AACA,MAAI,KAAKC,KAAT,EAAgBH,MAAM,CAACI,IAAP,CAAY,IAAIN,IAAJ,CAAS,KAAKK,KAAd,EAAqB,KAAKE,GAA1B,EAA+B,KAAKC,GAApC,CAAZ;;AAChB,SAAOJ,CAAC,GAAGF,MAAM,CAACO,GAAP,EAAX,EAAyB;AACvB,QAAIC,IAAI,GAAGN,CAAC,CAACM,IAAb;;AACA,QAAIA,IAAI,CAACC,MAAT,EAAiB;AACf,UAAIC,KAAJ;AAAA,UAAWC,EAAE,GAAGT,CAAC,CAACS,EAAlB;AAAA,UAAsBC,EAAE,GAAGV,CAAC,CAACU,EAA7B;AAAA,UAAiCC,EAAE,GAAG,CAACF,EAAE,GAAGC,EAAN,IAAY,CAAlD;AACA,UAAIF,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAhB,EAAqBR,MAAM,CAACI,IAAP,CAAY,IAAIN,IAAJ,CAASY,KAAT,EAAgBC,EAAhB,EAAoBE,EAApB,CAAZ;AACrB,UAAIH,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAhB,EAAqBR,MAAM,CAACI,IAAP,CAAY,IAAIN,IAAJ,CAASY,KAAT,EAAgBG,EAAhB,EAAoBD,EAApB,CAAZ;AACtB;;AACDX,IAAAA,IAAI,CAACG,IAAL,CAAUF,CAAV;AACD;;AACD,SAAOA,CAAC,GAAGD,IAAI,CAACM,GAAL,EAAX,EAAuB;AACrBR,IAAAA,QAAQ,CAACG,CAAC,CAACM,IAAH,EAASN,CAAC,CAACS,EAAX,EAAeT,CAAC,CAACU,EAAjB,CAAR;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import Half from \"./half\";\n\nexport default function(callback) {\n  var halves = [], next = [], q;\n  if (this._root) halves.push(new Half(this._root, this._x0, this._x1));\n  while (q = halves.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, x1 = q.x1, xm = (x0 + x1) / 2;\n      if (child = node[0]) halves.push(new Half(child, x0, xm));\n      if (child = node[1]) halves.push(new Half(child, xm, x1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.x1);\n  }\n  return this;\n}\n"]},"metadata":{},"sourceType":"module"}