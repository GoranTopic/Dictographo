{"ast":null,"code":"import Octant from \"./octant\";\nexport default function (callback) {\n  var octs = [],\n      q,\n      node = this._root,\n      child,\n      x0,\n      y0,\n      z0,\n      x1,\n      y1,\n      z1;\n  if (node) octs.push(new Octant(node, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));\n\n  while (q = octs.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1) && node.length) {\n      var xm = (x0 + x1) / 2,\n          ym = (y0 + y1) / 2,\n          zm = (z0 + z1) / 2;\n      if (child = node[7]) octs.push(new Octant(child, xm, ym, zm, x1, y1, z1));\n      if (child = node[6]) octs.push(new Octant(child, x0, ym, zm, xm, y1, z1));\n      if (child = node[5]) octs.push(new Octant(child, xm, y0, zm, x1, ym, z1));\n      if (child = node[4]) octs.push(new Octant(child, x0, y0, zm, xm, ym, z1));\n      if (child = node[3]) octs.push(new Octant(child, xm, ym, z0, x1, y1, zm));\n      if (child = node[2]) octs.push(new Octant(child, x0, ym, z0, xm, y1, zm));\n      if (child = node[1]) octs.push(new Octant(child, xm, y0, z0, x1, ym, zm));\n      if (child = node[0]) octs.push(new Octant(child, x0, y0, z0, xm, ym, zm));\n    }\n  }\n\n  return this;\n}","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/d3-octree/src/visit.js"],"names":["Octant","callback","octs","q","node","_root","child","x0","y0","z0","x1","y1","z1","push","_x0","_y0","_z0","_x1","_y1","_z1","pop","length","xm","ym","zm"],"mappings":"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","sourcesContent":["import Octant from \"./octant\";\n\nexport default function(callback) {\n  var octs = [], q, node = this._root, child, x0, y0, z0, x1, y1, z1;\n  if (node) octs.push(new Octant(node, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));\n  while (q = octs.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;\n      if (child = node[7]) octs.push(new Octant(child, xm, ym, zm, x1, y1, z1));\n      if (child = node[6]) octs.push(new Octant(child, x0, ym, zm, xm, y1, z1));\n      if (child = node[5]) octs.push(new Octant(child, xm, y0, zm, x1, ym, z1));\n      if (child = node[4]) octs.push(new Octant(child, x0, y0, zm, xm, ym, z1));\n      if (child = node[3]) octs.push(new Octant(child, xm, ym, z0, x1, y1, zm));\n      if (child = node[2]) octs.push(new Octant(child, x0, ym, z0, xm, y1, zm));\n      if (child = node[1]) octs.push(new Octant(child, xm, y0, z0, x1, ym, zm));\n      if (child = node[0]) octs.push(new Octant(child, x0, y0, z0, xm, ym, zm));\n    }\n  }\n  return this;\n}\n"]},"metadata":{},"sourceType":"module"}