{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictio-grapho/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport { genGrapDepth, genRandomNode, genGrapNodes } from \"./RandomGenerator\";\nimport myConfig from \"./myConfig\";\n\nfunction App() {\n  // graph payload (with minimalist structure)\n  const initial_data = {\n    nodes: [{\n      id: \"Harry\",\n      fill: 'green',\n      type: 'Square',\n      color: 'red',\n      cx: 22,\n      cy: 22\n    }, {\n      id: \"Sally\"\n    }, {\n      id: \"Alice\"\n    }],\n    links: [{\n      source: \"Harry\",\n      target: \"Sally\"\n    }, {\n      source: \"Harry\",\n      target: \"Alice\"\n    }]\n  }; // make reducer for the words data and internal state \n\n  const dataReducer = (state, action) => {\n    switch (action.type) {\n      case 'SET_NEW_NODE':\n        return { ...state,\n          nodes: [...state.nodes, action.payload.node],\n          links: [...state.links, ...action.payload.links]\n        };\n\n      case 'APPEND_NODES':\n        return {\n          nodes: [...state.nodes, ...action.payload.nodes],\n          links: [...state.links, ...action.payload.links]\n        };\n\n      case 'SET_FETCH_FAILED':\n        return { ...state,\n          isError: true\n        };\n\n      default:\n        throw new Error();\n    }\n  }; // define dispatcher for the Internal data \n\n\n  const [data, dispatchData] = React.useReducer(dataReducer, initial_data); // add Async word\n\n  const getWordAsync = () => new Promise((resolve, reject) => setTimeout(() => resolve(genRandomNode(data.nodes)), 200)); // add a random node\n\n\n  const addNodeAsync = () => {\n    getWordAsync().then(result => dispatchData({\n      type: 'SET_NEW_NODE',\n      payload: result\n    })).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  }; // get nodes Async\n\n\n  const getNodesAsync = word => new Promise((resolve, reject) => setTimeout(() => resolve(genGrapNodes(word, 1)), 200)); // append nodes into the graph\n\n\n  const appendNodesAsync = word => {\n    console.log(word);\n    getNodesAsync(word).then(result => {\n      console.log(result);\n\n      if (result.isArray()) {\n        for (var node in result) dispatchData({\n          type: 'SET_NEW_NODE',\n          payload: node\n        });\n      } else {\n        dispatchData({\n          type: 'APPEND_NODES',\n          payload: result\n        });\n      }\n    }).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  };\n\n  const onClickNode = function (nodeId) {\n    console.log(`clicked node ${nodeId}`);\n    appendNodesAsync(nodeId);\n  };\n\n  const onRightClickNode = function (event, nodeId) {\n    window.alert(`Right clicked node ${nodeId}`);\n  };\n\n  const onClickLink = function (source, target) {\n    window.alert(`Clicked link between ${source} and ${target}`);\n  };\n\n  const onRightClickLink = function (event, source, target) {\n    window.alert(`Right clicked link between ${source} and ${target}`);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Graph, {\n    id: \"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n    ,\n    data: data,\n    config: myConfig,\n    onClickNode: onClickNode,\n    onRightClickNode: onRightClickNode,\n    onClickLink: onClickLink,\n    onRightClickLink: onRightClickLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addNodeAsync,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, \"Add random Node\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/telix/dictio-grapho/src/App.js"],"names":["React","Graph","genGrapDepth","genRandomNode","genGrapNodes","myConfig","App","initial_data","nodes","id","fill","type","color","cx","cy","links","source","target","dataReducer","state","action","payload","node","isError","Error","data","dispatchData","useReducer","getWordAsync","Promise","resolve","reject","setTimeout","addNodeAsync","then","result","catch","getNodesAsync","word","appendNodesAsync","console","log","isArray","onClickNode","nodeId","onRightClickNode","event","window","alert","onClickLink","onRightClickLink"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport { genGrapDepth, genRandomNode, genGrapNodes } from \"./RandomGenerator\";\nimport  myConfig  from \"./myConfig\";\n\nfunction App() {\n\n\t\t// graph payload (with minimalist structure)\n\t\tconst initial_data = {\n\t\t\t\tnodes: [{ id: \"Harry\",fill:'green', type:'Square', color:'red', cx:22, cy:22}, { id: \"Sally\" }, { id: \"Alice\" }],\n\t\t\t\tlinks: [\n\t\t\t\t\t\t{ source: \"Harry\", target: \"Sally\" },\n\t\t\t\t\t\t{ source: \"Harry\", target: \"Alice\" },\n\t\t\t\t],\n\t\t};\n\n\t\t// make reducer for the words data and internal state \n\t\tconst dataReducer = (state, action) =>{\n\t\t\t\tswitch (action.type){\n\t\t\t\t\t\tcase 'SET_NEW_NODE':\n\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, action.payload.node],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'APPEND_NODES':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 'SET_FETCH_FAILED':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\t\t}\n\n\t\t// define dispatcher for the Internal data \n\t\tconst [data, dispatchData] = React.useReducer( dataReducer, initial_data );\n\n\n\t\t// add Async word\n\t\tconst getWordAsync = ()=> new Promise((resolve, reject) => setTimeout(() => resolve(genRandomNode(data.nodes)), 200));\n\n\t\t// add a random node\n\t\tconst addNodeAsync = () => { \n\t\t\t\tgetWordAsync()\n\t\t\t\t\t\t.then( result => dispatchData({ type: 'SET_NEW_NODE', payload: result }) )\n\t\t\t\t\t\t.catch( () => dispatchData({ type: 'SET_FETCH_FAILED' }) );\n\t\t}\n\n\t\t// get nodes Async\n\t\tconst getNodesAsync = (word)=> new Promise((resolve, reject)=> setTimeout(()=> resolve(genGrapNodes(word, 1)), 200));\n\n\t\t// append nodes into the graph\n\t\tconst appendNodesAsync = (word) => { \n\t\t\t\tconsole.log(word);\n\t\t\t\tgetNodesAsync(word)\n\t\t\t\t\t\t.then( result => {\n\t\t\t\t\t\t\t\tconsole.log(result);\n\t\t\t\t\t\t\t\tif(result.isArray()){\n\t\t\t\t\t\t\t\t\tfor(var node in result) dispatchData({ type: 'SET_NEW_NODE', payload: node });\n\t\t\t\t\t\t\t\t}else{\n\n\t\t\t\t\t\t\t\t\t\tdispatchData({ type: 'APPEND_NODES', payload: result })\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch( () => dispatchData({ type: 'SET_FETCH_FAILED' }) );\n\t\t}\n\n\n\t\tconst onClickNode = function(nodeId) {\n\t\t\t\tconsole.log(`clicked node ${nodeId}`);\n\t\t\t\tappendNodesAsync(nodeId);\n\t\t};\n\n\t\tconst onRightClickNode = function(event, nodeId) {\n\t\t\t\twindow.alert(`Right clicked node ${nodeId}`);\n\t\t};\n\n\t\tconst onClickLink = function(source, target) {\n\t\t\t\twindow.alert(`Clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\tconst onRightClickLink = function(event, source, target) {\n\t\t\t\twindow.alert(`Right clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\n\t\t\t\t\t\t<Graph\n\t\t\t\t\t\t\t\tid=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\t\tconfig={myConfig}\n\t\t\t\t\t\t\t\tonClickNode={onClickNode}\n\t\t\t\t\t\t\t\tonRightClickNode={onRightClickNode}\n\t\t\t\t\t\t\t\tonClickLink={onClickLink}\n\t\t\t\t\t\t\t\tonRightClickLink={onRightClickLink}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button type=\"button\" onClick={addNodeAsync}>\n\t\t\t\t\t\t\t\tAdd random Node\n\t\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}