{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/SearchSuggestion.js\";\nimport React, { useState } from 'react';\nimport { API_ENDPOINT } from \"../myConfig\"; //import { queryNewWord, queryPath } from '../node_functions';\n//import { colors }  from \"../myConfig\";\n//import { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n//import { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\n//import { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/';\n\nfunction SuggestionsContainer(props) {\n  let state = props.state;\n  let dispatchState = props.dispatchState;\n  /* tahek a child fro a input an add suggestions to it */\n  // handle the change by seting the state variable to \n\n  const [suggestions, setSuggestions] = useState([]);\n\n  const fetchSuggestions = async (inputText) =>\n  /* query server for search suggestionsa\n   * and sets the  */\n  fetch(API_ENDPOINT + query_search + inputText).then(result => result.json()) //unpack suggestions\n  .then(suggestions => setSuggestions(suggestions)).catch(() => dispatchState({\n    type: 'SET_ERROR'\n  }));\n\n  const SuggestionList = () => {\n    console.log(\"this ran\");\n    fetchSuggestions(state.searchTerm);\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      class: \"suggestions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, \" this is rendering\"), suggestions.map((suggestion, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 32\n      }\n    }, \"suggestion\")));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.children, state.searchTerm.length > 2 ? /*#__PURE__*/React.createElement(SuggestionList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 35\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n}\n\nexport default SuggestionsContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/SearchSuggestion.js"],"names":["React","useState","API_ENDPOINT","query_search","SuggestionsContainer","props","state","dispatchState","suggestions","setSuggestions","fetchSuggestions","inputText","fetch","then","result","json","catch","type","SuggestionList","console","log","searchTerm","map","suggestion","index","children","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA8B,aAA9B,C,CACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAOA,IAAIC,YAAY,GAAG,cAAnB;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAAoC;AAClC,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AACA,MAAIC,aAAa,GAAGF,KAAK,CAACE,aAA1B;AACD;AACC;;AACA,QAAO,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA/C;;AAEA,QAAMS,gBAAgB,GAAG,OAAOC,SAAP;AACvB;;AAEAC,EAAAA,KAAK,CAACV,YAAY,GAAGC,YAAf,GAA8BQ,SAA/B,CAAL,CACGE,IADH,CACQC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADlB,EACiC;AADjC,GAEGF,IAFH,CAEQL,WAAW,IAAIC,cAAc,CAACD,WAAD,CAFrC,EAGGQ,KAHH,CAGS,MAAMT,aAAa,CAAC;AAACU,IAAAA,IAAI,EAAC;AAAN,GAAD,CAH5B,CAHF;;AAQA,QAAMC,cAAc,GAAG,MAAM;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAV,IAAAA,gBAAgB,CAACJ,KAAK,CAACe,UAAP,CAAhB;AACA,wBAAO;AAAI,MAAA,KAAK,EAAC,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADK,EAEJb,WAAW,CAACc,GAAZ,CACC,CAACC,UAAD,EAAaC,KAAb,kBAAuB;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADxB,CAFI,CAAP;AAKD,GARD;;AAWA,sBAAO,0CACJnB,KAAK,CAACoB,QADF,EAEJnB,KAAK,CAACe,UAAN,CAAiBK,MAAjB,GAA0B,CAA1B,gBAA6B,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,gBAAgD,yCAF5C,CAAP;AAID;;AAED,eAAetB,oBAAf","sourcesContent":["import React, { useState } from 'react';\nimport { API_ENDPOINT }  from \"../myConfig\";\n//import { queryNewWord, queryPath } from '../node_functions';\n//import { colors }  from \"../myConfig\";\n//import { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n//import { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\n//import { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/'\n\nfunction SuggestionsContainer(props){\n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tconst  [suggestions, setSuggestions] = useState([])\t\n\n\t\tconst fetchSuggestions = async (inputText) => \n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tfetch(API_ENDPOINT + query_search + inputText)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch(() => dispatchState({type:'SET_ERROR'}));\n\n\t\tconst SuggestionList = () => {\n\t\t\t\tconsole.log(\"this ran\");\n\t\t\t\tfetchSuggestions(state.searchTerm);\n\t\t\t\treturn <ul class=\"suggestions\">\n\t\t\t\t\t\t<h1> this is rendering</h1>\n\t\t\t\t\t\t{suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => <li key={index}>suggestion</li> )}\n\t\t\t\t</ul>\n\t\t}\n\n\n\t\treturn <>\n\t\t\t\t{props.children}\n\t\t\t\t{state.searchTerm.length > 2? <SuggestionList/>: <></> }\n\t\t</>\n}\n\nexport default SuggestionsContainer;\n"]},"metadata":{},"sourceType":"module"}