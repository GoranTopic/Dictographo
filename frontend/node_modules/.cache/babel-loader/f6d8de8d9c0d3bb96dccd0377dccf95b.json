{"ast":null,"code":"/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\nimport { utils } from \"./utils.js\";\nimport { PolyBezier } from \"./poly-bezier.js\";\nimport { convertPath } from \"./svg-to-beziers.js\"; // math-inlining.\n\nconst {\n  abs,\n  min,\n  max,\n  cos,\n  sin,\n  acos,\n  sqrt\n} = Math;\nconst pi = Math.PI; // a zero coordinate, which is surprisingly useful\n\nconst ZERO = {\n  x: 0,\n  y: 0,\n  z: 0\n};\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\n\nclass Bezier {\n  constructor(coords) {\n    let args = coords && coords.forEach ? coords : Array.from(arguments).slice();\n    let coordlen = false;\n\n    if (typeof args[0] === \"object\") {\n      coordlen = args.length;\n      const newargs = [];\n      args.forEach(function (point) {\n        [\"x\", \"y\", \"z\"].forEach(function (d) {\n          if (typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    let higher = false;\n    const len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n      }\n    }\n\n    const _3d = this._3d = !higher && (len === 9 || len === 12) || coords && coords[0] && typeof coords[0].z !== \"undefined\";\n\n    const points = this.points = [];\n\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1]\n      };\n\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n\n      points.push(point);\n    }\n\n    const order = this.order = points.length - 1;\n    const dims = this.dims = [\"x\", \"y\"];\n    if (_3d) dims.push(\"z\");\n    this.dimlen = dims.length;\n    const aligned = utils.align(points, {\n      p1: points[0],\n      p2: points[order]\n    });\n    this._linear = !aligned.some(p => abs(p.y) > 0.0001);\n    this._lut = [];\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  static SVGtoBeziers(d) {\n    return convertPath(Bezier, d);\n  }\n\n  static quadraticFromPoints(p1, p2, p3, t) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } // shortcuts, although they're really dumb\n\n\n    if (t === 0) {\n      return new Bezier(p2, p2, p3);\n    }\n\n    if (t === 1) {\n      return new Bezier(p1, p2, p2);\n    } // real fitting.\n\n\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\n    return new Bezier(p1, abc.A, p3);\n  }\n\n  static cubicFromPoints(S, B, E, t, d1) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n\n    const abc = Bezier.getABC(3, S, B, E, t);\n\n    if (typeof d1 === \"undefined\") {\n      d1 = utils.dist(B, abc.C);\n    }\n\n    const d2 = d1 * (1 - t) / t;\n    const selen = utils.dist(S, E),\n          lx = (E.x - S.x) / selen,\n          ly = (E.y - S.y) / selen,\n          bx1 = d1 * lx,\n          by1 = d1 * ly,\n          bx2 = d2 * lx,\n          by2 = d2 * ly; // derivation of new hull coordinates\n\n    const e1 = {\n      x: B.x - bx1,\n      y: B.y - by1\n    },\n          e2 = {\n      x: B.x + bx2,\n      y: B.y + by2\n    },\n          A = abc.A,\n          v1 = {\n      x: A.x + (e1.x - A.x) / (1 - t),\n      y: A.y + (e1.y - A.y) / (1 - t)\n    },\n          v2 = {\n      x: A.x + (e2.x - A.x) / t,\n      y: A.y + (e2.y - A.y) / t\n    },\n          nc1 = {\n      x: S.x + (v1.x - S.x) / t,\n      y: S.y + (v1.y - S.y) / t\n    },\n          nc2 = {\n      x: E.x + (v2.x - E.x) / (1 - t),\n      y: E.y + (v2.y - E.y) / (1 - t)\n    }; // ...done\n\n    return new Bezier(S, nc1, nc2, E);\n  }\n\n  static getUtils() {\n    return utils;\n  }\n\n  getUtils() {\n    return Bezier.getUtils();\n  }\n\n  static get PolyBezier() {\n    return PolyBezier;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return utils.pointsToString(this.points);\n  }\n\n  toSVG() {\n    if (this._3d) return false;\n    const p = this.points,\n          x = p[0].x,\n          y = p[0].y,\n          s = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\n\n    for (let i = 1, last = p.length; i < last; i++) {\n      s.push(p[i].x);\n      s.push(p[i].y);\n    }\n\n    return s.join(\" \");\n  }\n\n  setRatios(ratios) {\n    if (ratios.length !== this.points.length) {\n      throw new Error(\"incorrect number of ratio values\");\n    }\n\n    this.ratios = ratios;\n    this._lut = []; //  invalidate any precomputed LUT\n  }\n\n  verify() {\n    const print = this.coordDigest();\n\n    if (print !== this._print) {\n      this._print = print;\n      this.update();\n    }\n  }\n\n  coordDigest() {\n    return this.points.map(function (c, pos) {\n      return \"\" + pos + c.x + c.y + (c.z ? c.z : 0);\n    }).join(\"\");\n  }\n\n  update() {\n    // invalidate any precomputed LUT\n    this._lut = [];\n    this.dpoints = utils.derive(this.points, this._3d);\n    this.computedirection();\n  }\n\n  computedirection() {\n    const points = this.points;\n    const angle = utils.angle(points[0], points[this.order], points[1]);\n    this.clockwise = angle > 0;\n  }\n\n  length() {\n    return utils.length(this.derivative.bind(this));\n  }\n\n  static getABC(order = 2, S, B, E, t = 0.5) {\n    const u = utils.projectionratio(t, order),\n          um = 1 - u,\n          C = {\n      x: u * S.x + um * E.x,\n      y: u * S.y + um * E.y\n    },\n          s = utils.abcratio(t, order),\n          A = {\n      x: B.x + (B.x - C.x) / s,\n      y: B.y + (B.y - C.y) / s\n    };\n    return {\n      A,\n      B,\n      C,\n      S,\n      E\n    };\n  }\n\n  getABC(t, B) {\n    B = B || this.get(t);\n    let S = this.points[0];\n    let E = this.points[this.order];\n    return Bezier.getABC(this.order, S, B, E, t);\n  }\n\n  getLUT(steps) {\n    this.verify();\n    steps = steps || 100;\n\n    if (this._lut.length === steps) {\n      return this._lut;\n    }\n\n    this._lut = []; // We want a range from 0 to 1 inclusive, so\n    // we decrement and then use <= rather than <:\n\n    steps--;\n\n    for (let i = 0, p, t; i < steps; i++) {\n      t = i / (steps - 1);\n      p = this.compute(t);\n      p.t = t;\n\n      this._lut.push(p);\n    }\n\n    return this._lut;\n  }\n\n  on(point, error) {\n    error = error || 5;\n    const lut = this.getLUT(),\n          hits = [];\n\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\n      c = lut[i];\n\n      if (utils.dist(c, point) < error) {\n        hits.push(c);\n        t += i / lut.length;\n      }\n    }\n\n    if (!hits.length) return false;\n    return t /= hits.length;\n  }\n\n  project(point) {\n    // step 1: coarse check\n    const LUT = this.getLUT(),\n          l = LUT.length - 1,\n          closest = utils.closest(LUT, point),\n          mpos = closest.mpos,\n          t1 = (mpos - 1) / l,\n          t2 = (mpos + 1) / l,\n          step = 0.1 / l; // step 2: fine check\n\n    let mdist = closest.mdist,\n        t = t1,\n        ft = t,\n        p;\n    mdist += 1;\n\n    for (let d; t < t2 + step; t += step) {\n      p = this.compute(t);\n      d = utils.dist(point, p);\n\n      if (d < mdist) {\n        mdist = d;\n        ft = t;\n      }\n    }\n\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n    p = this.compute(ft);\n    p.t = ft;\n    p.d = mdist;\n    return p;\n  }\n\n  get(t) {\n    return this.compute(t);\n  }\n\n  point(idx) {\n    return this.points[idx];\n  }\n\n  compute(t) {\n    if (this.ratios) {\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n    }\n\n    return utils.compute(t, this.points, this._3d, this.ratios);\n  }\n\n  raise() {\n    const p = this.points,\n          np = [p[0]],\n          k = p.length;\n\n    for (let i = 1, pi, pim; i < k; i++) {\n      pi = p[i];\n      pim = p[i - 1];\n      np[i] = {\n        x: (k - i) / k * pi.x + i / k * pim.x,\n        y: (k - i) / k * pi.y + i / k * pim.y\n      };\n    }\n\n    np[k] = p[k - 1];\n    return new Bezier(np);\n  }\n\n  derivative(t) {\n    return utils.compute(t, this.dpoints[0]);\n  }\n\n  dderivative(t) {\n    return utils.compute(t, this.dpoints[1]);\n  }\n\n  align() {\n    let p = this.points;\n    return new Bezier(utils.align(p, {\n      p1: p[0],\n      p2: p[p.length - 1]\n    }));\n  }\n\n  curvature(t) {\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n  }\n\n  inflections() {\n    return utils.inflections(this.points);\n  }\n\n  normal(t) {\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\n  }\n\n  __normal2(t) {\n    const d = this.derivative(t);\n    const q = sqrt(d.x * d.x + d.y * d.y);\n    return {\n      x: -d.y / q,\n      y: d.x / q\n    };\n  }\n\n  __normal3(t) {\n    // see http://stackoverflow.com/questions/25453159\n    const r1 = this.derivative(t),\n          r2 = this.derivative(t + 0.01),\n          q1 = sqrt(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n          q2 = sqrt(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n    r1.x /= q1;\n    r1.y /= q1;\n    r1.z /= q1;\n    r2.x /= q2;\n    r2.y /= q2;\n    r2.z /= q2; // cross product\n\n    const c = {\n      x: r2.y * r1.z - r2.z * r1.y,\n      y: r2.z * r1.x - r2.x * r1.z,\n      z: r2.x * r1.y - r2.y * r1.x\n    };\n    const m = sqrt(c.x * c.x + c.y * c.y + c.z * c.z);\n    c.x /= m;\n    c.y /= m;\n    c.z /= m; // rotation matrix\n\n    const R = [c.x * c.x, c.x * c.y - c.z, c.x * c.z + c.y, c.x * c.y + c.z, c.y * c.y, c.y * c.z - c.x, c.x * c.z - c.y, c.y * c.z + c.x, c.z * c.z]; // normal vector:\n\n    const n = {\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z\n    };\n    return n;\n  }\n\n  hull(t) {\n    let p = this.points,\n        _p = [],\n        q = [],\n        idx = 0;\n    q[idx++] = p[0];\n    q[idx++] = p[1];\n    q[idx++] = p[2];\n\n    if (this.order === 3) {\n      q[idx++] = p[3];\n    } // we lerp between all points at each iteration, until we have 1 point left.\n\n\n    while (p.length > 1) {\n      _p = [];\n\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\n        pt = utils.lerp(t, p[i], p[i + 1]);\n        q[idx++] = pt;\n\n        _p.push(pt);\n      }\n\n      p = _p;\n    }\n\n    return q;\n  }\n\n  split(t1, t2) {\n    // shortcuts\n    if (t1 === 0 && !!t2) {\n      return this.split(t2).left;\n    }\n\n    if (t2 === 1) {\n      return this.split(t1).right;\n    } // no shortcut: use \"de Casteljau\" iteration.\n\n\n    const q = this.hull(t1);\n    const result = {\n      left: this.order === 2 ? new Bezier([q[0], q[3], q[5]]) : new Bezier([q[0], q[4], q[7], q[9]]),\n      right: this.order === 2 ? new Bezier([q[5], q[4], q[2]]) : new Bezier([q[9], q[8], q[6], q[3]]),\n      span: q\n    }; // make sure we bind _t1/_t2 information!\n\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2); // if we have no t2, we're done\n\n    if (!t2) {\n      return result;\n    } // if we have a t2, split again:\n\n\n    t2 = utils.map(t2, t1, 1, 0, 1);\n    return result.right.split(t2).left;\n  }\n\n  extrema() {\n    const result = {};\n    let roots = [];\n    this.dims.forEach(function (dim) {\n      let mfn = function (v) {\n        return v[dim];\n      };\n\n      let p = this.dpoints[0].map(mfn);\n      result[dim] = utils.droots(p);\n\n      if (this.order === 3) {\n        p = this.dpoints[1].map(mfn);\n        result[dim] = result[dim].concat(utils.droots(p));\n      }\n\n      result[dim] = result[dim].filter(function (t) {\n        return t >= 0 && t <= 1;\n      });\n      roots = roots.concat(result[dim].sort(utils.numberSort));\n    }.bind(this));\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n      return roots.indexOf(v) === idx;\n    });\n    return result;\n  }\n\n  bbox() {\n    const extrema = this.extrema(),\n          result = {};\n    this.dims.forEach(function (d) {\n      result[d] = utils.getminmax(this, d, extrema[d]);\n    }.bind(this));\n    return result;\n  }\n\n  overlaps(curve) {\n    const lbbox = this.bbox(),\n          tbbox = curve.bbox();\n    return utils.bboxoverlap(lbbox, tbbox);\n  }\n\n  offset(t, d) {\n    if (typeof d !== \"undefined\") {\n      const c = this.get(t),\n            n = this.normal(t);\n      const ret = {\n        c: c,\n        n: n,\n        x: c.x + n.x * d,\n        y: c.y + n.y * d\n      };\n\n      if (this._3d) {\n        ret.z = c.z + n.z * d;\n      }\n\n      return ret;\n    }\n\n    if (this._linear) {\n      const nv = this.normal(0),\n            coords = this.points.map(function (p) {\n        const ret = {\n          x: p.x + t * nv.x,\n          y: p.y + t * nv.y\n        };\n\n        if (p.z && nv.z) {\n          ret.z = p.z + t * nv.z;\n        }\n\n        return ret;\n      });\n      return [new Bezier(coords)];\n    }\n\n    return this.reduce().map(function (s) {\n      if (s._linear) {\n        return s.offset(t)[0];\n      }\n\n      return s.scale(t);\n    });\n  }\n\n  simple() {\n    if (this.order === 3) {\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n      if (a1 > 0 && a2 < 0 || a1 < 0 && a2 > 0) return false;\n    }\n\n    const n1 = this.normal(0);\n    const n2 = this.normal(1);\n    let s = n1.x * n2.x + n1.y * n2.y;\n\n    if (this._3d) {\n      s += n1.z * n2.z;\n    }\n\n    return abs(acos(s)) < pi / 3;\n  }\n\n  reduce() {\n    // TODO: examine these var types in more detail...\n    let i,\n        t1 = 0,\n        t2 = 0,\n        step = 0.01,\n        segment,\n        pass1 = [],\n        pass2 = []; // first pass: split on extrema\n\n    let extrema = this.extrema().values;\n\n    if (extrema.indexOf(0) === -1) {\n      extrema = [0].concat(extrema);\n    }\n\n    if (extrema.indexOf(1) === -1) {\n      extrema.push(1);\n    }\n\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n      t2 = extrema[i];\n      segment = this.split(t1, t2);\n      segment._t1 = t1;\n      segment._t2 = t2;\n      pass1.push(segment);\n      t1 = t2;\n    } // second pass: further reduce these segments to simple segments\n\n\n    pass1.forEach(function (p1) {\n      t1 = 0;\n      t2 = 0;\n\n      while (t2 <= 1) {\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n          segment = p1.split(t1, t2);\n\n          if (!segment.simple()) {\n            t2 -= step;\n\n            if (abs(t1 - t2) < step) {\n              // we can never form a reduction\n              return [];\n            }\n\n            segment = p1.split(t1, t2);\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n            pass2.push(segment);\n            t1 = t2;\n            break;\n          }\n        }\n      }\n\n      if (t1 < 1) {\n        segment = p1.split(t1, 1);\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n        segment._t2 = p1._t2;\n        pass2.push(segment);\n      }\n    });\n    return pass2;\n  }\n\n  scale(d) {\n    const order = this.order;\n    let distanceFn = false;\n\n    if (typeof d === \"function\") {\n      distanceFn = d;\n    }\n\n    if (distanceFn && order === 2) {\n      return this.raise().scale(distanceFn);\n    } // TODO: add special handling for degenerate (=linear) curves.\n\n\n    const clockwise = this.clockwise;\n    const r1 = distanceFn ? distanceFn(0) : d;\n    const r2 = distanceFn ? distanceFn(1) : d;\n    const v = [this.offset(0, 10), this.offset(1, 10)];\n    const points = this.points;\n    const np = [];\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n    if (!o) {\n      throw new Error(\"cannot scale this curve. Try reducing it first.\");\n    } // move all points by distance 'd' wrt the origin 'o'\n    // move end points by fixed distance along normal.\n\n\n    [0, 1].forEach(function (t) {\n      const p = np[t * order] = utils.copy(points[t * order]);\n      p.x += (t ? r2 : r1) * v[t].n.x;\n      p.y += (t ? r2 : r1) * v[t].n.y;\n    });\n\n    if (!distanceFn) {\n      // move control points to lie on the intersection of the offset\n      // derivative vector, and the origin-through-control vector\n      [0, 1].forEach(t => {\n        if (order === 2 && !!t) return;\n        const p = np[t * order];\n        const d = this.derivative(t);\n        const p2 = {\n          x: p.x + d.x,\n          y: p.y + d.y\n        };\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n      });\n      return new Bezier(np);\n    } // move control points by \"however much necessary to\n    // ensure the correct tangent to endpoint\".\n\n\n    [0, 1].forEach(function (t) {\n      if (order === 2 && !!t) return;\n      var p = points[t + 1];\n      var ov = {\n        x: p.x - o.x,\n        y: p.y - o.y\n      };\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n      if (distanceFn && !clockwise) rc = -rc;\n      var m = sqrt(ov.x * ov.x + ov.y * ov.y);\n      ov.x /= m;\n      ov.y /= m;\n      np[t + 1] = {\n        x: p.x + rc * ov.x,\n        y: p.y + rc * ov.y\n      };\n    });\n    return new Bezier(np);\n  }\n\n  outline(d1, d2, d3, d4) {\n    d2 = typeof d2 === \"undefined\" ? d1 : d2;\n    const reduced = this.reduce(),\n          len = reduced.length,\n          fcurves = [];\n    let bcurves = [],\n        p,\n        alen = 0,\n        tlen = this.length();\n    const graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\n\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\n      return function (v) {\n        const f1 = alen / tlen,\n              f2 = (alen + slen) / tlen,\n              d = e - s;\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n      };\n    } // form curve oulines\n\n\n    reduced.forEach(function (segment) {\n      const slen = segment.length();\n\n      if (graduated) {\n        fcurves.push(segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen)));\n        bcurves.push(segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen)));\n      } else {\n        fcurves.push(segment.scale(d1));\n        bcurves.push(segment.scale(-d2));\n      }\n\n      alen += slen;\n    }); // reverse the \"return\" outline\n\n    bcurves = bcurves.map(function (s) {\n      p = s.points;\n\n      if (p[3]) {\n        s.points = [p[3], p[2], p[1], p[0]];\n      } else {\n        s.points = [p[2], p[1], p[0]];\n      }\n\n      return s;\n    }).reverse(); // form the endcaps as lines\n\n    const fs = fcurves[0].points[0],\n          fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n          bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n          be = bcurves[0].points[0],\n          ls = utils.makeline(bs, fs),\n          le = utils.makeline(fe, be),\n          segments = [ls].concat(fcurves).concat([le]).concat(bcurves),\n          slen = segments.length;\n    return new PolyBezier(segments);\n  }\n\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\n    d2 = d2 || d1;\n    const outline = this.outline(d1, d2).curves;\n    const shapes = [];\n\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\n      const shape = utils.makeshape(outline[i], outline[len - i], curveIntersectionThreshold);\n      shape.startcap.virtual = i > 1;\n      shape.endcap.virtual = i < len / 2 - 1;\n      shapes.push(shape);\n    }\n\n    return shapes;\n  }\n\n  intersects(curve, curveIntersectionThreshold) {\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\n\n    if (curve.p1 && curve.p2) {\n      return this.lineIntersects(curve);\n    }\n\n    if (curve instanceof Bezier) {\n      curve = curve.reduce();\n    }\n\n    return this.curveintersects(this.reduce(), curve, curveIntersectionThreshold);\n  }\n\n  lineIntersects(line) {\n    const mx = min(line.p1.x, line.p2.x),\n          my = min(line.p1.y, line.p2.y),\n          MX = max(line.p1.x, line.p2.x),\n          MY = max(line.p1.y, line.p2.y);\n    return utils.roots(this.points, line).filter(t => {\n      var p = this.get(t);\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n    });\n  }\n\n  selfintersects(curveIntersectionThreshold) {\n    // \"simple\" curves cannot intersect with their direct\n    // neighbour, so for each segment X we check whether\n    // it intersects [0:x-2][x+2:last].\n    const reduced = this.reduce(),\n          len = reduced.length - 2,\n          results = [];\n\n    for (let i = 0, result, left, right; i < len; i++) {\n      left = reduced.slice(i, i + 1);\n      right = reduced.slice(i + 2);\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\n      results.push(...result);\n    }\n\n    return results;\n  }\n\n  curveintersects(c1, c2, curveIntersectionThreshold) {\n    const pairs = []; // step 1: pair off any overlapping segments\n\n    c1.forEach(function (l) {\n      c2.forEach(function (r) {\n        if (l.overlaps(r)) {\n          pairs.push({\n            left: l,\n            right: r\n          });\n        }\n      });\n    }); // step 2: for each pairing, run through the convergence algorithm.\n\n    let intersections = [];\n    pairs.forEach(function (pair) {\n      const result = utils.pairiteration(pair.left, pair.right, curveIntersectionThreshold);\n\n      if (result.length > 0) {\n        intersections = intersections.concat(result);\n      }\n    });\n    return intersections;\n  }\n\n  arcs(errorThreshold) {\n    errorThreshold = errorThreshold || 0.5;\n    return this._iterate(errorThreshold, []);\n  }\n\n  _error(pc, np1, s, e) {\n    const q = (e - s) / 4,\n          c1 = this.get(s + q),\n          c2 = this.get(e - q),\n          ref = utils.dist(pc, np1),\n          d1 = utils.dist(pc, c1),\n          d2 = utils.dist(pc, c2);\n    return abs(d1 - ref) + abs(d2 - ref);\n  }\n\n  _iterate(errorThreshold, circles) {\n    let t_s = 0,\n        t_e = 1,\n        safety; // we do a binary search to find the \"good `t` closest to no-longer-good\"\n\n    do {\n      safety = 0; // step 1: start with the maximum possible arc\n\n      t_e = 1; // points:\n\n      let np1 = this.get(t_s),\n          np2,\n          np3,\n          arc,\n          prev_arc; // booleans:\n\n      let curr_good = false,\n          prev_good = false,\n          done; // numbers:\n\n      let t_m = t_e,\n          prev_e = 1,\n          step = 0; // step 2: find the best possible arc\n\n      do {\n        prev_good = curr_good;\n        prev_arc = arc;\n        t_m = (t_s + t_e) / 2;\n        step++;\n        np2 = this.get(t_m);\n        np3 = this.get(t_e);\n        arc = utils.getccenter(np1, np2, np3); //also save the t values\n\n        arc.interval = {\n          start: t_s,\n          end: t_e\n        };\n\n        let error = this._error(arc, np1, t_s, t_e);\n\n        curr_good = error <= errorThreshold;\n        done = prev_good && !curr_good;\n        if (!done) prev_e = t_e; // this arc is fine: we can move 'e' up to see if we can find a wider arc\n\n        if (curr_good) {\n          // if e is already at max, then we're done for this arc.\n          if (t_e >= 1) {\n            // make sure we cap at t=1\n            arc.interval.end = prev_e = 1;\n            prev_arc = arc; // if we capped the arc segment to t=1 we also need to make sure that\n            // the arc's end angle is correct with respect to the bezier end point.\n\n            if (t_e > 1) {\n              let d = {\n                x: arc.x + arc.r * cos(arc.e),\n                y: arc.y + arc.r * sin(arc.e)\n              };\n              arc.e += utils.angle({\n                x: arc.x,\n                y: arc.y\n              }, d, this.get(1));\n            }\n\n            break;\n          } // if not, move it up by half the iteration distance\n\n\n          t_e = t_e + (t_e - t_s) / 2;\n        } else {\n          // this is a bad arc: we need to move 'e' down to find a good arc\n          t_e = t_m;\n        }\n      } while (!done && safety++ < 100);\n\n      if (safety >= 100) {\n        break;\n      } // console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n\n      prev_arc = prev_arc ? prev_arc : arc;\n      circles.push(prev_arc);\n      t_s = prev_e;\n    } while (t_e < 1);\n\n    return circles;\n  }\n\n}\n\nexport { Bezier };","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/bezier-js/lib/bezier.js"],"names":["utils","PolyBezier","convertPath","abs","min","max","cos","sin","acos","sqrt","Math","pi","PI","ZERO","x","y","z","Bezier","constructor","coords","args","forEach","Array","from","arguments","slice","coordlen","length","newargs","point","d","push","higher","len","Error","_3d","points","idx","step","order","dims","dimlen","aligned","align","p1","p2","_linear","some","p","_lut","_t1","_t2","update","SVGtoBeziers","quadraticFromPoints","p3","t","abc","getABC","A","cubicFromPoints","S","B","E","d1","dist","C","d2","selen","lx","ly","bx1","by1","bx2","by2","e1","e2","v1","v2","nc1","nc2","getUtils","valueOf","toString","pointsToString","toSVG","s","i","last","join","setRatios","ratios","verify","print","coordDigest","_print","map","c","pos","dpoints","derive","computedirection","angle","clockwise","derivative","bind","u","projectionratio","um","abcratio","get","getLUT","steps","compute","on","error","lut","hits","project","LUT","l","closest","mpos","t1","t2","mdist","ft","computeWithRatios","raise","np","k","pim","dderivative","curvature","inflections","normal","__normal3","__normal2","q","r1","r2","q1","q2","m","R","n","hull","_p","pt","lerp","split","left","right","result","span","extrema","roots","dim","mfn","v","droots","concat","filter","sort","numberSort","values","indexOf","bbox","getminmax","overlaps","curve","lbbox","tbbox","bboxoverlap","offset","ret","nv","reduce","scale","simple","a1","a2","n1","n2","segment","pass1","pass2","distanceFn","o","lli4","copy","ov","rc","outline","d3","d4","reduced","fcurves","bcurves","alen","tlen","graduated","linearDistanceFunction","e","slen","f1","f2","reverse","fs","fe","bs","be","ls","makeline","le","segments","outlineshapes","curveIntersectionThreshold","curves","shapes","shape","makeshape","startcap","virtual","endcap","intersects","selfintersects","lineIntersects","curveintersects","line","mx","my","MX","MY","between","results","c1","c2","pairs","r","intersections","pair","pairiteration","arcs","errorThreshold","_iterate","_error","pc","np1","ref","circles","t_s","t_e","safety","np2","np3","arc","prev_arc","curr_good","prev_good","done","t_m","prev_e","getccenter","interval","start","end"],"mappings":"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","sourcesContent":["/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\n\nimport { utils } from \"./utils.js\";\nimport { PolyBezier } from \"./poly-bezier.js\";\nimport { convertPath } from \"./svg-to-beziers.js\";\n\n// math-inlining.\nconst { abs, min, max, cos, sin, acos, sqrt } = Math;\nconst pi = Math.PI;\n// a zero coordinate, which is surprisingly useful\nconst ZERO = { x: 0, y: 0, z: 0 };\n\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\nclass Bezier {\n  constructor(coords) {\n    let args =\n      coords && coords.forEach ? coords : Array.from(arguments).slice();\n    let coordlen = false;\n\n    if (typeof args[0] === \"object\") {\n      coordlen = args.length;\n      const newargs = [];\n      args.forEach(function (point) {\n        [\"x\", \"y\", \"z\"].forEach(function (d) {\n          if (typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    let higher = false;\n    const len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\n          );\n        }\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\n          );\n        }\n      }\n    }\n\n    const _3d = (this._3d =\n      (!higher && (len === 9 || len === 12)) ||\n      (coords && coords[0] && typeof coords[0].z !== \"undefined\"));\n\n    const points = (this.points = []);\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1],\n      };\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n      points.push(point);\n    }\n    const order = (this.order = points.length - 1);\n\n    const dims = (this.dims = [\"x\", \"y\"]);\n    if (_3d) dims.push(\"z\");\n    this.dimlen = dims.length;\n\n    const aligned = utils.align(points, { p1: points[0], p2: points[order] });\n    this._linear = !aligned.some((p) => abs(p.y) > 0.0001);\n\n    this._lut = [];\n\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  static SVGtoBeziers(d) {\n    return convertPath(Bezier, d);\n  }\n\n  static quadraticFromPoints(p1, p2, p3, t) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n    // shortcuts, although they're really dumb\n    if (t === 0) {\n      return new Bezier(p2, p2, p3);\n    }\n    if (t === 1) {\n      return new Bezier(p1, p2, p2);\n    }\n    // real fitting.\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\n    return new Bezier(p1, abc.A, p3);\n  }\n\n  static cubicFromPoints(S, B, E, t, d1) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n    const abc = Bezier.getABC(3, S, B, E, t);\n    if (typeof d1 === \"undefined\") {\n      d1 = utils.dist(B, abc.C);\n    }\n    const d2 = (d1 * (1 - t)) / t;\n\n    const selen = utils.dist(S, E),\n      lx = (E.x - S.x) / selen,\n      ly = (E.y - S.y) / selen,\n      bx1 = d1 * lx,\n      by1 = d1 * ly,\n      bx2 = d2 * lx,\n      by2 = d2 * ly;\n    // derivation of new hull coordinates\n    const e1 = { x: B.x - bx1, y: B.y - by1 },\n      e2 = { x: B.x + bx2, y: B.y + by2 },\n      A = abc.A,\n      v1 = { x: A.x + (e1.x - A.x) / (1 - t), y: A.y + (e1.y - A.y) / (1 - t) },\n      v2 = { x: A.x + (e2.x - A.x) / t, y: A.y + (e2.y - A.y) / t },\n      nc1 = { x: S.x + (v1.x - S.x) / t, y: S.y + (v1.y - S.y) / t },\n      nc2 = {\n        x: E.x + (v2.x - E.x) / (1 - t),\n        y: E.y + (v2.y - E.y) / (1 - t),\n      };\n    // ...done\n    return new Bezier(S, nc1, nc2, E);\n  }\n\n  static getUtils() {\n    return utils;\n  }\n\n  getUtils() {\n    return Bezier.getUtils();\n  }\n\n  static get PolyBezier() {\n    return PolyBezier;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return utils.pointsToString(this.points);\n  }\n\n  toSVG() {\n    if (this._3d) return false;\n    const p = this.points,\n      x = p[0].x,\n      y = p[0].y,\n      s = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\n    for (let i = 1, last = p.length; i < last; i++) {\n      s.push(p[i].x);\n      s.push(p[i].y);\n    }\n    return s.join(\" \");\n  }\n\n  setRatios(ratios) {\n    if (ratios.length !== this.points.length) {\n      throw new Error(\"incorrect number of ratio values\");\n    }\n    this.ratios = ratios;\n    this._lut = []; //  invalidate any precomputed LUT\n  }\n\n  verify() {\n    const print = this.coordDigest();\n    if (print !== this._print) {\n      this._print = print;\n      this.update();\n    }\n  }\n\n  coordDigest() {\n    return this.points\n      .map(function (c, pos) {\n        return \"\" + pos + c.x + c.y + (c.z ? c.z : 0);\n      })\n      .join(\"\");\n  }\n\n  update() {\n    // invalidate any precomputed LUT\n    this._lut = [];\n    this.dpoints = utils.derive(this.points, this._3d);\n    this.computedirection();\n  }\n\n  computedirection() {\n    const points = this.points;\n    const angle = utils.angle(points[0], points[this.order], points[1]);\n    this.clockwise = angle > 0;\n  }\n\n  length() {\n    return utils.length(this.derivative.bind(this));\n  }\n\n  static getABC(order = 2, S, B, E, t = 0.5) {\n    const u = utils.projectionratio(t, order),\n      um = 1 - u,\n      C = {\n        x: u * S.x + um * E.x,\n        y: u * S.y + um * E.y,\n      },\n      s = utils.abcratio(t, order),\n      A = {\n        x: B.x + (B.x - C.x) / s,\n        y: B.y + (B.y - C.y) / s,\n      };\n    return { A, B, C, S, E };\n  }\n\n  getABC(t, B) {\n    B = B || this.get(t);\n    let S = this.points[0];\n    let E = this.points[this.order];\n    return Bezier.getABC(this.order, S, B, E, t);\n  }\n\n  getLUT(steps) {\n    this.verify();\n    steps = steps || 100;\n    if (this._lut.length === steps) {\n      return this._lut;\n    }\n    this._lut = [];\n    // We want a range from 0 to 1 inclusive, so\n    // we decrement and then use <= rather than <:\n    steps--;\n    for (let i = 0, p, t; i < steps; i++) {\n      t = i / (steps - 1);\n      p = this.compute(t);\n      p.t = t;\n      this._lut.push(p);\n    }\n    return this._lut;\n  }\n\n  on(point, error) {\n    error = error || 5;\n    const lut = this.getLUT(),\n      hits = [];\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\n      c = lut[i];\n      if (utils.dist(c, point) < error) {\n        hits.push(c);\n        t += i / lut.length;\n      }\n    }\n    if (!hits.length) return false;\n    return (t /= hits.length);\n  }\n\n  project(point) {\n    // step 1: coarse check\n    const LUT = this.getLUT(),\n      l = LUT.length - 1,\n      closest = utils.closest(LUT, point),\n      mpos = closest.mpos,\n      t1 = (mpos - 1) / l,\n      t2 = (mpos + 1) / l,\n      step = 0.1 / l;\n\n    // step 2: fine check\n    let mdist = closest.mdist,\n      t = t1,\n      ft = t,\n      p;\n    mdist += 1;\n    for (let d; t < t2 + step; t += step) {\n      p = this.compute(t);\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        ft = t;\n      }\n    }\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n    p = this.compute(ft);\n    p.t = ft;\n    p.d = mdist;\n    return p;\n  }\n\n  get(t) {\n    return this.compute(t);\n  }\n\n  point(idx) {\n    return this.points[idx];\n  }\n\n  compute(t) {\n    if (this.ratios) {\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n    }\n    return utils.compute(t, this.points, this._3d, this.ratios);\n  }\n\n  raise() {\n    const p = this.points,\n      np = [p[0]],\n      k = p.length;\n    for (let i = 1, pi, pim; i < k; i++) {\n      pi = p[i];\n      pim = p[i - 1];\n      np[i] = {\n        x: ((k - i) / k) * pi.x + (i / k) * pim.x,\n        y: ((k - i) / k) * pi.y + (i / k) * pim.y,\n      };\n    }\n    np[k] = p[k - 1];\n    return new Bezier(np);\n  }\n\n  derivative(t) {\n    return utils.compute(t, this.dpoints[0]);\n  }\n\n  dderivative(t) {\n    return utils.compute(t, this.dpoints[1]);\n  }\n\n  align() {\n    let p = this.points;\n    return new Bezier(utils.align(p, { p1: p[0], p2: p[p.length - 1] }));\n  }\n\n  curvature(t) {\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n  }\n\n  inflections() {\n    return utils.inflections(this.points);\n  }\n\n  normal(t) {\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\n  }\n\n  __normal2(t) {\n    const d = this.derivative(t);\n    const q = sqrt(d.x * d.x + d.y * d.y);\n    return { x: -d.y / q, y: d.x / q };\n  }\n\n  __normal3(t) {\n    // see http://stackoverflow.com/questions/25453159\n    const r1 = this.derivative(t),\n      r2 = this.derivative(t + 0.01),\n      q1 = sqrt(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n      q2 = sqrt(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n    r1.x /= q1;\n    r1.y /= q1;\n    r1.z /= q1;\n    r2.x /= q2;\n    r2.y /= q2;\n    r2.z /= q2;\n    // cross product\n    const c = {\n      x: r2.y * r1.z - r2.z * r1.y,\n      y: r2.z * r1.x - r2.x * r1.z,\n      z: r2.x * r1.y - r2.y * r1.x,\n    };\n    const m = sqrt(c.x * c.x + c.y * c.y + c.z * c.z);\n    c.x /= m;\n    c.y /= m;\n    c.z /= m;\n    // rotation matrix\n    const R = [\n      c.x * c.x,\n      c.x * c.y - c.z,\n      c.x * c.z + c.y,\n      c.x * c.y + c.z,\n      c.y * c.y,\n      c.y * c.z - c.x,\n      c.x * c.z - c.y,\n      c.y * c.z + c.x,\n      c.z * c.z,\n    ];\n    // normal vector:\n    const n = {\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z,\n    };\n    return n;\n  }\n\n  hull(t) {\n    let p = this.points,\n      _p = [],\n      q = [],\n      idx = 0;\n    q[idx++] = p[0];\n    q[idx++] = p[1];\n    q[idx++] = p[2];\n    if (this.order === 3) {\n      q[idx++] = p[3];\n    }\n    // we lerp between all points at each iteration, until we have 1 point left.\n    while (p.length > 1) {\n      _p = [];\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\n        pt = utils.lerp(t, p[i], p[i + 1]);\n        q[idx++] = pt;\n        _p.push(pt);\n      }\n      p = _p;\n    }\n    return q;\n  }\n\n  split(t1, t2) {\n    // shortcuts\n    if (t1 === 0 && !!t2) {\n      return this.split(t2).left;\n    }\n    if (t2 === 1) {\n      return this.split(t1).right;\n    }\n\n    // no shortcut: use \"de Casteljau\" iteration.\n    const q = this.hull(t1);\n    const result = {\n      left:\n        this.order === 2\n          ? new Bezier([q[0], q[3], q[5]])\n          : new Bezier([q[0], q[4], q[7], q[9]]),\n      right:\n        this.order === 2\n          ? new Bezier([q[5], q[4], q[2]])\n          : new Bezier([q[9], q[8], q[6], q[3]]),\n      span: q,\n    };\n\n    // make sure we bind _t1/_t2 information!\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);\n\n    // if we have no t2, we're done\n    if (!t2) {\n      return result;\n    }\n\n    // if we have a t2, split again:\n    t2 = utils.map(t2, t1, 1, 0, 1);\n    return result.right.split(t2).left;\n  }\n\n  extrema() {\n    const result = {};\n    let roots = [];\n\n    this.dims.forEach(\n      function (dim) {\n        let mfn = function (v) {\n          return v[dim];\n        };\n        let p = this.dpoints[0].map(mfn);\n        result[dim] = utils.droots(p);\n        if (this.order === 3) {\n          p = this.dpoints[1].map(mfn);\n          result[dim] = result[dim].concat(utils.droots(p));\n        }\n        result[dim] = result[dim].filter(function (t) {\n          return t >= 0 && t <= 1;\n        });\n        roots = roots.concat(result[dim].sort(utils.numberSort));\n      }.bind(this)\n    );\n\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n      return roots.indexOf(v) === idx;\n    });\n\n    return result;\n  }\n\n  bbox() {\n    const extrema = this.extrema(),\n      result = {};\n    this.dims.forEach(\n      function (d) {\n        result[d] = utils.getminmax(this, d, extrema[d]);\n      }.bind(this)\n    );\n    return result;\n  }\n\n  overlaps(curve) {\n    const lbbox = this.bbox(),\n      tbbox = curve.bbox();\n    return utils.bboxoverlap(lbbox, tbbox);\n  }\n\n  offset(t, d) {\n    if (typeof d !== \"undefined\") {\n      const c = this.get(t),\n        n = this.normal(t);\n      const ret = {\n        c: c,\n        n: n,\n        x: c.x + n.x * d,\n        y: c.y + n.y * d,\n      };\n      if (this._3d) {\n        ret.z = c.z + n.z * d;\n      }\n      return ret;\n    }\n    if (this._linear) {\n      const nv = this.normal(0),\n        coords = this.points.map(function (p) {\n          const ret = {\n            x: p.x + t * nv.x,\n            y: p.y + t * nv.y,\n          };\n          if (p.z && nv.z) {\n            ret.z = p.z + t * nv.z;\n          }\n          return ret;\n        });\n      return [new Bezier(coords)];\n    }\n    return this.reduce().map(function (s) {\n      if (s._linear) {\n        return s.offset(t)[0];\n      }\n      return s.scale(t);\n    });\n  }\n\n  simple() {\n    if (this.order === 3) {\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n      if ((a1 > 0 && a2 < 0) || (a1 < 0 && a2 > 0)) return false;\n    }\n    const n1 = this.normal(0);\n    const n2 = this.normal(1);\n    let s = n1.x * n2.x + n1.y * n2.y;\n    if (this._3d) {\n      s += n1.z * n2.z;\n    }\n    return abs(acos(s)) < pi / 3;\n  }\n\n  reduce() {\n    // TODO: examine these var types in more detail...\n    let i,\n      t1 = 0,\n      t2 = 0,\n      step = 0.01,\n      segment,\n      pass1 = [],\n      pass2 = [];\n    // first pass: split on extrema\n    let extrema = this.extrema().values;\n    if (extrema.indexOf(0) === -1) {\n      extrema = [0].concat(extrema);\n    }\n    if (extrema.indexOf(1) === -1) {\n      extrema.push(1);\n    }\n\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n      t2 = extrema[i];\n      segment = this.split(t1, t2);\n      segment._t1 = t1;\n      segment._t2 = t2;\n      pass1.push(segment);\n      t1 = t2;\n    }\n\n    // second pass: further reduce these segments to simple segments\n    pass1.forEach(function (p1) {\n      t1 = 0;\n      t2 = 0;\n      while (t2 <= 1) {\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n          segment = p1.split(t1, t2);\n          if (!segment.simple()) {\n            t2 -= step;\n            if (abs(t1 - t2) < step) {\n              // we can never form a reduction\n              return [];\n            }\n            segment = p1.split(t1, t2);\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n            pass2.push(segment);\n            t1 = t2;\n            break;\n          }\n        }\n      }\n      if (t1 < 1) {\n        segment = p1.split(t1, 1);\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n        segment._t2 = p1._t2;\n        pass2.push(segment);\n      }\n    });\n    return pass2;\n  }\n\n  scale(d) {\n    const order = this.order;\n    let distanceFn = false;\n    if (typeof d === \"function\") {\n      distanceFn = d;\n    }\n    if (distanceFn && order === 2) {\n      return this.raise().scale(distanceFn);\n    }\n\n    // TODO: add special handling for degenerate (=linear) curves.\n    const clockwise = this.clockwise;\n    const r1 = distanceFn ? distanceFn(0) : d;\n    const r2 = distanceFn ? distanceFn(1) : d;\n    const v = [this.offset(0, 10), this.offset(1, 10)];\n    const points = this.points;\n    const np = [];\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n    if (!o) {\n      throw new Error(\"cannot scale this curve. Try reducing it first.\");\n    }\n    // move all points by distance 'd' wrt the origin 'o'\n\n    // move end points by fixed distance along normal.\n    [0, 1].forEach(function (t) {\n      const p = (np[t * order] = utils.copy(points[t * order]));\n      p.x += (t ? r2 : r1) * v[t].n.x;\n      p.y += (t ? r2 : r1) * v[t].n.y;\n    });\n\n    if (!distanceFn) {\n      // move control points to lie on the intersection of the offset\n      // derivative vector, and the origin-through-control vector\n      [0, 1].forEach((t) => {\n        if (order === 2 && !!t) return;\n        const p = np[t * order];\n        const d = this.derivative(t);\n        const p2 = { x: p.x + d.x, y: p.y + d.y };\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n      });\n      return new Bezier(np);\n    }\n\n    // move control points by \"however much necessary to\n    // ensure the correct tangent to endpoint\".\n    [0, 1].forEach(function (t) {\n      if (order === 2 && !!t) return;\n      var p = points[t + 1];\n      var ov = {\n        x: p.x - o.x,\n        y: p.y - o.y,\n      };\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n      if (distanceFn && !clockwise) rc = -rc;\n      var m = sqrt(ov.x * ov.x + ov.y * ov.y);\n      ov.x /= m;\n      ov.y /= m;\n      np[t + 1] = {\n        x: p.x + rc * ov.x,\n        y: p.y + rc * ov.y,\n      };\n    });\n    return new Bezier(np);\n  }\n\n  outline(d1, d2, d3, d4) {\n    d2 = typeof d2 === \"undefined\" ? d1 : d2;\n    const reduced = this.reduce(),\n      len = reduced.length,\n      fcurves = [];\n\n    let bcurves = [],\n      p,\n      alen = 0,\n      tlen = this.length();\n\n    const graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\n\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\n      return function (v) {\n        const f1 = alen / tlen,\n          f2 = (alen + slen) / tlen,\n          d = e - s;\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n      };\n    }\n\n    // form curve oulines\n    reduced.forEach(function (segment) {\n      const slen = segment.length();\n      if (graduated) {\n        fcurves.push(\n          segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen))\n        );\n        bcurves.push(\n          segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen))\n        );\n      } else {\n        fcurves.push(segment.scale(d1));\n        bcurves.push(segment.scale(-d2));\n      }\n      alen += slen;\n    });\n\n    // reverse the \"return\" outline\n    bcurves = bcurves\n      .map(function (s) {\n        p = s.points;\n        if (p[3]) {\n          s.points = [p[3], p[2], p[1], p[0]];\n        } else {\n          s.points = [p[2], p[1], p[0]];\n        }\n        return s;\n      })\n      .reverse();\n\n    // form the endcaps as lines\n    const fs = fcurves[0].points[0],\n      fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n      bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n      be = bcurves[0].points[0],\n      ls = utils.makeline(bs, fs),\n      le = utils.makeline(fe, be),\n      segments = [ls].concat(fcurves).concat([le]).concat(bcurves),\n      slen = segments.length;\n\n    return new PolyBezier(segments);\n  }\n\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\n    d2 = d2 || d1;\n    const outline = this.outline(d1, d2).curves;\n    const shapes = [];\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\n      const shape = utils.makeshape(\n        outline[i],\n        outline[len - i],\n        curveIntersectionThreshold\n      );\n      shape.startcap.virtual = i > 1;\n      shape.endcap.virtual = i < len / 2 - 1;\n      shapes.push(shape);\n    }\n    return shapes;\n  }\n\n  intersects(curve, curveIntersectionThreshold) {\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\n    if (curve.p1 && curve.p2) {\n      return this.lineIntersects(curve);\n    }\n    if (curve instanceof Bezier) {\n      curve = curve.reduce();\n    }\n    return this.curveintersects(\n      this.reduce(),\n      curve,\n      curveIntersectionThreshold\n    );\n  }\n\n  lineIntersects(line) {\n    const mx = min(line.p1.x, line.p2.x),\n      my = min(line.p1.y, line.p2.y),\n      MX = max(line.p1.x, line.p2.x),\n      MY = max(line.p1.y, line.p2.y);\n    return utils.roots(this.points, line).filter((t) => {\n      var p = this.get(t);\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n    });\n  }\n\n  selfintersects(curveIntersectionThreshold) {\n    // \"simple\" curves cannot intersect with their direct\n    // neighbour, so for each segment X we check whether\n    // it intersects [0:x-2][x+2:last].\n\n    const reduced = this.reduce(),\n      len = reduced.length - 2,\n      results = [];\n\n    for (let i = 0, result, left, right; i < len; i++) {\n      left = reduced.slice(i, i + 1);\n      right = reduced.slice(i + 2);\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\n      results.push(...result);\n    }\n    return results;\n  }\n\n  curveintersects(c1, c2, curveIntersectionThreshold) {\n    const pairs = [];\n    // step 1: pair off any overlapping segments\n    c1.forEach(function (l) {\n      c2.forEach(function (r) {\n        if (l.overlaps(r)) {\n          pairs.push({ left: l, right: r });\n        }\n      });\n    });\n    // step 2: for each pairing, run through the convergence algorithm.\n    let intersections = [];\n    pairs.forEach(function (pair) {\n      const result = utils.pairiteration(\n        pair.left,\n        pair.right,\n        curveIntersectionThreshold\n      );\n      if (result.length > 0) {\n        intersections = intersections.concat(result);\n      }\n    });\n    return intersections;\n  }\n\n  arcs(errorThreshold) {\n    errorThreshold = errorThreshold || 0.5;\n    return this._iterate(errorThreshold, []);\n  }\n\n  _error(pc, np1, s, e) {\n    const q = (e - s) / 4,\n      c1 = this.get(s + q),\n      c2 = this.get(e - q),\n      ref = utils.dist(pc, np1),\n      d1 = utils.dist(pc, c1),\n      d2 = utils.dist(pc, c2);\n    return abs(d1 - ref) + abs(d2 - ref);\n  }\n\n  _iterate(errorThreshold, circles) {\n    let t_s = 0,\n      t_e = 1,\n      safety;\n    // we do a binary search to find the \"good `t` closest to no-longer-good\"\n    do {\n      safety = 0;\n\n      // step 1: start with the maximum possible arc\n      t_e = 1;\n\n      // points:\n      let np1 = this.get(t_s),\n        np2,\n        np3,\n        arc,\n        prev_arc;\n\n      // booleans:\n      let curr_good = false,\n        prev_good = false,\n        done;\n\n      // numbers:\n      let t_m = t_e,\n        prev_e = 1,\n        step = 0;\n\n      // step 2: find the best possible arc\n      do {\n        prev_good = curr_good;\n        prev_arc = arc;\n        t_m = (t_s + t_e) / 2;\n        step++;\n\n        np2 = this.get(t_m);\n        np3 = this.get(t_e);\n\n        arc = utils.getccenter(np1, np2, np3);\n\n        //also save the t values\n        arc.interval = {\n          start: t_s,\n          end: t_e,\n        };\n\n        let error = this._error(arc, np1, t_s, t_e);\n        curr_good = error <= errorThreshold;\n\n        done = prev_good && !curr_good;\n        if (!done) prev_e = t_e;\n\n        // this arc is fine: we can move 'e' up to see if we can find a wider arc\n        if (curr_good) {\n          // if e is already at max, then we're done for this arc.\n          if (t_e >= 1) {\n            // make sure we cap at t=1\n            arc.interval.end = prev_e = 1;\n            prev_arc = arc;\n            // if we capped the arc segment to t=1 we also need to make sure that\n            // the arc's end angle is correct with respect to the bezier end point.\n            if (t_e > 1) {\n              let d = {\n                x: arc.x + arc.r * cos(arc.e),\n                y: arc.y + arc.r * sin(arc.e),\n              };\n              arc.e += utils.angle({ x: arc.x, y: arc.y }, d, this.get(1));\n            }\n            break;\n          }\n          // if not, move it up by half the iteration distance\n          t_e = t_e + (t_e - t_s) / 2;\n        } else {\n          // this is a bad arc: we need to move 'e' down to find a good arc\n          t_e = t_m;\n        }\n      } while (!done && safety++ < 100);\n\n      if (safety >= 100) {\n        break;\n      }\n\n      // console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n      prev_arc = prev_arc ? prev_arc : arc;\n      circles.push(prev_arc);\n      t_s = prev_e;\n    } while (t_e < 1);\n    return circles;\n  }\n}\n\nexport { Bezier };\n"]},"metadata":{},"sourceType":"module"}