{"ast":null,"code":"import _toConsumableArray from \"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\nimport { utils } from \"./utils.js\";\nimport { PolyBezier } from \"./poly-bezier.js\";\nimport { convertPath } from \"./svg-to-beziers.js\"; // math-inlining.\n\nvar abs = Math.abs,\n    min = Math.min,\n    max = Math.max,\n    cos = Math.cos,\n    sin = Math.sin,\n    acos = Math.acos,\n    sqrt = Math.sqrt;\nvar pi = Math.PI; // a zero coordinate, which is surprisingly useful\n\nvar ZERO = {\n  x: 0,\n  y: 0,\n  z: 0\n};\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\n\nvar Bezier = /*#__PURE__*/function () {\n  function Bezier(coords) {\n    _classCallCheck(this, Bezier);\n\n    var args = coords && coords.forEach ? coords : Array.from(arguments).slice();\n    var coordlen = false;\n\n    if (typeof args[0] === \"object\") {\n      coordlen = args.length;\n      var newargs = [];\n      args.forEach(function (point) {\n        [\"x\", \"y\", \"z\"].forEach(function (d) {\n          if (typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    var higher = false;\n    var len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n      }\n    }\n\n    var _3d = this._3d = !higher && (len === 9 || len === 12) || coords && coords[0] && typeof coords[0].z !== \"undefined\";\n\n    var points = this.points = [];\n\n    for (var idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1]\n      };\n\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n\n      points.push(point);\n    }\n\n    var order = this.order = points.length - 1;\n    var dims = this.dims = [\"x\", \"y\"];\n    if (_3d) dims.push(\"z\");\n    this.dimlen = dims.length;\n    var aligned = utils.align(points, {\n      p1: points[0],\n      p2: points[order]\n    });\n    this._linear = !aligned.some(function (p) {\n      return abs(p.y) > 0.0001;\n    });\n    this._lut = [];\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  _createClass(Bezier, [{\n    key: \"getUtils\",\n    value: function getUtils() {\n      return Bezier.getUtils();\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return utils.pointsToString(this.points);\n    }\n  }, {\n    key: \"toSVG\",\n    value: function toSVG() {\n      if (this._3d) return false;\n      var p = this.points,\n          x = p[0].x,\n          y = p[0].y,\n          s = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\n\n      for (var i = 1, last = p.length; i < last; i++) {\n        s.push(p[i].x);\n        s.push(p[i].y);\n      }\n\n      return s.join(\" \");\n    }\n  }, {\n    key: \"setRatios\",\n    value: function setRatios(ratios) {\n      if (ratios.length !== this.points.length) {\n        throw new Error(\"incorrect number of ratio values\");\n      }\n\n      this.ratios = ratios;\n      this._lut = []; //  invalidate any precomputed LUT\n    }\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var print = this.coordDigest();\n\n      if (print !== this._print) {\n        this._print = print;\n        this.update();\n      }\n    }\n  }, {\n    key: \"coordDigest\",\n    value: function coordDigest() {\n      return this.points.map(function (c, pos) {\n        return \"\" + pos + c.x + c.y + (c.z ? c.z : 0);\n      }).join(\"\");\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      // invalidate any precomputed LUT\n      this._lut = [];\n      this.dpoints = utils.derive(this.points, this._3d);\n      this.computedirection();\n    }\n  }, {\n    key: \"computedirection\",\n    value: function computedirection() {\n      var points = this.points;\n      var angle = utils.angle(points[0], points[this.order], points[1]);\n      this.clockwise = angle > 0;\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return utils.length(this.derivative.bind(this));\n    }\n  }, {\n    key: \"getABC\",\n    value: function getABC(t, B) {\n      B = B || this.get(t);\n      var S = this.points[0];\n      var E = this.points[this.order];\n      return Bezier.getABC(this.order, S, B, E, t);\n    }\n  }, {\n    key: \"getLUT\",\n    value: function getLUT(steps) {\n      this.verify();\n      steps = steps || 100;\n\n      if (this._lut.length === steps) {\n        return this._lut;\n      }\n\n      this._lut = []; // We want a range from 0 to 1 inclusive, so\n      // we decrement and then use <= rather than <:\n\n      steps--;\n\n      for (var i = 0, p, _t; i < steps; i++) {\n        _t = i / (steps - 1);\n        p = this.compute(_t);\n        p.t = _t;\n\n        this._lut.push(p);\n      }\n\n      return this._lut;\n    }\n  }, {\n    key: \"on\",\n    value: function on(point, error) {\n      error = error || 5;\n      var lut = this.getLUT(),\n          hits = [];\n\n      for (var i = 0, c, _t2 = 0; i < lut.length; i++) {\n        c = lut[i];\n\n        if (utils.dist(c, point) < error) {\n          hits.push(c);\n          _t2 += i / lut.length;\n        }\n      }\n\n      if (!hits.length) return false;\n      return t /= hits.length;\n    }\n  }, {\n    key: \"project\",\n    value: function project(point) {\n      // step 1: coarse check\n      var LUT = this.getLUT(),\n          l = LUT.length - 1,\n          closest = utils.closest(LUT, point),\n          mpos = closest.mpos,\n          t1 = (mpos - 1) / l,\n          t2 = (mpos + 1) / l,\n          step = 0.1 / l; // step 2: fine check\n\n      var mdist = closest.mdist,\n          t = t1,\n          ft = t,\n          p;\n      mdist += 1;\n\n      for (var d; t < t2 + step; t += step) {\n        p = this.compute(t);\n        d = utils.dist(point, p);\n\n        if (d < mdist) {\n          mdist = d;\n          ft = t;\n        }\n      }\n\n      ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n      p = this.compute(ft);\n      p.t = ft;\n      p.d = mdist;\n      return p;\n    }\n  }, {\n    key: \"get\",\n    value: function get(t) {\n      return this.compute(t);\n    }\n  }, {\n    key: \"point\",\n    value: function point(idx) {\n      return this.points[idx];\n    }\n  }, {\n    key: \"compute\",\n    value: function compute(t) {\n      if (this.ratios) {\n        return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n      }\n\n      return utils.compute(t, this.points, this._3d, this.ratios);\n    }\n  }, {\n    key: \"raise\",\n    value: function raise() {\n      var p = this.points,\n          np = [p[0]],\n          k = p.length;\n\n      for (var i = 1, _pi, pim; i < k; i++) {\n        _pi = p[i];\n        pim = p[i - 1];\n        np[i] = {\n          x: (k - i) / k * _pi.x + i / k * pim.x,\n          y: (k - i) / k * _pi.y + i / k * pim.y\n        };\n      }\n\n      np[k] = p[k - 1];\n      return new Bezier(np);\n    }\n  }, {\n    key: \"derivative\",\n    value: function derivative(t) {\n      return utils.compute(t, this.dpoints[0]);\n    }\n  }, {\n    key: \"dderivative\",\n    value: function dderivative(t) {\n      return utils.compute(t, this.dpoints[1]);\n    }\n  }, {\n    key: \"align\",\n    value: function align() {\n      var p = this.points;\n      return new Bezier(utils.align(p, {\n        p1: p[0],\n        p2: p[p.length - 1]\n      }));\n    }\n  }, {\n    key: \"curvature\",\n    value: function curvature(t) {\n      return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n    }\n  }, {\n    key: \"inflections\",\n    value: function inflections() {\n      return utils.inflections(this.points);\n    }\n  }, {\n    key: \"normal\",\n    value: function normal(t) {\n      return this._3d ? this.__normal3(t) : this.__normal2(t);\n    }\n  }, {\n    key: \"__normal2\",\n    value: function __normal2(t) {\n      var d = this.derivative(t);\n      var q = sqrt(d.x * d.x + d.y * d.y);\n      return {\n        x: -d.y / q,\n        y: d.x / q\n      };\n    }\n  }, {\n    key: \"__normal3\",\n    value: function __normal3(t) {\n      // see http://stackoverflow.com/questions/25453159\n      var r1 = this.derivative(t),\n          r2 = this.derivative(t + 0.01),\n          q1 = sqrt(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n          q2 = sqrt(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n      r1.x /= q1;\n      r1.y /= q1;\n      r1.z /= q1;\n      r2.x /= q2;\n      r2.y /= q2;\n      r2.z /= q2; // cross product\n\n      var c = {\n        x: r2.y * r1.z - r2.z * r1.y,\n        y: r2.z * r1.x - r2.x * r1.z,\n        z: r2.x * r1.y - r2.y * r1.x\n      };\n      var m = sqrt(c.x * c.x + c.y * c.y + c.z * c.z);\n      c.x /= m;\n      c.y /= m;\n      c.z /= m; // rotation matrix\n\n      var R = [c.x * c.x, c.x * c.y - c.z, c.x * c.z + c.y, c.x * c.y + c.z, c.y * c.y, c.y * c.z - c.x, c.x * c.z - c.y, c.y * c.z + c.x, c.z * c.z]; // normal vector:\n\n      var n = {\n        x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n        y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n        z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z\n      };\n      return n;\n    }\n  }, {\n    key: \"hull\",\n    value: function hull(t) {\n      var p = this.points,\n          _p = [],\n          q = [],\n          idx = 0;\n      q[idx++] = p[0];\n      q[idx++] = p[1];\n      q[idx++] = p[2];\n\n      if (this.order === 3) {\n        q[idx++] = p[3];\n      } // we lerp between all points at each iteration, until we have 1 point left.\n\n\n      while (p.length > 1) {\n        _p = [];\n\n        for (var i = 0, pt, l = p.length - 1; i < l; i++) {\n          pt = utils.lerp(t, p[i], p[i + 1]);\n          q[idx++] = pt;\n\n          _p.push(pt);\n        }\n\n        p = _p;\n      }\n\n      return q;\n    }\n  }, {\n    key: \"split\",\n    value: function split(t1, t2) {\n      // shortcuts\n      if (t1 === 0 && !!t2) {\n        return this.split(t2).left;\n      }\n\n      if (t2 === 1) {\n        return this.split(t1).right;\n      } // no shortcut: use \"de Casteljau\" iteration.\n\n\n      var q = this.hull(t1);\n      var result = {\n        left: this.order === 2 ? new Bezier([q[0], q[3], q[5]]) : new Bezier([q[0], q[4], q[7], q[9]]),\n        right: this.order === 2 ? new Bezier([q[5], q[4], q[2]]) : new Bezier([q[9], q[8], q[6], q[3]]),\n        span: q\n      }; // make sure we bind _t1/_t2 information!\n\n      result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n      result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n      result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n      result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2); // if we have no t2, we're done\n\n      if (!t2) {\n        return result;\n      } // if we have a t2, split again:\n\n\n      t2 = utils.map(t2, t1, 1, 0, 1);\n      return result.right.split(t2).left;\n    }\n  }, {\n    key: \"extrema\",\n    value: function extrema() {\n      var result = {};\n      var roots = [];\n      this.dims.forEach(function (dim) {\n        var mfn = function mfn(v) {\n          return v[dim];\n        };\n\n        var p = this.dpoints[0].map(mfn);\n        result[dim] = utils.droots(p);\n\n        if (this.order === 3) {\n          p = this.dpoints[1].map(mfn);\n          result[dim] = result[dim].concat(utils.droots(p));\n        }\n\n        result[dim] = result[dim].filter(function (t) {\n          return t >= 0 && t <= 1;\n        });\n        roots = roots.concat(result[dim].sort(utils.numberSort));\n      }.bind(this));\n      result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n        return roots.indexOf(v) === idx;\n      });\n      return result;\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      var extrema = this.extrema(),\n          result = {};\n      this.dims.forEach(function (d) {\n        result[d] = utils.getminmax(this, d, extrema[d]);\n      }.bind(this));\n      return result;\n    }\n  }, {\n    key: \"overlaps\",\n    value: function overlaps(curve) {\n      var lbbox = this.bbox(),\n          tbbox = curve.bbox();\n      return utils.bboxoverlap(lbbox, tbbox);\n    }\n  }, {\n    key: \"offset\",\n    value: function offset(t, d) {\n      if (typeof d !== \"undefined\") {\n        var c = this.get(t),\n            n = this.normal(t);\n        var ret = {\n          c: c,\n          n: n,\n          x: c.x + n.x * d,\n          y: c.y + n.y * d\n        };\n\n        if (this._3d) {\n          ret.z = c.z + n.z * d;\n        }\n\n        return ret;\n      }\n\n      if (this._linear) {\n        var nv = this.normal(0),\n            coords = this.points.map(function (p) {\n          var ret = {\n            x: p.x + t * nv.x,\n            y: p.y + t * nv.y\n          };\n\n          if (p.z && nv.z) {\n            ret.z = p.z + t * nv.z;\n          }\n\n          return ret;\n        });\n        return [new Bezier(coords)];\n      }\n\n      return this.reduce().map(function (s) {\n        if (s._linear) {\n          return s.offset(t)[0];\n        }\n\n        return s.scale(t);\n      });\n    }\n  }, {\n    key: \"simple\",\n    value: function simple() {\n      if (this.order === 3) {\n        var a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n        var a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n        if (a1 > 0 && a2 < 0 || a1 < 0 && a2 > 0) return false;\n      }\n\n      var n1 = this.normal(0);\n      var n2 = this.normal(1);\n      var s = n1.x * n2.x + n1.y * n2.y;\n\n      if (this._3d) {\n        s += n1.z * n2.z;\n      }\n\n      return abs(acos(s)) < pi / 3;\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce() {\n      // TODO: examine these var types in more detail...\n      var i,\n          t1 = 0,\n          t2 = 0,\n          step = 0.01,\n          segment,\n          pass1 = [],\n          pass2 = []; // first pass: split on extrema\n\n      var extrema = this.extrema().values;\n\n      if (extrema.indexOf(0) === -1) {\n        extrema = [0].concat(extrema);\n      }\n\n      if (extrema.indexOf(1) === -1) {\n        extrema.push(1);\n      }\n\n      for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n        t2 = extrema[i];\n        segment = this.split(t1, t2);\n        segment._t1 = t1;\n        segment._t2 = t2;\n        pass1.push(segment);\n        t1 = t2;\n      } // second pass: further reduce these segments to simple segments\n\n\n      pass1.forEach(function (p1) {\n        t1 = 0;\n        t2 = 0;\n\n        while (t2 <= 1) {\n          for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n            segment = p1.split(t1, t2);\n\n            if (!segment.simple()) {\n              t2 -= step;\n\n              if (abs(t1 - t2) < step) {\n                // we can never form a reduction\n                return [];\n              }\n\n              segment = p1.split(t1, t2);\n              segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n              segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n              pass2.push(segment);\n              t1 = t2;\n              break;\n            }\n          }\n        }\n\n        if (t1 < 1) {\n          segment = p1.split(t1, 1);\n          segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n          segment._t2 = p1._t2;\n          pass2.push(segment);\n        }\n      });\n      return pass2;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(d) {\n      var _this = this;\n\n      var order = this.order;\n      var distanceFn = false;\n\n      if (typeof d === \"function\") {\n        distanceFn = d;\n      }\n\n      if (distanceFn && order === 2) {\n        return this.raise().scale(distanceFn);\n      } // TODO: add special handling for degenerate (=linear) curves.\n\n\n      var clockwise = this.clockwise;\n      var r1 = distanceFn ? distanceFn(0) : d;\n      var r2 = distanceFn ? distanceFn(1) : d;\n      var v = [this.offset(0, 10), this.offset(1, 10)];\n      var points = this.points;\n      var np = [];\n      var o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n      if (!o) {\n        throw new Error(\"cannot scale this curve. Try reducing it first.\");\n      } // move all points by distance 'd' wrt the origin 'o'\n      // move end points by fixed distance along normal.\n\n\n      [0, 1].forEach(function (t) {\n        var p = np[t * order] = utils.copy(points[t * order]);\n        p.x += (t ? r2 : r1) * v[t].n.x;\n        p.y += (t ? r2 : r1) * v[t].n.y;\n      });\n\n      if (!distanceFn) {\n        // move control points to lie on the intersection of the offset\n        // derivative vector, and the origin-through-control vector\n        [0, 1].forEach(function (t) {\n          if (order === 2 && !!t) return;\n          var p = np[t * order];\n\n          var d = _this.derivative(t);\n\n          var p2 = {\n            x: p.x + d.x,\n            y: p.y + d.y\n          };\n          np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n        });\n        return new Bezier(np);\n      } // move control points by \"however much necessary to\n      // ensure the correct tangent to endpoint\".\n\n\n      [0, 1].forEach(function (t) {\n        if (order === 2 && !!t) return;\n        var p = points[t + 1];\n        var ov = {\n          x: p.x - o.x,\n          y: p.y - o.y\n        };\n        var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n        if (distanceFn && !clockwise) rc = -rc;\n        var m = sqrt(ov.x * ov.x + ov.y * ov.y);\n        ov.x /= m;\n        ov.y /= m;\n        np[t + 1] = {\n          x: p.x + rc * ov.x,\n          y: p.y + rc * ov.y\n        };\n      });\n      return new Bezier(np);\n    }\n  }, {\n    key: \"outline\",\n    value: function outline(d1, d2, d3, d4) {\n      d2 = typeof d2 === \"undefined\" ? d1 : d2;\n      var reduced = this.reduce(),\n          len = reduced.length,\n          fcurves = [];\n      var bcurves = [],\n          p,\n          alen = 0,\n          tlen = this.length();\n      var graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\n\n      function linearDistanceFunction(s, e, tlen, alen, slen) {\n        return function (v) {\n          var f1 = alen / tlen,\n              f2 = (alen + slen) / tlen,\n              d = e - s;\n          return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n        };\n      } // form curve oulines\n\n\n      reduced.forEach(function (segment) {\n        var slen = segment.length();\n\n        if (graduated) {\n          fcurves.push(segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen)));\n          bcurves.push(segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen)));\n        } else {\n          fcurves.push(segment.scale(d1));\n          bcurves.push(segment.scale(-d2));\n        }\n\n        alen += slen;\n      }); // reverse the \"return\" outline\n\n      bcurves = bcurves.map(function (s) {\n        p = s.points;\n\n        if (p[3]) {\n          s.points = [p[3], p[2], p[1], p[0]];\n        } else {\n          s.points = [p[2], p[1], p[0]];\n        }\n\n        return s;\n      }).reverse(); // form the endcaps as lines\n\n      var fs = fcurves[0].points[0],\n          fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n          bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n          be = bcurves[0].points[0],\n          ls = utils.makeline(bs, fs),\n          le = utils.makeline(fe, be),\n          segments = [ls].concat(fcurves).concat([le]).concat(bcurves),\n          slen = segments.length;\n      return new PolyBezier(segments);\n    }\n  }, {\n    key: \"outlineshapes\",\n    value: function outlineshapes(d1, d2, curveIntersectionThreshold) {\n      d2 = d2 || d1;\n      var outline = this.outline(d1, d2).curves;\n      var shapes = [];\n\n      for (var i = 1, _len = outline.length; i < _len / 2; i++) {\n        var shape = utils.makeshape(outline[i], outline[_len - i], curveIntersectionThreshold);\n        shape.startcap.virtual = i > 1;\n        shape.endcap.virtual = i < _len / 2 - 1;\n        shapes.push(shape);\n      }\n\n      return shapes;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(curve, curveIntersectionThreshold) {\n      if (!curve) return this.selfintersects(curveIntersectionThreshold);\n\n      if (curve.p1 && curve.p2) {\n        return this.lineIntersects(curve);\n      }\n\n      if (curve instanceof Bezier) {\n        curve = curve.reduce();\n      }\n\n      return this.curveintersects(this.reduce(), curve, curveIntersectionThreshold);\n    }\n  }, {\n    key: \"lineIntersects\",\n    value: function lineIntersects(line) {\n      var _this2 = this;\n\n      var mx = min(line.p1.x, line.p2.x),\n          my = min(line.p1.y, line.p2.y),\n          MX = max(line.p1.x, line.p2.x),\n          MY = max(line.p1.y, line.p2.y);\n      return utils.roots(this.points, line).filter(function (t) {\n        var p = _this2.get(t);\n\n        return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n      });\n    }\n  }, {\n    key: \"selfintersects\",\n    value: function selfintersects(curveIntersectionThreshold) {\n      // \"simple\" curves cannot intersect with their direct\n      // neighbour, so for each segment X we check whether\n      // it intersects [0:x-2][x+2:last].\n      var reduced = this.reduce(),\n          len = reduced.length - 2,\n          results = [];\n\n      for (var i = 0, result, left, right; i < len; i++) {\n        left = reduced.slice(i, i + 1);\n        right = reduced.slice(i + 2);\n        result = this.curveintersects(left, right, curveIntersectionThreshold);\n        results.push.apply(results, _toConsumableArray(result));\n      }\n\n      return results;\n    }\n  }, {\n    key: \"curveintersects\",\n    value: function curveintersects(c1, c2, curveIntersectionThreshold) {\n      var pairs = []; // step 1: pair off any overlapping segments\n\n      c1.forEach(function (l) {\n        c2.forEach(function (r) {\n          if (l.overlaps(r)) {\n            pairs.push({\n              left: l,\n              right: r\n            });\n          }\n        });\n      }); // step 2: for each pairing, run through the convergence algorithm.\n\n      var intersections = [];\n      pairs.forEach(function (pair) {\n        var result = utils.pairiteration(pair.left, pair.right, curveIntersectionThreshold);\n\n        if (result.length > 0) {\n          intersections = intersections.concat(result);\n        }\n      });\n      return intersections;\n    }\n  }, {\n    key: \"arcs\",\n    value: function arcs(errorThreshold) {\n      errorThreshold = errorThreshold || 0.5;\n      return this._iterate(errorThreshold, []);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(pc, np1, s, e) {\n      var q = (e - s) / 4,\n          c1 = this.get(s + q),\n          c2 = this.get(e - q),\n          ref = utils.dist(pc, np1),\n          d1 = utils.dist(pc, c1),\n          d2 = utils.dist(pc, c2);\n      return abs(d1 - ref) + abs(d2 - ref);\n    }\n  }, {\n    key: \"_iterate\",\n    value: function _iterate(errorThreshold, circles) {\n      var t_s = 0,\n          t_e = 1,\n          safety; // we do a binary search to find the \"good `t` closest to no-longer-good\"\n\n      do {\n        safety = 0; // step 1: start with the maximum possible arc\n\n        t_e = 1; // points:\n\n        var np1 = this.get(t_s),\n            np2 = void 0,\n            np3 = void 0,\n            arc = void 0,\n            prev_arc = void 0; // booleans:\n\n        var curr_good = false,\n            prev_good = false,\n            done = void 0; // numbers:\n\n        var t_m = t_e,\n            prev_e = 1,\n            step = 0; // step 2: find the best possible arc\n\n        do {\n          prev_good = curr_good;\n          prev_arc = arc;\n          t_m = (t_s + t_e) / 2;\n          step++;\n          np2 = this.get(t_m);\n          np3 = this.get(t_e);\n          arc = utils.getccenter(np1, np2, np3); //also save the t values\n\n          arc.interval = {\n            start: t_s,\n            end: t_e\n          };\n\n          var error = this._error(arc, np1, t_s, t_e);\n\n          curr_good = error <= errorThreshold;\n          done = prev_good && !curr_good;\n          if (!done) prev_e = t_e; // this arc is fine: we can move 'e' up to see if we can find a wider arc\n\n          if (curr_good) {\n            // if e is already at max, then we're done for this arc.\n            if (t_e >= 1) {\n              // make sure we cap at t=1\n              arc.interval.end = prev_e = 1;\n              prev_arc = arc; // if we capped the arc segment to t=1 we also need to make sure that\n              // the arc's end angle is correct with respect to the bezier end point.\n\n              if (t_e > 1) {\n                var d = {\n                  x: arc.x + arc.r * cos(arc.e),\n                  y: arc.y + arc.r * sin(arc.e)\n                };\n                arc.e += utils.angle({\n                  x: arc.x,\n                  y: arc.y\n                }, d, this.get(1));\n              }\n\n              break;\n            } // if not, move it up by half the iteration distance\n\n\n            t_e = t_e + (t_e - t_s) / 2;\n          } else {\n            // this is a bad arc: we need to move 'e' down to find a good arc\n            t_e = t_m;\n          }\n        } while (!done && safety++ < 100);\n\n        if (safety >= 100) {\n          break;\n        } // console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n\n        prev_arc = prev_arc ? prev_arc : arc;\n        circles.push(prev_arc);\n        t_s = prev_e;\n      } while (t_e < 1);\n\n      return circles;\n    }\n  }], [{\n    key: \"SVGtoBeziers\",\n    value: function SVGtoBeziers(d) {\n      return convertPath(Bezier, d);\n    }\n  }, {\n    key: \"quadraticFromPoints\",\n    value: function quadraticFromPoints(p1, p2, p3, t) {\n      if (typeof t === \"undefined\") {\n        t = 0.5;\n      } // shortcuts, although they're really dumb\n\n\n      if (t === 0) {\n        return new Bezier(p2, p2, p3);\n      }\n\n      if (t === 1) {\n        return new Bezier(p1, p2, p2);\n      } // real fitting.\n\n\n      var abc = Bezier.getABC(2, p1, p2, p3, t);\n      return new Bezier(p1, abc.A, p3);\n    }\n  }, {\n    key: \"cubicFromPoints\",\n    value: function cubicFromPoints(S, B, E, t, d1) {\n      if (typeof t === \"undefined\") {\n        t = 0.5;\n      }\n\n      var abc = Bezier.getABC(3, S, B, E, t);\n\n      if (typeof d1 === \"undefined\") {\n        d1 = utils.dist(B, abc.C);\n      }\n\n      var d2 = d1 * (1 - t) / t;\n      var selen = utils.dist(S, E),\n          lx = (E.x - S.x) / selen,\n          ly = (E.y - S.y) / selen,\n          bx1 = d1 * lx,\n          by1 = d1 * ly,\n          bx2 = d2 * lx,\n          by2 = d2 * ly; // derivation of new hull coordinates\n\n      var e1 = {\n        x: B.x - bx1,\n        y: B.y - by1\n      },\n          e2 = {\n        x: B.x + bx2,\n        y: B.y + by2\n      },\n          A = abc.A,\n          v1 = {\n        x: A.x + (e1.x - A.x) / (1 - t),\n        y: A.y + (e1.y - A.y) / (1 - t)\n      },\n          v2 = {\n        x: A.x + (e2.x - A.x) / t,\n        y: A.y + (e2.y - A.y) / t\n      },\n          nc1 = {\n        x: S.x + (v1.x - S.x) / t,\n        y: S.y + (v1.y - S.y) / t\n      },\n          nc2 = {\n        x: E.x + (v2.x - E.x) / (1 - t),\n        y: E.y + (v2.y - E.y) / (1 - t)\n      }; // ...done\n\n      return new Bezier(S, nc1, nc2, E);\n    }\n  }, {\n    key: \"getUtils\",\n    value: function getUtils() {\n      return utils;\n    }\n  }, {\n    key: \"getABC\",\n    value: function getABC() {\n      var order = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      var S = arguments.length > 1 ? arguments[1] : undefined;\n      var B = arguments.length > 2 ? arguments[2] : undefined;\n      var E = arguments.length > 3 ? arguments[3] : undefined;\n      var t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n      var u = utils.projectionratio(t, order),\n          um = 1 - u,\n          C = {\n        x: u * S.x + um * E.x,\n        y: u * S.y + um * E.y\n      },\n          s = utils.abcratio(t, order),\n          A = {\n        x: B.x + (B.x - C.x) / s,\n        y: B.y + (B.y - C.y) / s\n      };\n      return {\n        A: A,\n        B: B,\n        C: C,\n        S: S,\n        E: E\n      };\n    }\n  }, {\n    key: \"PolyBezier\",\n    get: function get() {\n      return PolyBezier;\n    }\n  }]);\n\n  return Bezier;\n}();\n\nexport { Bezier };","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/bezier-js/lib/bezier.js"],"names":["utils","PolyBezier","convertPath","abs","Math","min","max","cos","sin","acos","sqrt","pi","PI","ZERO","x","y","z","Bezier","coords","args","forEach","Array","from","arguments","slice","coordlen","length","newargs","point","d","push","higher","len","Error","_3d","points","idx","step","order","dims","dimlen","aligned","align","p1","p2","_linear","some","p","_lut","_t1","_t2","update","getUtils","toString","pointsToString","s","i","last","join","ratios","print","coordDigest","_print","map","c","pos","dpoints","derive","computedirection","angle","clockwise","derivative","bind","t","B","get","S","E","getABC","steps","verify","compute","error","lut","getLUT","hits","dist","LUT","l","closest","mpos","t1","t2","mdist","ft","computeWithRatios","np","k","pim","curvature","inflections","__normal3","__normal2","q","r1","r2","q1","q2","m","R","n","_p","pt","lerp","split","left","right","hull","result","span","roots","dim","mfn","v","droots","concat","filter","sort","numberSort","values","indexOf","extrema","getminmax","curve","lbbox","bbox","tbbox","bboxoverlap","normal","ret","nv","reduce","offset","scale","a1","a2","n1","n2","segment","pass1","pass2","simple","distanceFn","raise","o","lli4","copy","ov","rc","d1","d2","d3","d4","reduced","fcurves","bcurves","alen","tlen","graduated","linearDistanceFunction","e","slen","f1","f2","reverse","fs","fe","bs","be","ls","makeline","le","segments","curveIntersectionThreshold","outline","curves","shapes","shape","makeshape","startcap","virtual","endcap","selfintersects","lineIntersects","curveintersects","line","mx","my","MX","MY","between","results","c1","c2","pairs","r","overlaps","intersections","pair","pairiteration","errorThreshold","_iterate","pc","np1","ref","circles","t_s","t_e","safety","np2","np3","arc","prev_arc","curr_good","prev_good","done","t_m","prev_e","getccenter","interval","start","end","_error","p3","abc","A","C","selen","lx","ly","bx1","by1","bx2","by2","e1","e2","v1","v2","nc1","nc2","u","projectionratio","um","abcratio"],"mappings":"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","sourcesContent":["/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\n\nimport { utils } from \"./utils.js\";\nimport { PolyBezier } from \"./poly-bezier.js\";\nimport { convertPath } from \"./svg-to-beziers.js\";\n\n// math-inlining.\nconst { abs, min, max, cos, sin, acos, sqrt } = Math;\nconst pi = Math.PI;\n// a zero coordinate, which is surprisingly useful\nconst ZERO = { x: 0, y: 0, z: 0 };\n\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\nclass Bezier {\n  constructor(coords) {\n    let args =\n      coords && coords.forEach ? coords : Array.from(arguments).slice();\n    let coordlen = false;\n\n    if (typeof args[0] === \"object\") {\n      coordlen = args.length;\n      const newargs = [];\n      args.forEach(function (point) {\n        [\"x\", \"y\", \"z\"].forEach(function (d) {\n          if (typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    let higher = false;\n    const len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\n          );\n        }\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\n          );\n        }\n      }\n    }\n\n    const _3d = (this._3d =\n      (!higher && (len === 9 || len === 12)) ||\n      (coords && coords[0] && typeof coords[0].z !== \"undefined\"));\n\n    const points = (this.points = []);\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1],\n      };\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n      points.push(point);\n    }\n    const order = (this.order = points.length - 1);\n\n    const dims = (this.dims = [\"x\", \"y\"]);\n    if (_3d) dims.push(\"z\");\n    this.dimlen = dims.length;\n\n    const aligned = utils.align(points, { p1: points[0], p2: points[order] });\n    this._linear = !aligned.some((p) => abs(p.y) > 0.0001);\n\n    this._lut = [];\n\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  static SVGtoBeziers(d) {\n    return convertPath(Bezier, d);\n  }\n\n  static quadraticFromPoints(p1, p2, p3, t) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n    // shortcuts, although they're really dumb\n    if (t === 0) {\n      return new Bezier(p2, p2, p3);\n    }\n    if (t === 1) {\n      return new Bezier(p1, p2, p2);\n    }\n    // real fitting.\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\n    return new Bezier(p1, abc.A, p3);\n  }\n\n  static cubicFromPoints(S, B, E, t, d1) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n    const abc = Bezier.getABC(3, S, B, E, t);\n    if (typeof d1 === \"undefined\") {\n      d1 = utils.dist(B, abc.C);\n    }\n    const d2 = (d1 * (1 - t)) / t;\n\n    const selen = utils.dist(S, E),\n      lx = (E.x - S.x) / selen,\n      ly = (E.y - S.y) / selen,\n      bx1 = d1 * lx,\n      by1 = d1 * ly,\n      bx2 = d2 * lx,\n      by2 = d2 * ly;\n    // derivation of new hull coordinates\n    const e1 = { x: B.x - bx1, y: B.y - by1 },\n      e2 = { x: B.x + bx2, y: B.y + by2 },\n      A = abc.A,\n      v1 = { x: A.x + (e1.x - A.x) / (1 - t), y: A.y + (e1.y - A.y) / (1 - t) },\n      v2 = { x: A.x + (e2.x - A.x) / t, y: A.y + (e2.y - A.y) / t },\n      nc1 = { x: S.x + (v1.x - S.x) / t, y: S.y + (v1.y - S.y) / t },\n      nc2 = {\n        x: E.x + (v2.x - E.x) / (1 - t),\n        y: E.y + (v2.y - E.y) / (1 - t),\n      };\n    // ...done\n    return new Bezier(S, nc1, nc2, E);\n  }\n\n  static getUtils() {\n    return utils;\n  }\n\n  getUtils() {\n    return Bezier.getUtils();\n  }\n\n  static get PolyBezier() {\n    return PolyBezier;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return utils.pointsToString(this.points);\n  }\n\n  toSVG() {\n    if (this._3d) return false;\n    const p = this.points,\n      x = p[0].x,\n      y = p[0].y,\n      s = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\n    for (let i = 1, last = p.length; i < last; i++) {\n      s.push(p[i].x);\n      s.push(p[i].y);\n    }\n    return s.join(\" \");\n  }\n\n  setRatios(ratios) {\n    if (ratios.length !== this.points.length) {\n      throw new Error(\"incorrect number of ratio values\");\n    }\n    this.ratios = ratios;\n    this._lut = []; //  invalidate any precomputed LUT\n  }\n\n  verify() {\n    const print = this.coordDigest();\n    if (print !== this._print) {\n      this._print = print;\n      this.update();\n    }\n  }\n\n  coordDigest() {\n    return this.points\n      .map(function (c, pos) {\n        return \"\" + pos + c.x + c.y + (c.z ? c.z : 0);\n      })\n      .join(\"\");\n  }\n\n  update() {\n    // invalidate any precomputed LUT\n    this._lut = [];\n    this.dpoints = utils.derive(this.points, this._3d);\n    this.computedirection();\n  }\n\n  computedirection() {\n    const points = this.points;\n    const angle = utils.angle(points[0], points[this.order], points[1]);\n    this.clockwise = angle > 0;\n  }\n\n  length() {\n    return utils.length(this.derivative.bind(this));\n  }\n\n  static getABC(order = 2, S, B, E, t = 0.5) {\n    const u = utils.projectionratio(t, order),\n      um = 1 - u,\n      C = {\n        x: u * S.x + um * E.x,\n        y: u * S.y + um * E.y,\n      },\n      s = utils.abcratio(t, order),\n      A = {\n        x: B.x + (B.x - C.x) / s,\n        y: B.y + (B.y - C.y) / s,\n      };\n    return { A, B, C, S, E };\n  }\n\n  getABC(t, B) {\n    B = B || this.get(t);\n    let S = this.points[0];\n    let E = this.points[this.order];\n    return Bezier.getABC(this.order, S, B, E, t);\n  }\n\n  getLUT(steps) {\n    this.verify();\n    steps = steps || 100;\n    if (this._lut.length === steps) {\n      return this._lut;\n    }\n    this._lut = [];\n    // We want a range from 0 to 1 inclusive, so\n    // we decrement and then use <= rather than <:\n    steps--;\n    for (let i = 0, p, t; i < steps; i++) {\n      t = i / (steps - 1);\n      p = this.compute(t);\n      p.t = t;\n      this._lut.push(p);\n    }\n    return this._lut;\n  }\n\n  on(point, error) {\n    error = error || 5;\n    const lut = this.getLUT(),\n      hits = [];\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\n      c = lut[i];\n      if (utils.dist(c, point) < error) {\n        hits.push(c);\n        t += i / lut.length;\n      }\n    }\n    if (!hits.length) return false;\n    return (t /= hits.length);\n  }\n\n  project(point) {\n    // step 1: coarse check\n    const LUT = this.getLUT(),\n      l = LUT.length - 1,\n      closest = utils.closest(LUT, point),\n      mpos = closest.mpos,\n      t1 = (mpos - 1) / l,\n      t2 = (mpos + 1) / l,\n      step = 0.1 / l;\n\n    // step 2: fine check\n    let mdist = closest.mdist,\n      t = t1,\n      ft = t,\n      p;\n    mdist += 1;\n    for (let d; t < t2 + step; t += step) {\n      p = this.compute(t);\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        ft = t;\n      }\n    }\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n    p = this.compute(ft);\n    p.t = ft;\n    p.d = mdist;\n    return p;\n  }\n\n  get(t) {\n    return this.compute(t);\n  }\n\n  point(idx) {\n    return this.points[idx];\n  }\n\n  compute(t) {\n    if (this.ratios) {\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n    }\n    return utils.compute(t, this.points, this._3d, this.ratios);\n  }\n\n  raise() {\n    const p = this.points,\n      np = [p[0]],\n      k = p.length;\n    for (let i = 1, pi, pim; i < k; i++) {\n      pi = p[i];\n      pim = p[i - 1];\n      np[i] = {\n        x: ((k - i) / k) * pi.x + (i / k) * pim.x,\n        y: ((k - i) / k) * pi.y + (i / k) * pim.y,\n      };\n    }\n    np[k] = p[k - 1];\n    return new Bezier(np);\n  }\n\n  derivative(t) {\n    return utils.compute(t, this.dpoints[0]);\n  }\n\n  dderivative(t) {\n    return utils.compute(t, this.dpoints[1]);\n  }\n\n  align() {\n    let p = this.points;\n    return new Bezier(utils.align(p, { p1: p[0], p2: p[p.length - 1] }));\n  }\n\n  curvature(t) {\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n  }\n\n  inflections() {\n    return utils.inflections(this.points);\n  }\n\n  normal(t) {\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\n  }\n\n  __normal2(t) {\n    const d = this.derivative(t);\n    const q = sqrt(d.x * d.x + d.y * d.y);\n    return { x: -d.y / q, y: d.x / q };\n  }\n\n  __normal3(t) {\n    // see http://stackoverflow.com/questions/25453159\n    const r1 = this.derivative(t),\n      r2 = this.derivative(t + 0.01),\n      q1 = sqrt(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n      q2 = sqrt(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n    r1.x /= q1;\n    r1.y /= q1;\n    r1.z /= q1;\n    r2.x /= q2;\n    r2.y /= q2;\n    r2.z /= q2;\n    // cross product\n    const c = {\n      x: r2.y * r1.z - r2.z * r1.y,\n      y: r2.z * r1.x - r2.x * r1.z,\n      z: r2.x * r1.y - r2.y * r1.x,\n    };\n    const m = sqrt(c.x * c.x + c.y * c.y + c.z * c.z);\n    c.x /= m;\n    c.y /= m;\n    c.z /= m;\n    // rotation matrix\n    const R = [\n      c.x * c.x,\n      c.x * c.y - c.z,\n      c.x * c.z + c.y,\n      c.x * c.y + c.z,\n      c.y * c.y,\n      c.y * c.z - c.x,\n      c.x * c.z - c.y,\n      c.y * c.z + c.x,\n      c.z * c.z,\n    ];\n    // normal vector:\n    const n = {\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z,\n    };\n    return n;\n  }\n\n  hull(t) {\n    let p = this.points,\n      _p = [],\n      q = [],\n      idx = 0;\n    q[idx++] = p[0];\n    q[idx++] = p[1];\n    q[idx++] = p[2];\n    if (this.order === 3) {\n      q[idx++] = p[3];\n    }\n    // we lerp between all points at each iteration, until we have 1 point left.\n    while (p.length > 1) {\n      _p = [];\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\n        pt = utils.lerp(t, p[i], p[i + 1]);\n        q[idx++] = pt;\n        _p.push(pt);\n      }\n      p = _p;\n    }\n    return q;\n  }\n\n  split(t1, t2) {\n    // shortcuts\n    if (t1 === 0 && !!t2) {\n      return this.split(t2).left;\n    }\n    if (t2 === 1) {\n      return this.split(t1).right;\n    }\n\n    // no shortcut: use \"de Casteljau\" iteration.\n    const q = this.hull(t1);\n    const result = {\n      left:\n        this.order === 2\n          ? new Bezier([q[0], q[3], q[5]])\n          : new Bezier([q[0], q[4], q[7], q[9]]),\n      right:\n        this.order === 2\n          ? new Bezier([q[5], q[4], q[2]])\n          : new Bezier([q[9], q[8], q[6], q[3]]),\n      span: q,\n    };\n\n    // make sure we bind _t1/_t2 information!\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);\n\n    // if we have no t2, we're done\n    if (!t2) {\n      return result;\n    }\n\n    // if we have a t2, split again:\n    t2 = utils.map(t2, t1, 1, 0, 1);\n    return result.right.split(t2).left;\n  }\n\n  extrema() {\n    const result = {};\n    let roots = [];\n\n    this.dims.forEach(\n      function (dim) {\n        let mfn = function (v) {\n          return v[dim];\n        };\n        let p = this.dpoints[0].map(mfn);\n        result[dim] = utils.droots(p);\n        if (this.order === 3) {\n          p = this.dpoints[1].map(mfn);\n          result[dim] = result[dim].concat(utils.droots(p));\n        }\n        result[dim] = result[dim].filter(function (t) {\n          return t >= 0 && t <= 1;\n        });\n        roots = roots.concat(result[dim].sort(utils.numberSort));\n      }.bind(this)\n    );\n\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n      return roots.indexOf(v) === idx;\n    });\n\n    return result;\n  }\n\n  bbox() {\n    const extrema = this.extrema(),\n      result = {};\n    this.dims.forEach(\n      function (d) {\n        result[d] = utils.getminmax(this, d, extrema[d]);\n      }.bind(this)\n    );\n    return result;\n  }\n\n  overlaps(curve) {\n    const lbbox = this.bbox(),\n      tbbox = curve.bbox();\n    return utils.bboxoverlap(lbbox, tbbox);\n  }\n\n  offset(t, d) {\n    if (typeof d !== \"undefined\") {\n      const c = this.get(t),\n        n = this.normal(t);\n      const ret = {\n        c: c,\n        n: n,\n        x: c.x + n.x * d,\n        y: c.y + n.y * d,\n      };\n      if (this._3d) {\n        ret.z = c.z + n.z * d;\n      }\n      return ret;\n    }\n    if (this._linear) {\n      const nv = this.normal(0),\n        coords = this.points.map(function (p) {\n          const ret = {\n            x: p.x + t * nv.x,\n            y: p.y + t * nv.y,\n          };\n          if (p.z && nv.z) {\n            ret.z = p.z + t * nv.z;\n          }\n          return ret;\n        });\n      return [new Bezier(coords)];\n    }\n    return this.reduce().map(function (s) {\n      if (s._linear) {\n        return s.offset(t)[0];\n      }\n      return s.scale(t);\n    });\n  }\n\n  simple() {\n    if (this.order === 3) {\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n      if ((a1 > 0 && a2 < 0) || (a1 < 0 && a2 > 0)) return false;\n    }\n    const n1 = this.normal(0);\n    const n2 = this.normal(1);\n    let s = n1.x * n2.x + n1.y * n2.y;\n    if (this._3d) {\n      s += n1.z * n2.z;\n    }\n    return abs(acos(s)) < pi / 3;\n  }\n\n  reduce() {\n    // TODO: examine these var types in more detail...\n    let i,\n      t1 = 0,\n      t2 = 0,\n      step = 0.01,\n      segment,\n      pass1 = [],\n      pass2 = [];\n    // first pass: split on extrema\n    let extrema = this.extrema().values;\n    if (extrema.indexOf(0) === -1) {\n      extrema = [0].concat(extrema);\n    }\n    if (extrema.indexOf(1) === -1) {\n      extrema.push(1);\n    }\n\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n      t2 = extrema[i];\n      segment = this.split(t1, t2);\n      segment._t1 = t1;\n      segment._t2 = t2;\n      pass1.push(segment);\n      t1 = t2;\n    }\n\n    // second pass: further reduce these segments to simple segments\n    pass1.forEach(function (p1) {\n      t1 = 0;\n      t2 = 0;\n      while (t2 <= 1) {\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n          segment = p1.split(t1, t2);\n          if (!segment.simple()) {\n            t2 -= step;\n            if (abs(t1 - t2) < step) {\n              // we can never form a reduction\n              return [];\n            }\n            segment = p1.split(t1, t2);\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n            pass2.push(segment);\n            t1 = t2;\n            break;\n          }\n        }\n      }\n      if (t1 < 1) {\n        segment = p1.split(t1, 1);\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n        segment._t2 = p1._t2;\n        pass2.push(segment);\n      }\n    });\n    return pass2;\n  }\n\n  scale(d) {\n    const order = this.order;\n    let distanceFn = false;\n    if (typeof d === \"function\") {\n      distanceFn = d;\n    }\n    if (distanceFn && order === 2) {\n      return this.raise().scale(distanceFn);\n    }\n\n    // TODO: add special handling for degenerate (=linear) curves.\n    const clockwise = this.clockwise;\n    const r1 = distanceFn ? distanceFn(0) : d;\n    const r2 = distanceFn ? distanceFn(1) : d;\n    const v = [this.offset(0, 10), this.offset(1, 10)];\n    const points = this.points;\n    const np = [];\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n    if (!o) {\n      throw new Error(\"cannot scale this curve. Try reducing it first.\");\n    }\n    // move all points by distance 'd' wrt the origin 'o'\n\n    // move end points by fixed distance along normal.\n    [0, 1].forEach(function (t) {\n      const p = (np[t * order] = utils.copy(points[t * order]));\n      p.x += (t ? r2 : r1) * v[t].n.x;\n      p.y += (t ? r2 : r1) * v[t].n.y;\n    });\n\n    if (!distanceFn) {\n      // move control points to lie on the intersection of the offset\n      // derivative vector, and the origin-through-control vector\n      [0, 1].forEach((t) => {\n        if (order === 2 && !!t) return;\n        const p = np[t * order];\n        const d = this.derivative(t);\n        const p2 = { x: p.x + d.x, y: p.y + d.y };\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n      });\n      return new Bezier(np);\n    }\n\n    // move control points by \"however much necessary to\n    // ensure the correct tangent to endpoint\".\n    [0, 1].forEach(function (t) {\n      if (order === 2 && !!t) return;\n      var p = points[t + 1];\n      var ov = {\n        x: p.x - o.x,\n        y: p.y - o.y,\n      };\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n      if (distanceFn && !clockwise) rc = -rc;\n      var m = sqrt(ov.x * ov.x + ov.y * ov.y);\n      ov.x /= m;\n      ov.y /= m;\n      np[t + 1] = {\n        x: p.x + rc * ov.x,\n        y: p.y + rc * ov.y,\n      };\n    });\n    return new Bezier(np);\n  }\n\n  outline(d1, d2, d3, d4) {\n    d2 = typeof d2 === \"undefined\" ? d1 : d2;\n    const reduced = this.reduce(),\n      len = reduced.length,\n      fcurves = [];\n\n    let bcurves = [],\n      p,\n      alen = 0,\n      tlen = this.length();\n\n    const graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\n\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\n      return function (v) {\n        const f1 = alen / tlen,\n          f2 = (alen + slen) / tlen,\n          d = e - s;\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n      };\n    }\n\n    // form curve oulines\n    reduced.forEach(function (segment) {\n      const slen = segment.length();\n      if (graduated) {\n        fcurves.push(\n          segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen))\n        );\n        bcurves.push(\n          segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen))\n        );\n      } else {\n        fcurves.push(segment.scale(d1));\n        bcurves.push(segment.scale(-d2));\n      }\n      alen += slen;\n    });\n\n    // reverse the \"return\" outline\n    bcurves = bcurves\n      .map(function (s) {\n        p = s.points;\n        if (p[3]) {\n          s.points = [p[3], p[2], p[1], p[0]];\n        } else {\n          s.points = [p[2], p[1], p[0]];\n        }\n        return s;\n      })\n      .reverse();\n\n    // form the endcaps as lines\n    const fs = fcurves[0].points[0],\n      fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n      bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n      be = bcurves[0].points[0],\n      ls = utils.makeline(bs, fs),\n      le = utils.makeline(fe, be),\n      segments = [ls].concat(fcurves).concat([le]).concat(bcurves),\n      slen = segments.length;\n\n    return new PolyBezier(segments);\n  }\n\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\n    d2 = d2 || d1;\n    const outline = this.outline(d1, d2).curves;\n    const shapes = [];\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\n      const shape = utils.makeshape(\n        outline[i],\n        outline[len - i],\n        curveIntersectionThreshold\n      );\n      shape.startcap.virtual = i > 1;\n      shape.endcap.virtual = i < len / 2 - 1;\n      shapes.push(shape);\n    }\n    return shapes;\n  }\n\n  intersects(curve, curveIntersectionThreshold) {\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\n    if (curve.p1 && curve.p2) {\n      return this.lineIntersects(curve);\n    }\n    if (curve instanceof Bezier) {\n      curve = curve.reduce();\n    }\n    return this.curveintersects(\n      this.reduce(),\n      curve,\n      curveIntersectionThreshold\n    );\n  }\n\n  lineIntersects(line) {\n    const mx = min(line.p1.x, line.p2.x),\n      my = min(line.p1.y, line.p2.y),\n      MX = max(line.p1.x, line.p2.x),\n      MY = max(line.p1.y, line.p2.y);\n    return utils.roots(this.points, line).filter((t) => {\n      var p = this.get(t);\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n    });\n  }\n\n  selfintersects(curveIntersectionThreshold) {\n    // \"simple\" curves cannot intersect with their direct\n    // neighbour, so for each segment X we check whether\n    // it intersects [0:x-2][x+2:last].\n\n    const reduced = this.reduce(),\n      len = reduced.length - 2,\n      results = [];\n\n    for (let i = 0, result, left, right; i < len; i++) {\n      left = reduced.slice(i, i + 1);\n      right = reduced.slice(i + 2);\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\n      results.push(...result);\n    }\n    return results;\n  }\n\n  curveintersects(c1, c2, curveIntersectionThreshold) {\n    const pairs = [];\n    // step 1: pair off any overlapping segments\n    c1.forEach(function (l) {\n      c2.forEach(function (r) {\n        if (l.overlaps(r)) {\n          pairs.push({ left: l, right: r });\n        }\n      });\n    });\n    // step 2: for each pairing, run through the convergence algorithm.\n    let intersections = [];\n    pairs.forEach(function (pair) {\n      const result = utils.pairiteration(\n        pair.left,\n        pair.right,\n        curveIntersectionThreshold\n      );\n      if (result.length > 0) {\n        intersections = intersections.concat(result);\n      }\n    });\n    return intersections;\n  }\n\n  arcs(errorThreshold) {\n    errorThreshold = errorThreshold || 0.5;\n    return this._iterate(errorThreshold, []);\n  }\n\n  _error(pc, np1, s, e) {\n    const q = (e - s) / 4,\n      c1 = this.get(s + q),\n      c2 = this.get(e - q),\n      ref = utils.dist(pc, np1),\n      d1 = utils.dist(pc, c1),\n      d2 = utils.dist(pc, c2);\n    return abs(d1 - ref) + abs(d2 - ref);\n  }\n\n  _iterate(errorThreshold, circles) {\n    let t_s = 0,\n      t_e = 1,\n      safety;\n    // we do a binary search to find the \"good `t` closest to no-longer-good\"\n    do {\n      safety = 0;\n\n      // step 1: start with the maximum possible arc\n      t_e = 1;\n\n      // points:\n      let np1 = this.get(t_s),\n        np2,\n        np3,\n        arc,\n        prev_arc;\n\n      // booleans:\n      let curr_good = false,\n        prev_good = false,\n        done;\n\n      // numbers:\n      let t_m = t_e,\n        prev_e = 1,\n        step = 0;\n\n      // step 2: find the best possible arc\n      do {\n        prev_good = curr_good;\n        prev_arc = arc;\n        t_m = (t_s + t_e) / 2;\n        step++;\n\n        np2 = this.get(t_m);\n        np3 = this.get(t_e);\n\n        arc = utils.getccenter(np1, np2, np3);\n\n        //also save the t values\n        arc.interval = {\n          start: t_s,\n          end: t_e,\n        };\n\n        let error = this._error(arc, np1, t_s, t_e);\n        curr_good = error <= errorThreshold;\n\n        done = prev_good && !curr_good;\n        if (!done) prev_e = t_e;\n\n        // this arc is fine: we can move 'e' up to see if we can find a wider arc\n        if (curr_good) {\n          // if e is already at max, then we're done for this arc.\n          if (t_e >= 1) {\n            // make sure we cap at t=1\n            arc.interval.end = prev_e = 1;\n            prev_arc = arc;\n            // if we capped the arc segment to t=1 we also need to make sure that\n            // the arc's end angle is correct with respect to the bezier end point.\n            if (t_e > 1) {\n              let d = {\n                x: arc.x + arc.r * cos(arc.e),\n                y: arc.y + arc.r * sin(arc.e),\n              };\n              arc.e += utils.angle({ x: arc.x, y: arc.y }, d, this.get(1));\n            }\n            break;\n          }\n          // if not, move it up by half the iteration distance\n          t_e = t_e + (t_e - t_s) / 2;\n        } else {\n          // this is a bad arc: we need to move 'e' down to find a good arc\n          t_e = t_m;\n        }\n      } while (!done && safety++ < 100);\n\n      if (safety >= 100) {\n        break;\n      }\n\n      // console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n      prev_arc = prev_arc ? prev_arc : arc;\n      circles.push(prev_arc);\n      t_s = prev_e;\n    } while (t_e < 1);\n    return circles;\n  }\n}\n\nexport { Bezier };\n"]},"metadata":{},"sourceType":"module"}