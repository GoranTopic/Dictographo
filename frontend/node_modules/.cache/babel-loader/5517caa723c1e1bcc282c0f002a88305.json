{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/NavBar.js\";\nimport React from 'react';\nimport { processNode, isWordNotFound, requestAdjecentNodes } from '../node_functions';\nimport { colors, API_ENDPOINT } from \"../myConfig\";\nimport { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSlidersH } from '@fortawesome/free-solid-svg-icons';\n/*\n * =======================================\n *      NavBar Componente for React \n * =======================================\n * \t Using ReaactBootStrap to render the navbar\n */\n\nfunction NavBarContainer({\n  state,\n  dispatchState\n}) {\n  // handle the change by seting the state variable to \n  const handleSearchChange = change => dispatchState({\n    type: 'SET_SEARCH_TERM',\n    payload: change.target.value\n  });\n\n  const queryNewWord = word => {\n    /* reset the graph state and start a new query into a word, \n     * sometime this stymes when it is called a second time,\n     * this might be because of dispatchState being called twice\n     * must investigate.\n     */\n    fetch(API_ENDPOINT + word) // unpack json\n    .then(result => result.json()).then(result => isWordNotFound(result)).then(result => processNode(result)).then(node => {\n      dispatchState({\n        type: 'SET_SEARCH_NODE',\n        payload: node\n      });\n      return node;\n    }).then(node => requestAdjecentNodes(node, state, dispatchState)).catch(() => dispatchState({\n      type: 'SET_FETCH_FAILED'\n    }));\n  };\n\n  const handleSearchSubmit = () => {\n    /* handle submit search button */\n    //console.log(state.search) very conviente\n    // set all serches to lowercase\n    let searchInput = state.searchTerm.toLowerCase();\n    queryNewWord(searchInput);\n  };\n\n  const handleToggleDeepLinks = () => {\n    /* hangles the toggle of the deep links, \n     * resets the graph if there is already a \n     * selected node\n     */\n    let selectedNode = state.selected;\n    console.log(selectedNode);\n    if (!state.isEmpty) queryNewWord(selectedNode);\n    dispatchState({\n      type: 'TOGGLE_DEEP_LINKS'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Navbar, {\n    expand: \"lg\",\n    className: \"justify-content-center\",\n    variant: \"dark\",\n    style: {\n      backgroundColor: colors.black\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"index.html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/logo.png\",\n    width: \"150\",\n    height: \"70\",\n    alt: \"React Bootstrap logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Navbar.Brand, {\n    href: \"index.html\",\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Dictographo\")), /*#__PURE__*/React.createElement(InputGroup, {\n    size: \"lg\",\n    md: \"auto\",\n    className: \"mx-3\",\n    style: {\n      maxWidth: \"600px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    size: \"lg\",\n    as: \"input\",\n    type: \"text\",\n    placeholder: \"Word  second Word\",\n    value: state.searchTerm,\n    onChange: handleSearchChange,\n    onKeyPress: event => event.key === \"Enter\" && handleSearchSubmit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"lg\",\n    variant: \"outline-info\",\n    onClick: handleSearchSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"Search\"))), /*#__PURE__*/React.createElement(Navbar.Collapse, {\n    id: \"basic-navbar-nav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Nav, {\n    className: \"ml-auto mx-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NavDropdown, {\n    variant: \"dark\",\n    size: \"lg\",\n    title: \"Options\",\n    icon: /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSlidersH,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }),\n    id: \"basic-nav-dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(NavDropdown.Item, {\n    href: \"#action/3.1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"Action\"), /*#__PURE__*/React.createElement(NavDropdown.Item, {\n    href: \"#action/3.2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"Another action\"), /*#__PURE__*/React.createElement(NavDropdown.Item, {\n    href: \"#action/3.3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Something\"), /*#__PURE__*/React.createElement(NavDropdown.Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"switch\",\n    id: \"custom-switch\",\n    label: \"Deep Links\",\n    value: state.isDeepLinks,\n    onChange: handleToggleDeepLinks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default NavBarContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/NavBar.js"],"names":["React","processNode","isWordNotFound","requestAdjecentNodes","colors","API_ENDPOINT","Nav","Navbar","NavDropdown","Form","FormControl","Button","InputGroup","FontAwesomeIcon","faSlidersH","NavBarContainer","state","dispatchState","handleSearchChange","change","type","payload","target","value","queryNewWord","word","fetch","then","result","json","node","catch","handleSearchSubmit","searchInput","searchTerm","toLowerCase","handleToggleDeepLinks","selectedNode","selected","console","log","isEmpty","backgroundColor","black","maxWidth","event","key","isDeepLinks"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport { processNode, isWordNotFound, requestAdjecentNodes } from '../node_functions';\nimport { colors, API_ENDPOINT,  }  from \"../myConfig\";\nimport { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\nimport { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\n/*\n * =======================================\n *      NavBar Componente for React \n * =======================================\n * \t Using ReaactBootStrap to render the navbar\n */\n\nfunction NavBarContainer({ state, dispatchState }){\n\n\t\t// handle the change by seting the state variable to \n\t\tconst handleSearchChange = change => dispatchState({ type: 'SET_SEARCH_TERM', payload: change.target.value });\n\n\t\tconst queryNewWord = (word) => {\n\t\t\t\t/* reset the graph state and start a new query into a word, \n\t\t\t\t * sometime this stymes when it is called a second time,\n\t\t\t\t * this might be because of dispatchState being called twice\n\t\t\t\t * must investigate.\n\t\t\t\t */\n\t\t\t\tfetch(API_ENDPOINT + word)\n\t\t\t\t// unpack json\n\t\t\t\t\t\t.then(result => result.json())\n\t\t\t\t\t\t.then(result => isWordNotFound(result))\n\t\t\t\t\t\t.then(result => processNode(result))\n\t\t\t\t\t\t.then(node => { \n\t\t\t\t\t\t\t\tdispatchState({type: 'SET_SEARCH_NODE', payload: node}); \n\t\t\t\t\t\t\t\treturn node; })\n\t\t\t\t\t\t.then(node => requestAdjecentNodes(node, state, dispatchState))\n\t\t\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}));\n\t\t}\n\n\t\tconst handleSearchSubmit = () =>  {\n\t\t\t\t/* handle submit search button */\n\t\t\t\t//console.log(state.search) very conviente\n\t\t\t\t// set all serches to lowercase\n\t\t\t\tlet searchInput = state.searchTerm.toLowerCase();\n\t\t\t\tqueryNewWord(searchInput);\n\t\t}\n\n\t\tconst handleToggleDeepLinks = () => {\n\t\t\t\t/* hangles the toggle of the deep links, \n\t\t\t\t * resets the graph if there is already a \n\t\t\t\t * selected node\n\t\t\t\t */\n\t\t\t\tlet selectedNode = state.selected;\n\t\t\t\tconsole.log(selectedNode)\n\t\t\t\tif(!state.isEmpty) queryNewWord(selectedNode)\n\t\t\t\tdispatchState({type:'TOGGLE_DEEP_LINKS'});\n\t\t}\n\n\n\n\n\t\treturn(\n\t\t\t\t<Navbar expand=\"lg\" className=\"justify-content-center\"\n\t\t\t\t\t\tvariant=\"dark\" style={{backgroundColor: colors.black}}>\n\t\t\t\t\t\t<a href=\"index.html\">\n\t\t\t\t\t\t\t\t<img src=\"/logo.png\" width=\"150\"\n\t\t\t\t\t\t\t\t\t\theight=\"70\"\n\t\t\t\t\t\t\t\t\t\talt=\"React Bootstrap logo\" />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<Navbar.Brand href=\"index.html\" className=\"row\"  >\n\t\t\t\t\t\t\t\t<h1>Dictographo</h1>\n\t\t\t\t\t\t</Navbar.Brand>\n\t\t\t\t\t\t<InputGroup  size='lg' md='auto' className=\"mx-3\" style={{maxWidth: \"600px\"}} >\n\t\t\t\t\t\t\t\t<FormControl size=\"lg\" as='input' type=\"text\" placeholder=\"Word  second Word\" \n\t\t\t\t\t\t\t\t\t\tvalue={state.searchTerm} onChange={handleSearchChange} \n\t\t\t\t\t\t\t\t\t\tonKeyPress={event => (event.key === \"Enter\") && handleSearchSubmit()}/>\n\t\t\t\t\t\t\t\t<InputGroup.Append>\n\t\t\t\t\t\t\t\t\t\t<Button size=\"lg\" variant=\"outline-info\" onClick={handleSearchSubmit}>Search</Button>\n\t\t\t\t\t\t\t\t</InputGroup.Append>\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t\t\t\t\t<Nav className=\"ml-auto mx-4\">\n\t\t\t\t\t\t\t\t\t\t<NavDropdown variant=\"dark\"\n\t\t\t\t\t\t\t\t\t\t\t\tsize=\"lg\" title=\"Options\" \n\t\t\t\t\t\t\t\t\t\t\t\ticon={<FontAwesomeIcon icon={faSlidersH}/>}\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"basic-nav-dropdown\">\n\t\t\t\t\t\t\t\t\t\t\t\t<NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t<NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t<NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Check type=\"switch\" id=\"custom-switch\" label=\"Deep Links\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={state.isDeepLinks} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleToggleDeepLinks}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</NavDropdown>\n\t\t\t\t\t\t\t\t</Nav>\n\t\t\t\t\t\t</Navbar.Collapse>\n\t\t\t\t</Navbar>\n\t\t)\n}\n\nexport default NavBarContainer;\n"]},"metadata":{},"sourceType":"module"}