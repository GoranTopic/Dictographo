{"ast":null,"code":"import _slicedToArray from\"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{API_ENDPOINT}from\"../../myConfig\";import useKeypress from'../../hooks/useKeypress';import'./SearchSuggestion.css';/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */var query_search='querysearch/';//add this to myconfig\nfunction SuggestionsContainer(props){/* tahek a child fro a input an add suggestions to it */ // handle the change by seting the state variable to \nvar state=props.state;var dispatchState=props.dispatchState;//let handleSearchSubmit =  props.handleSearchSubmit;\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),suggestions=_useState2[0],setSuggestions=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),selected=_useState4[0],setSelected=_useState4[1];useKeypress('ArrowDown',function(){return selected<0?setSelected(suggestions.length-1):setSelected(selected+1);});useKeypress('ArrowUp',function(){return selected>suggestions.length-1?setSelected(0):setSelected(selected-1);});useKeypress('Enter',function(){/* there is a bug where becuase the summit button is insdie the child component the \n\t\t\t\t * Enter input is registered twice and handle serach summit run twice.\n\t\t\t\t * This caused duplicate links and nodes.\n\t\t\t\t * I fixed this by adding a checker and addit the link ony if it is new link, \n\t\t\t\t * however the bug still there, beware*/if(isWrittingWord()){if(suggestions.length>0){addToSearchTerm(suggestions[selected].word);}}else{/*\n\t\t\t\t\t\tif (event.keyCode === 13) {\n\t\t\t\t\t\t\t\tconst form = event.target.form;\n\t\t\t\t\t\t\t\tconst index = Array.prototype.indexOf.call(form, event.target);\n\t\t\t\t\t\t\t\tform.elements[index + 1].focus();\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t*/ //handleSearchSubmit();\n}});var isWrittingWord=function isWrittingWord(){/* uses the state to see if\n\t\t\t\t\t\t* the user is in the middle of writting a word */var len=state.searchTerm.length;var last=state.searchTerm[state.searchTerm.length-1];if(len===0){return false;}else if(last===\" \"){return false;}else return true;};var filterSuggestions=function filterSuggestions(suggestions){return(/* filter out all words which have spaces */suggestions instanceof Array?// if reques has been found\nsuggestions.filter(function(suggestion){return /\\s/.test(suggestion);}):[]);};var addToSearchTerm=function addToSearchTerm(word){/* append a given word to the seate searchTerm */var wordList=state.searchTerm.split(\" \");var len=wordList.length;wordList[len-1]=word;// set the last word as clicke word\ndispatchState({type:'SET_SEARCH_TERM',payload:wordList.join(\" \")+\" \"});setSuggestions([]);// reset suggestions\nsetSelected(0);// reset selected\n};var _onClick=function onClick(word){return addToSearchTerm(word);};useEffect(function(){/* query server for search suggestionsa\n\t\t\t\t * and sets the  */var wordList=state.searchTerm.split(\" \");//split the search into words\nvar len=wordList.length;//get the length\nvar last=wordList[len-1];//fetch the last element \nfetch(API_ENDPOINT+query_search+last).then(function(result){return result.json();})//unpack suggestions\n.then(function(suggestions){return filterSuggestions(suggestions);}).then(function(suggestions){return setSuggestions(suggestions);}).catch(function(err){return console.log(err);});},[state.searchTerm,dispatchState]);var SuggestionList=function SuggestionList(){return/*#__PURE__*/React.createElement(\"ul\",{className:\"suggestions\"},suggestions.map(function(suggestion,index){return/*#__PURE__*/React.createElement(\"li\",{key:index,className:index===selected?\"selected\":null,onClick:function onClick(){return _onClick(suggestion.word);}},suggestion.word);}));};return/*#__PURE__*/React.createElement(\"div\",{className:\"input\"},props.children,isWrittingWord()?/*#__PURE__*/React.createElement(SuggestionList,null):/*#__PURE__*/React.createElement(React.Fragment,null));}export default SuggestionsContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js"],"names":["React","useState","useEffect","API_ENDPOINT","useKeypress","query_search","SuggestionsContainer","props","state","dispatchState","suggestions","setSuggestions","selected","setSelected","length","isWrittingWord","addToSearchTerm","word","len","searchTerm","last","filterSuggestions","Array","filter","suggestion","test","wordList","split","type","payload","join","onClick","fetch","then","result","json","catch","err","console","log","SuggestionList","map","index","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT }  from \"../../myConfig\";\nimport useKeypress from '../../hooks/useKeypress';\nimport './SearchSuggestion.css'; \n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/' //add this to myconfig\n\nfunction SuggestionsContainer(props){\n\t\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t\t//let handleSearchSubmit =  props.handleSearchSubmit;\n\t\tconst [suggestions, setSuggestions] = useState([])\t\n\t\tconst [selected, setSelected] = useState(0)\t\n\t\t\n\n\t\tuseKeypress('ArrowDown', () =>\n\t\t\t\t(selected < 0)?\n\t\t\t\tsetSelected(suggestions.length-1)\n\t\t\t\t: setSelected(selected + 1)\n\t\t);\n\n\t\tuseKeypress('ArrowUp', () => \n\t\t\t\t(selected > suggestions.length-1)?\n\t\t\t\tsetSelected(0)\n\t\t\t\t:setSelected(selected - 1)\n\t\t);\n\n\t\tuseKeypress('Enter', () => {\n\t\t\t\t/* there is a bug where becuase the summit button is insdie the child component the \n\t\t\t\t * Enter input is registered twice and handle serach summit run twice.\n\t\t\t\t * This caused duplicate links and nodes.\n\t\t\t\t * I fixed this by adding a checker and addit the link ony if it is new link, \n\t\t\t\t * however the bug still there, beware*/\n\t\t\t\tif(isWrittingWord()){\n\t\t\t\t\t\tif(suggestions.length > 0){\n\t\t\t\t\t\t\t\taddToSearchTerm(suggestions[selected].word);\n\t\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tif (event.keyCode === 13) {\n\t\t\t\t\t\t\t\tconst form = event.target.form;\n\t\t\t\t\t\t\t\tconst index = Array.prototype.indexOf.call(form, event.target);\n\t\t\t\t\t\t\t\tform.elements[index + 1].focus();\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t*/\n\t\t\t\t\t\t//handleSearchSubmit();\n\t\t\t\t}\n\t\t})\n\n\t\tconst isWrittingWord = () =>{\n\t\t\t\t/* uses the state to see if\n\t\t\t\t\t\t* the user is in the middle of writting a word */\n\t\t\t\tlet len = state.searchTerm.length;\n\t\t\t\tlet last = state.searchTerm[state.searchTerm.length-1];\n\t\t\t\tif(len === 0){ return false;\n\t\t\t\t}else if (last === \" \"){ return false;\n\t\t\t\t}else return true; \n\t\t}\n\n\t\tconst filterSuggestions = suggestions => \n\t\t\t\t/* filter out all words which have spaces */\n\t\t\t\tsuggestions instanceof Array ? // if reques has been found\n\t\t\t\t\t\tsuggestions.filter( suggestion => /\\s/.test(suggestion)) : []\n\n\t\tconst addToSearchTerm = (word) => {\n\t\t\t\t/* append a given word to the seate searchTerm */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\tlet len = wordList.length \n\t\t\t\twordList[len-1] = word // set the last word as clicke word\n\t\t\t\tdispatchState({ \n\t\t\t\t\t\ttype: 'SET_SEARCH_TERM',\n\t\t\t\t\t\tpayload: wordList.join(\" \") + \" \",\n\t\t\t\t});\t\n\t\t\t\tsetSuggestions([]); // reset suggestions\n\t\t\t\tsetSelected(0); // reset selected\n\t\t}\n\n\t\tconst onClick = (word) => addToSearchTerm(word);\n\n\t\tuseEffect(() => {\n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\t//split the search into words\n\t\t\t\tlet len = wordList.length;\n\t\t\t\t//get the length\n\t\t\t\tlet last = wordList[len-1]\n\t\t\t\t//fetch the last element \n\t\t\t\tfetch(API_ENDPOINT + query_search + last)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => filterSuggestions(suggestions))\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch((err) => console.log(err));\n\t\t}, [state.searchTerm, dispatchState])\n\n\n\t\tconst SuggestionList = () =>\n\t\t\t\t<ul className=\"suggestions\">\n\t\t\t\t\t\t{ suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => {  \n\t\t\t\t\t\t\t\t\t\treturn  <li \n\t\t\t\t\t\t\t\t\t\t\t\tkey={index} \n\t\t\t\t\t\t\t\t\t\t\t\tclassName={index === selected? \"selected\": null}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onClick(suggestion.word)}>\n\t\t\t\t\t\t\t\t\t\t\t\t{suggestion.word}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t</ul>\n\n\t\t\t\t\t\treturn <div className=\"input\">\n\t\t\t\t\t\t\t\t{props.children}\n\t\t\t\t\t\t\t\t{isWrittingWord()? <SuggestionList/>: <></> }\n\t\t\t\t\t\t</div>\n}\n\nexport default SuggestionsContainer;\n"]},"metadata":{},"sourceType":"module"}