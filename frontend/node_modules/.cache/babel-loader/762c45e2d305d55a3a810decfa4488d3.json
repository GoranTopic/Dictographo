{"ast":null,"code":"import _toConsumableArray from\"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Alert,ProgressBar}from'react-bootstrap';import'bootstrap/dist/css/bootstrap.min.css';/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */function AlertContainer(_ref){var state=_ref.state,dispatchState=_ref.dispatchState;/* functions that return an error mesage depending onthe state */ // set timer ro dismiss with hook\nvar _useState=useState(0),_useState2=_slicedToArray(_useState,2),percentage=_useState2[0],setPercentange=_useState2[1];// use effect to set the interval to make a contant preogress\nuseEffect(function(){// run queh component mounted\nvar interval=null;if(percentage<115){// while percentage is not complete\ninterval=setInterval(function(){return setPercentange(function(percentage){return percentage+3;});},100);}else{// if it has reached 100 percent\nsetPercentange(0);// set percentage back to 0\ndispatchState({type:'DISSMISS_ERROR'});// unmount itself\n}return function(){clearInterval(interval);};},[percentage,dispatchState]);return/*#__PURE__*/React.createElement(Alert,{variant:\"danger\",dismissible:true,onClose:function onClose(){return dispatchState({type:'DISSMISS_ERROR'});}},/*#__PURE__*/React.createElement(ProgressBar,{style:{color:'white',maxHeight:4,backgroundColor:'pink'},variant:\"danger\",now:percentage}),/*#__PURE__*/React.createElement(Alert.Heading,null,\"Oh Snap!\"),state.isWordNotFound?/*#__PURE__*/ //if the there is not words found\nReact.createElement(\"p\",null,\"Looks like \",/*#__PURE__*/React.createElement(\"b\",null,_toConsumableArray(state.wordsNotFound).map(function(word){return/*#__PURE__*/React.createElement(\"i\",null,word,\", \");})),\"in no our dictionary yet.\"):/*#__PURE__*/React.createElement(React.Fragment,null),state.isPathNotFound?/*#__PURE__*/ //if there is a path not found\nReact.createElement(\"p\",null,\"looks like there is no path between:\",_toConsumableArray(state.pathsNotFound).map(function(path){return/*#__PURE__*/React.createElement(\"i\",null,/*#__PURE__*/React.createElement(\"b\",null,\" \",path.first),\" and \",/*#__PURE__*/React.createElement(\"b\",null,path.last,\",\"));})):/*#__PURE__*/React.createElement(React.Fragment,null),state.isFetchFailed?/*#__PURE__*/ //There is a problem with the network\nReact.createElement(\"p\",null,\"Could not connect to server.\"):/*#__PURE__*/React.createElement(React.Fragment,null),/*#__PURE__*/React.createElement(\"p\",null,state.errorMsg));}export default AlertContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Alert.js"],"names":["React","useState","useEffect","Alert","ProgressBar","AlertContainer","state","dispatchState","percentage","setPercentange","interval","setInterval","type","clearInterval","color","maxHeight","backgroundColor","isWordNotFound","wordsNotFound","map","word","isPathNotFound","pathsNotFound","path","first","last","isFetchFailed","errorMsg"],"mappings":"sTAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,KAAT,CAAgBC,WAAhB,KAAmC,iBAAnC,CACA,MAAO,sCAAP,CAEA;;;;;GAOA,QAASC,CAAAA,cAAT,MAAgD,IAAvBC,CAAAA,KAAuB,MAAvBA,KAAuB,CAAhBC,aAAgB,MAAhBA,aAAgB,CAC9C,iEAD8C,CAE9C;AAF8C,cAGPN,QAAQ,CAAC,CAAD,CAHD,wCAGtCO,UAHsC,eAG1BC,cAH0B,eAI9C;AAEAP,SAAS,CAAC,UAAM,CAAE;AAChB,GAAIQ,CAAAA,QAAQ,CAAG,IAAf,CACA,GAAIF,UAAU,CAAG,GAAjB,CAAsB,CAAE;AACtBE,QAAQ,CAAGC,WAAW,CAAC,iBACrBF,CAAAA,cAAc,CAAC,SAAAD,UAAU,QAAIA,CAAAA,UAAU,CAAG,CAAjB,EAAX,CADO,EAAD,CAC0B,GAD1B,CAAtB,CAED,CAHD,IAGM,CAAE;AACNC,cAAc,CAAC,CAAD,CAAd,CAAmB;AACnBF,aAAa,CAAC,CAACK,IAAI,CAAE,gBAAP,CAAD,CAAb,CAA0C;AAC3C,CACD,MAAO,WAAM,CACXC,aAAa,CAACH,QAAD,CAAb,CACD,CAFD,CAGD,CAZQ,CAYN,CAAEF,UAAF,CAAcD,aAAd,CAZM,CAAT,CAcA,mBACE,oBAAC,KAAD,EAAO,OAAO,CAAC,QAAf,CAAwB,WAAW,KAAnC,CACE,OAAO,CAAE,yBAAMA,CAAAA,aAAa,CAAC,CAACK,IAAI,CAAE,gBAAP,CAAD,CAAnB,EADX,eAEE,oBAAC,WAAD,EACE,KAAK,CAAE,CAAEE,KAAK,CAAC,OAAR,CAAiBC,SAAS,CAAE,CAA5B,CAA+BC,eAAe,CAAE,MAAhD,CADT,CAEE,OAAO,CAAC,QAFV,CAGE,GAAG,CAAER,UAHP,EAFF,cAME,oBAAC,KAAD,CAAO,OAAP,iBANF,CAOGF,KAAK,CAACW,cAAN,eAAsB;AACvB,wDAAc,6BACV,mBAAIX,KAAK,CAACY,aAAV,EAAyBC,GAAzB,CAA6B,SAAAC,IAAI,qBAAI,6BAAIA,IAAJ,MAAJ,EAAjC,CADU,CAAd,6BADC,cAGmC,wCAVtC,CAWGd,KAAK,CAACe,cAAN,eAAsB;AACvB,oEACG,mBAAIf,KAAK,CAACgB,aAAV,EAAyBH,GAAzB,CACC,SAAAI,IAAI,qBAAI,0CAAG,iCAAKA,IAAI,CAACC,KAAV,CAAH,sBAA4B,6BAAID,IAAI,CAACE,IAAT,KAA5B,CAAJ,EADL,CADH,CADC,cAIM,wCAfT,CAgBGnB,KAAK,CAACoB,aAAN,eAAqB;AACtB,4DADC,cACqC,wCAjBxC,cAkBE,6BAAIpB,KAAK,CAACqB,QAAV,CAlBF,CADF,CAqBD,CAED,cAAetB,CAAAA,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Alert, ProgressBar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({state, dispatchState}) {\n\t\t/* functions that return an error mesage depending onthe state */\n\t\t// set timer ro dismiss with hook\n\t\tconst [ percentage, setPercentange ] = useState(0)\n\t\t// use effect to set the interval to make a contant preogress\n\t\t\n\t\tuseEffect(() => { // run queh component mounted\n\t\t\t\tlet interval = null; \n\t\t\t\tif (percentage < 115) { // while percentage is not complete\n\t\t\t\t\t\tinterval = setInterval(() => \n\t\t\t\t\t\t\t\tsetPercentange(percentage => percentage + 3), 100);\n\t\t\t\t} else{ // if it has reached 100 percent\n\t\t\t\t\t\tsetPercentange(0); // set percentage back to 0\n\t\t\t\t\t\tdispatchState({type: 'DISSMISS_ERROR' }); // unmount itself\n\t\t\t\t}\n\t\t\t\treturn () => {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t}\n\t\t}, [ percentage, dispatchState]);\n\n\t\treturn(\n\t\t\t\t<Alert variant=\"danger\" dismissible \n\t\t\t\t\t\tonClose={() => dispatchState({type: 'DISSMISS_ERROR'})} >\n\t\t\t\t\t\t<ProgressBar \n\t\t\t\t\t\t\t\tstyle={{ color:'white', maxHeight: 4, backgroundColor: 'pink'}}\n\t\t\t\t\t\t\t\tvariant='danger'\n\t\t\t\t\t\t\t\tnow={percentage} />\n\t\t\t\t\t\t<Alert.Heading>Oh Snap!</Alert.Heading>\n\t\t\t\t\t\t{state.isWordNotFound? //if the there is not words found\n\t\t\t\t\t\t<p>Looks like <b>\n\t\t\t\t\t\t\t\t{ [...state.wordsNotFound].map(word => <i>{word}, </i> ) }\n\t\t\t\t\t\t</b>in no our dictionary yet.</p> : <></>}\n\t\t\t\t\t\t{state.isPathNotFound? //if there is a path not found\n\t\t\t\t\t\t<p>looks like there is no path between: \n\t\t\t\t\t\t\t\t{[...state.pathsNotFound].map(\n\t\t\t\t\t\t\t\t\t\tpath => <i><b> {path.first}</b> and <b>{path.last},</b></i> )}\n\t\t\t\t\t\t</p> : <></> }\n\t\t\t\t\t\t{state.isFetchFailed? //There is a problem with the network\n\t\t\t\t\t\t<p>Could not connect to server.</p> : <></> }\n\t\t\t\t\t\t<p>{state.errorMsg}</p>\n\t\t\t\t</Alert>)\n}\n\nexport default AlertContainer;\n\n"]},"metadata":{},"sourceType":"module"}