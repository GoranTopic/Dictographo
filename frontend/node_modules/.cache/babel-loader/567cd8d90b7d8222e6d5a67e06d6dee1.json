{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildLinkPathDefinition = buildLinkPathDefinition;\n\nvar _link = require(\"./link.const\");\n\nvar _RADIUS_STRATEGIES;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Computes radius value for a straight line.\n * @returns {number} radius for straight line.\n * @memberof Link/helper\n */\n\n\nfunction straightLineRadius() {\n  return 0;\n}\n/**\n * Computes radius for a smooth curve effect.\n * @param {number} x1 - x value for point 1\n * @param {number} y1 - y value for point 1\n * @param {number} x2 - y value for point 2\n * @param {number} y2 - y value for point 2\n * @returns{number} value of radius.\n * @memberof Link/helper\n */\n\n\nfunction smoothCurveRadius(x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n/**\n * Computes radius value for a full curve (semi circumference).\n * @returns {number} radius for full curve.\n * @memberof Link/helper\n */\n\n\nfunction fullCurveRadius() {\n  return 1;\n}\n\nvar RADIUS_STRATEGIES = (_RADIUS_STRATEGIES = {}, _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.STRAIGHT, straightLineRadius), _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.CURVE_SMOOTH, smoothCurveRadius), _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.CURVE_FULL, fullCurveRadius), _RADIUS_STRATEGIES);\n/**\n * Get a strategy to compute line radius.<br/>\n * *CURVE_SMOOTH* type inspired by {@link http://bl.ocks.org/mbostock/1153292|mbostock - Mobile Patent Suits}.\n * @param {string} [type=LINE_TYPES.STRAIGHT] type of curve to get radius strategy from.\n * @returns {Function} a function that calculates a radius\n * to match curve type expectation. Fallback is the straight line.\n * @memberof Link/helper\n */\n\nfunction getRadiusStrategy(type) {\n  return RADIUS_STRATEGIES[type] || RADIUS_STRATEGIES[_link.LINE_TYPES.STRAIGHT];\n}\n/**\n * This method returns the path definition for a given link base on the line type\n * and the link source and target.\n * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d|d attribute mdn}\n * @param {Object} link - the link to build the path definition\n * @param {Object} link.source - link source\n * @param {Object} link.target - link target\n * @param {string} type - the link line type\n * @returns {string} the path definition for the requested link\n * @memberof Link/helper\n */\n\n\nfunction buildLinkPathDefinition(_ref) {\n  var _ref$source = _ref.source,\n      source = _ref$source === void 0 ? {} : _ref$source,\n      _ref$target = _ref.target,\n      target = _ref$target === void 0 ? {} : _ref$target;\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _link.LINE_TYPES.STRAIGHT;\n  var sx = source.x,\n      sy = source.y;\n  var tx = target.x,\n      ty = target.y;\n  var validType = _link.LINE_TYPES[type] || _link.LINE_TYPES.STRAIGHT;\n  var radius = getRadiusStrategy(validType)(sx, sy, tx, ty);\n  return \"M\".concat(sx, \",\").concat(sy, \"A\").concat(radius, \",\").concat(radius, \" 0 0,1 \").concat(tx, \",\").concat(ty);\n}","map":{"version":3,"sources":["/home/telix/dictio-grapho/frontend/node_modules/react-d3-graph/lib/components/link/link.helper.js"],"names":["Object","defineProperty","exports","value","buildLinkPathDefinition","_link","require","_RADIUS_STRATEGIES","_defineProperty","obj","key","enumerable","configurable","writable","straightLineRadius","smoothCurveRadius","x1","y1","x2","y2","dx","dy","Math","sqrt","fullCurveRadius","RADIUS_STRATEGIES","LINE_TYPES","STRAIGHT","CURVE_SMOOTH","CURVE_FULL","getRadiusStrategy","type","_ref","_ref$source","source","_ref$target","target","arguments","length","undefined","sx","x","sy","y","tx","ty","validType","radius","concat"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildLinkPathDefinition = buildLinkPathDefinition;\n\nvar _link = require(\"./link.const\");\n\nvar _RADIUS_STRATEGIES;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Computes radius value for a straight line.\n * @returns {number} radius for straight line.\n * @memberof Link/helper\n */\nfunction straightLineRadius() {\n  return 0;\n}\n/**\n * Computes radius for a smooth curve effect.\n * @param {number} x1 - x value for point 1\n * @param {number} y1 - y value for point 1\n * @param {number} x2 - y value for point 2\n * @param {number} y2 - y value for point 2\n * @returns{number} value of radius.\n * @memberof Link/helper\n */\n\n\nfunction smoothCurveRadius(x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n/**\n * Computes radius value for a full curve (semi circumference).\n * @returns {number} radius for full curve.\n * @memberof Link/helper\n */\n\n\nfunction fullCurveRadius() {\n  return 1;\n}\n\nvar RADIUS_STRATEGIES = (_RADIUS_STRATEGIES = {}, _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.STRAIGHT, straightLineRadius), _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.CURVE_SMOOTH, smoothCurveRadius), _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.CURVE_FULL, fullCurveRadius), _RADIUS_STRATEGIES);\n/**\n * Get a strategy to compute line radius.<br/>\n * *CURVE_SMOOTH* type inspired by {@link http://bl.ocks.org/mbostock/1153292|mbostock - Mobile Patent Suits}.\n * @param {string} [type=LINE_TYPES.STRAIGHT] type of curve to get radius strategy from.\n * @returns {Function} a function that calculates a radius\n * to match curve type expectation. Fallback is the straight line.\n * @memberof Link/helper\n */\n\nfunction getRadiusStrategy(type) {\n  return RADIUS_STRATEGIES[type] || RADIUS_STRATEGIES[_link.LINE_TYPES.STRAIGHT];\n}\n/**\n * This method returns the path definition for a given link base on the line type\n * and the link source and target.\n * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d|d attribute mdn}\n * @param {Object} link - the link to build the path definition\n * @param {Object} link.source - link source\n * @param {Object} link.target - link target\n * @param {string} type - the link line type\n * @returns {string} the path definition for the requested link\n * @memberof Link/helper\n */\n\n\nfunction buildLinkPathDefinition(_ref) {\n  var _ref$source = _ref.source,\n      source = _ref$source === void 0 ? {} : _ref$source,\n      _ref$target = _ref.target,\n      target = _ref$target === void 0 ? {} : _ref$target;\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _link.LINE_TYPES.STRAIGHT;\n  var sx = source.x,\n      sy = source.y;\n  var tx = target.x,\n      ty = target.y;\n  var validType = _link.LINE_TYPES[type] || _link.LINE_TYPES.STRAIGHT;\n  var radius = getRadiusStrategy(validType)(sx, sy, tx, ty);\n  return \"M\".concat(sx, \",\").concat(sy, \"A\").concat(radius, \",\").concat(radius, \" 0 0,1 \").concat(tx, \",\").concat(ty);\n}"]},"metadata":{},"sourceType":"script"}