{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictio-grapho/frontend/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport { genRandomNode, genGrapNodes, genPath } from \"./RandomGenerator\";\nimport myConfig from \"./myConfig\";\nconst API_ENDPOINT = 'http://127.0.0.1:8000/api/';\n\nfunction App() {\n  // graph payload (with minimalist structure)\n  const initial_data = {\n    nodes: [{\n      id: \"zine\",\n      fill: 'green',\n      type: 'Square',\n      color: 'red',\n      cx: 22,\n      cy: 22\n    }, {\n      id: \"cool\"\n    }, {\n      id: \"world\"\n    }],\n    links: [{\n      source: \"zine\",\n      target: \"cool\",\n      color: 'red'\n    }, {\n      source: \"zine\",\n      target: \"world\"\n    }],\n    isError: false,\n    isLoading: true,\n    searchTerm: '',\n    DestinationTerm: ''\n  }; // make reducer for the words data and internal state \n\n  const dataReducer = (state, action) => {\n    switch (action.type) {\n      case 'SET_NEW_NODE':\n        console.log(action);\n        return { ...state,\n          nodes: [...state.nodes, action.payload.node],\n          links: [...state.links, ...action.payload.links]\n        };\n\n      case 'APPEND_NODES':\n        return { ...state,\n          nodes: [...state.nodes, ...action.payload.nodes],\n          links: [...state.links, ...action.payload.links]\n        };\n\n      case 'RESET_NODE':\n        return { ...state,\n          nodes: [action.payload.node],\n          links: []\n        };\n\n      case 'SET_FETCH_FAILED':\n        return { ...state,\n          isError: true\n        };\n\n      default:\n        throw new Error();\n    }\n  }; // define dispatcher for the Internal data \n\n\n  const [data, dispatchData] = React.useReducer(dataReducer, initial_data); // add Async word\n\n  const getWordAsync = (ms = 0) => new Promise((resolve, rejec) => setTimeout(() => resolve(genRandomNode(data.nodes)), ms)); // get nodes Async\n\n\n  const getNodesAsync = word => new Promise((resolve, reject) => setTimeout(() => resolve(genGrapNodes(word, 0)), 200)); // get nodes Async\n\n\n  const getPathAsync = (word, dest) => new Promise((resolve, reject) => setTimeout(() => resolve(genPath(word, dest)), 200)); // add a random nodes\n\n\n  const addNodesAsync = () => {\n    getWordAsync().then(result => setTimeout(() => dispatchData({\n      type: 'SET_NEW_NODE',\n      payload: result\n    }), 200)).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  };\n\n  const dispatchNodesAsync = result => {\n    // append array of nodes with a waiting time in between them so that they flow\n    if (Array.isArray(result)) {\n      for (let i in result) {\n        console.log(\"enterned in order\");\n        console.log(result[i]);\n        setTimeout(() => dispatchData({\n          type: 'SET_NEW_NODE',\n          payload: result[i]\n        }), 200 * i);\n      }\n    } else {\n      dispatchData({\n        type: 'SET_NEW_NODE',\n        payload: result\n      });\n    }\n  }; // Append nodes into the graph\n\n\n  const appendNodesAsync = word => {\n    fetch(API_ENDPOINT + word).then(result => result.json()).then(result => {\n      console.log(result);\n      dispatchNodesAsync(result);\n    }).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  }; // append nodes in a path \n\n\n  async function appendPathAsync(word, dest) {\n    getPathAsync(word, dest).then(result => dispatchNodesAsync(result)).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  } // fuction for make a persitant state\n\n\n  const useSemiPersistentSate = key => {\n    const [value, setValue] = React.useState(localStorage.getItem(key) || '');\n    React.useEffect(key => {\n      localStorage.setItem(key, value);\n    }, [value]);\n    return [value, setValue];\n  }; // get state fuctions\n\n\n  const [searchTerm, setSearchTerm] = useSemiPersistentSate('search'); // get state fuctions\n\n  const [destinationTerm, setDestinationTerm] = useSemiPersistentSate('destination'); // handle the change by seting the state variable to \n\n  const handleSearchChange = change => setSearchTerm(change.target.value); // handle the change by seting the state variable to \n\n\n  const handleDestinationChange = change => setDestinationTerm(change.target.value); // handle submit search button\n\n\n  const handleSearchSubmit = () => {\n    dispatchData({\n      type: 'RESET_NODE',\n      payload: {\n        node: {\n          id: searchTerm\n        }\n      }\n    });\n    appendNodesAsync(searchTerm);\n  }; // handle path button\n\n\n  const handlePathSubmit = () => {\n    //  reset the node?\n    dispatchData({\n      type: 'RESET_NODE',\n      payload: {\n        node: {\n          id: searchTerm\n        }\n      }\n    });\n    appendPathAsync(searchTerm, destinationTerm);\n  };\n\n  const onClickNode = function (nodeId) {\n    console.log(`clicked node ${nodeId}`);\n    appendNodesAsync(nodeId);\n  };\n\n  const onRightClickNode = function (event, nodeId) {\n    window.alert(`Right clicked node ${nodeId}`);\n  };\n\n  const onClickLink = function (source, target) {\n    window.alert(`Clicked link between ${source} and ${target}`);\n  };\n\n  const onRightClickLink = function (event, source, target) {\n    window.alert(`Right clicked link between ${source} and ${target}`);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputWithLabel, {\n    id: \"search\",\n    type: \"text\",\n    isFocuse: true,\n    value: searchTerm,\n    onInputChange: handleSearchChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, \"Search:\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disable: !searchTerm,\n    onClick: handleSearchSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, \"Search\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addNodesAsync,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, \"Add random Nodes\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputWithLabel, {\n    id: \"destination\",\n    type: \"text\",\n    value: destinationTerm,\n    onInputChange: handleDestinationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, \"Destination:\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disable: !destinationTerm,\n    onClick: handlePathSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, \"Get path\")), /*#__PURE__*/React.createElement(Graph, {\n    id: \"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n    ,\n    data: data,\n    config: myConfig,\n    onClickNode: onClickNode,\n    onRightClickNode: onRightClickNode,\n    onClickLink: onClickLink,\n    onRightClickLink: onRightClickLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }));\n}\n\nconst InputWithLabel = ({\n  id,\n  type,\n  value,\n  onInputChange,\n  isFocused,\n  children\n}) => {\n  /* A component with the Input and a Label */\n  // Define an input ref for passing to input component\n  const inputRef = React.useRef(); // set up a side effect it is updates if the focus changes\n\n  React.useEffect(() => {\n    if (isFocused && inputRef.current) inputRef.current.focused();\n  }, [isFocused]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }, \" \", children, \" \"), \"\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n    id: id,\n    ref: inputRef,\n    type: type,\n    value: value,\n    onChange: onInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/telix/dictio-grapho/frontend/src/App.js"],"names":["React","Graph","genRandomNode","genGrapNodes","genPath","myConfig","API_ENDPOINT","App","initial_data","nodes","id","fill","type","color","cx","cy","links","source","target","isError","isLoading","searchTerm","DestinationTerm","dataReducer","state","action","console","log","payload","node","Error","data","dispatchData","useReducer","getWordAsync","ms","Promise","resolve","rejec","setTimeout","getNodesAsync","word","reject","getPathAsync","dest","addNodesAsync","then","result","catch","dispatchNodesAsync","Array","isArray","i","appendNodesAsync","fetch","json","appendPathAsync","useSemiPersistentSate","key","value","setValue","useState","localStorage","getItem","useEffect","setItem","setSearchTerm","destinationTerm","setDestinationTerm","handleSearchChange","change","handleDestinationChange","handleSearchSubmit","handlePathSubmit","onClickNode","nodeId","onRightClickNode","event","window","alert","onClickLink","onRightClickLink","InputWithLabel","onInputChange","isFocused","children","inputRef","useRef","current","focused"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport { genRandomNode, genGrapNodes, genPath } from \"./RandomGenerator\";\nimport  myConfig  from \"./myConfig\";\n\nconst API_ENDPOINT = 'http://127.0.0.1:8000/api/'\n\nfunction App() {\n\n\t\t// graph payload (with minimalist structure)\n\t\tconst initial_data = {\n\t\t\t\tnodes: [{ id: \"zine\", fill:'green', type:'Square', color:'red', cx:22, cy:22}, { id: \"cool\" }, { id: \"world\" }],\n\t\t\t\tlinks: [\n\t\t\t\t\t\t{ source: \"zine\", target: \"cool\", color:'red' },\n\t\t\t\t\t\t{ source: \"zine\", target: \"world\" },\n\t\t\t\t],\n\t\t\t\tisError: false,\n\t\t\t\tisLoading: true,\n\t\t\t\tsearchTerm: '',\n\t\t\t\tDestinationTerm: '',\n\t\t};\n\n\t\t// make reducer for the words data and internal state \n\t\tconst dataReducer = (state, action) =>{\n\t\t\t\tswitch (action.type){\n\t\t\t\t\t\tcase 'SET_NEW_NODE':\n\t\t\t\t\t\t\t\tconsole.log(action)\n\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, action.payload.node],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'APPEND_NODES':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 'RESET_NODE':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tnodes: [  action.payload.node ],\n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_FETCH_FAILED':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\t\t}\n\n\t\t// define dispatcher for the Internal data \n\t\tconst [data, dispatchData] = React.useReducer( dataReducer, initial_data );\n\n\t\t// add Async word\n\t\tconst getWordAsync = (ms=0)=> new Promise((resolve, rejec) => setTimeout(() => resolve(genRandomNode(data.nodes)), ms));\n\n\t\t// get nodes Async\n\t\tconst getNodesAsync = (word)=> new Promise((resolve, reject)=> setTimeout(()=> resolve(genGrapNodes(word, 0)), 200));\n\n\t\t// get nodes Async\n\t\tconst getPathAsync =(word, dest)=> new Promise((resolve, reject)=> setTimeout(()=> resolve(genPath(word, dest)), 200));\n\n\t\t// add a random nodes\n\t\tconst addNodesAsync = () => { \n\t\t\t\tgetWordAsync()\n\t\t\t\t\t\t.then( (result) => setTimeout(() =>  dispatchData({ type: 'SET_NEW_NODE', payload: result }), 200))\n\t\t\t\t\t\t.catch( () => dispatchData({ type: 'SET_FETCH_FAILED' }) );\n\t\t}\n\n\t\tconst  dispatchNodesAsync = (result) => {\n\t\t\t\t// append array of nodes with a waiting time in between them so that they flow\n\t\t\t\tif(Array.isArray(result)){\n\t\t\t\t\t\tfor(let i in result){\n\t\t\t\t\t\t\t\tconsole.log(\"enterned in order\")\n\t\t\t\t\t\t\t\tconsole.log(result[i]);\n\t\t\t\t\t\t\t\tsetTimeout( () => dispatchData({ type: 'SET_NEW_NODE', payload: result[i] }), 200 * i );\n\t\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t\tdispatchData({ type: 'SET_NEW_NODE', payload: result });\n\t\t\t\t}\n\t\t}\n\n\t\t// Append nodes into the graph\n\t\tconst appendNodesAsync = (word) => { \n\t\t\t\tfetch(API_ENDPOINT + word) \n\t\t\t\t\t\t.then( result => result.json())\n\t\t\t\t\t\t.then( result => { \n\t\t\t\t\t\t\t\tconsole.log(result)\n\t\t\t\t\t\t\t\tdispatchNodesAsync(result)\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch( () => dispatchData({ type: 'SET_FETCH_FAILED' }) );\n\t\t}\n\n\t\t// append nodes in a path \n\t\tasync function appendPathAsync(word, dest){ \n\t\t\t\tgetPathAsync(word, dest)\n\t\t\t\t\t\t.then(result => dispatchNodesAsync(result))\n\t\t\t\t\t\t.catch(() => dispatchData({ type: 'SET_FETCH_FAILED' }));\n\t\t}\n\n\t\t// fuction for make a persitant state\n\t\tconst useSemiPersistentSate = key => { \n\t\t\t\tconst [value, setValue] = React.useState( localStorage.getItem(key) || '');\n\t\t\t\tReact.useEffect( (key) => { localStorage.setItem(key, value)} , [value] );\n\t\t\t\treturn [value, setValue];\n\t\t}\n\n\t\t// get state fuctions\n\t\tconst [ searchTerm, setSearchTerm] = useSemiPersistentSate('search');\n\t\t// get state fuctions\n\t\tconst [ destinationTerm, setDestinationTerm] = useSemiPersistentSate('destination');\n\n\t\t// handle the change by seting the state variable to \n\t\tconst handleSearchChange = change => setSearchTerm(change.target.value);\n\t\t// handle the change by seting the state variable to \n\t\tconst handleDestinationChange = change => setDestinationTerm(change.target.value);\n\n\t\t// handle submit search button\n\t\tconst handleSearchSubmit = () => { \n\t\t\t\tdispatchData({ type: 'RESET_NODE', payload:{ node:{ id: searchTerm } } });\n\t\t\t\tappendNodesAsync(searchTerm);\n\t\t};\n\n\t\t// handle path button\n\t\tconst handlePathSubmit = () => { \n\t\t\t\t//  reset the node?\n\t\t\t\tdispatchData({ type: 'RESET_NODE', payload:{ node:{ id: searchTerm } } });\n\t\t\t\tappendPathAsync(searchTerm, destinationTerm);\n\t\t};\n\n\t\tconst onClickNode = function(nodeId) {\n\t\t\t\tconsole.log(`clicked node ${nodeId}`);\n\t\t\t\tappendNodesAsync(nodeId);\n\t\t};\n\n\t\tconst onRightClickNode = function(event, nodeId) {\n\t\t\t\twindow.alert(`Right clicked node ${nodeId}`);\n\t\t};\n\n\t\tconst onClickLink = function(source, target) {\n\t\t\t\twindow.alert(`Clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\tconst onRightClickLink = function(event, source, target) {\n\t\t\t\twindow.alert(`Right clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<InputWithLabel id=\"search\" type=\"text\" isFocuse value={searchTerm} onInputChange={handleSearchChange}>\n\t\t\t\t\t\t\t\t\t\t<strong>Search:</strong>\n\t\t\t\t\t\t\t\t</InputWithLabel>\n\t\t\t\t\t\t\t\t<button type=\"button\" disable={!searchTerm} onClick={handleSearchSubmit}>\n\t\t\t\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button type=\"button\" onClick={addNodesAsync}>\n\t\t\t\t\t\t\t\t\t\tAdd random Nodes\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<InputWithLabel id=\"destination\" type=\"text\" value={destinationTerm} onInputChange={handleDestinationChange}>\n\t\t\t\t\t\t\t\t\t\t<strong>Destination:</strong>\n\t\t\t\t\t\t\t\t</InputWithLabel>\n\t\t\t\t\t\t\t\t<button type=\"button\" disable={!destinationTerm} onClick={handlePathSubmit}>\n\t\t\t\t\t\t\t\t\t\tGet path\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Graph\n\t\t\t\t\t\t\t\tid=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\t\tconfig={myConfig}\n\t\t\t\t\t\t\t\tonClickNode={onClickNode}\n\t\t\t\t\t\t\t\tonRightClickNode={onRightClickNode}\n\t\t\t\t\t\t\t\tonClickLink={onClickLink}\n\t\t\t\t\t\t\t\tonRightClickLink={onRightClickLink}\n\t\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t);\n}\n\nconst InputWithLabel = ({ id, type, value, onInputChange, isFocused, children }) => {\n\t\t/* A component with the Input and a Label */\n\t\t// Define an input ref for passing to input component\n\t\tconst inputRef = React.useRef()\n\t\t// set up a side effect it is updates if the focus changes\n\t\tReact.useEffect(() => { if(isFocused && inputRef.current) inputRef.current.focused(); }, [isFocused])\n\t\treturn <>\n\t\t\t\t\t\t<label htmlFor={id}> {children} </label>\n\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t<input id={id} ref={inputRef} type={type} value={value} onChange={onInputChange}/>\n\t\t\t\t\t</>\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}