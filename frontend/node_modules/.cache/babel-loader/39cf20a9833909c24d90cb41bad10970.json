{"ast":null,"code":"var unselectedNodeColor='#3D3C3A';var unselectedLinkColor='#d3d3d3';var selectedNodeColor='#E41B17';var selectedLinkColor='#E41B17';var pathNodeColor='#17E0E3';var pathLinkColor='#17E0E3';//const pathLinkColor = '#E41B17'\n// function for getting random num\nvar getRandomInt=function getRandomInt(max){return Math.floor(Math.random()*Math.floor(max))+1;};// fuction for getting a random string\nvar getRandomStr=function getRandomStr(length){var result='';var characters='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';var charactersLength=characters.length;for(var i=0;i<length;i++){result+=characters.charAt(Math.floor(Math.random()*charactersLength));}return result;};//generate random link\nvar getRandomLinks=function getRandomLinks(link_number,word,nodes){var seen_targets=[];var links=[];for(var i=0;i<link_number;i++){var target=nodes[getRandomInt(nodes.length-1)].id;if(!seen_targets.includes(target)){links.push({source:word,target:target});seen_targets.push(target);}}return links;};// Generate a random node \nvar genRandomNode=function genRandomNode(nodes){var title=getRandomStr(6);var links=getRandomLinks(getRandomInt(6),title,nodes);return{node:{id:title},links:links};};// generate a list of grapth recursibly\nvar genGrapNodes=function genGrapNodes(word){var depth=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];for(var i=0;i<getRandomInt(3);i++){var adjacent_word=getRandomStr(8);data.push({node:{id:adjacent_word},links:[{source:word,target:adjacent_word}]});if(depth>0)genGrapNodes(adjacent_word,depth-1,data);}return data;};var makeNewNode=function makeNewNode(prevNode,newNode){var path=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var selected=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var nodeColor=path?pathNodeColor:selected?selectedNodeColor:unselectedNodeColor;var linkColor=path?pathLinkColor:selected?selectedLinkColor:unselectedLinkColor;return{node:{id:newNode,color:nodeColor},links:[{source:prevNode,target:newNode,color:linkColor}]};};// Generate a Nodes path from  node to the other\nvar genPath=function genPath(start,destination){var distance=getRandomInt(10)+5;var currentNode=start;var data=[];data.push({node:{id:start,color:pathNodeColor},links:[]});for(var i=0;i<distance;i++){var nextNode=getRandomStr(8);data.push(makeNewNode(currentNode,nextNode,true));for(var j=0;j<getRandomInt(5);j++){var adjacentNode=getRandomStr(8);data.push(makeNewNode(nextNode,adjacentNode));}currentNode=nextNode;}data.push(makeNewNode(currentNode,destination,true));return data;};// generate a list of grapth recursibly sent them in lists \nvar genGrapDepth=function genGrapDepth(word){var depth=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{nodes:[],links:[]};// Add word to data nodes \ndata.nodes.push({id:word});//for word get adjacent words into link data\nif(depth<=0)return data;for(var i=0;i<getRandomInt(6);i++){//gen a adjecent word\nvar adjacent_word=getRandomStr(8);// Add link \ndata.links.push({source:word,target:adjacent_word});// be a recursive bitch\ngenGrapDepth(adjacent_word,depth-1,data);}return data;};export{getRandomInt,getRandomStr,getRandomLinks,genRandomNode,genGrapNodes,genPath,genGrapDepth};","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/RandomGenerator.js"],"names":["unselectedNodeColor","unselectedLinkColor","selectedNodeColor","selectedLinkColor","pathNodeColor","pathLinkColor","getRandomInt","max","Math","floor","random","getRandomStr","length","result","characters","charactersLength","i","charAt","getRandomLinks","link_number","word","nodes","seen_targets","links","target","id","includes","push","source","genRandomNode","title","node","genGrapNodes","depth","data","adjacent_word","makeNewNode","prevNode","newNode","path","selected","nodeColor","linkColor","color","genPath","start","destination","distance","currentNode","nextNode","j","adjacentNode","genGrapDepth"],"mappings":"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","sourcesContent":["const unselectedNodeColor = '#3D3C3A'\nconst unselectedLinkColor = '#d3d3d3'\nconst selectedNodeColor = '#E41B17'\nconst selectedLinkColor = '#E41B17'\nconst pathNodeColor = '#17E0E3'\nconst pathLinkColor = '#17E0E3'\n//const pathLinkColor = '#E41B17'\n\n// function for getting random num\nconst getRandomInt = (max) => {\n\t\treturn Math.floor(Math.random() * Math.floor(max))+1 ;\n}\n\n// fuction for getting a random string\nconst getRandomStr = (length) => {\n\t\tvar result           = '';\n\t\tvar characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\t\tvar charactersLength = characters.length;\n\t\tfor ( var i = 0; i < length; i++ ) result += characters.charAt(Math.floor(Math.random() * charactersLength));\n\t\treturn result;\n}\n\n//generate random link\nconst getRandomLinks = (link_number, word, nodes) => {\n\t\tvar seen_targets = [] \n\t\tvar links = [];\n\t\tfor (var i = 0; i < link_number; i++ ){\n\t\t\t\tvar target = nodes[getRandomInt(nodes.length-1)].id;\n\t\t\t\tif(!seen_targets.includes(target)){\n\t\t\t\t\t\tlinks.push({ source: word, target: target });\n\t\t\t\t\t\tseen_targets.push(target);\n\t\t\t\t}\n\t\t}\n\t\treturn links;\n}\n\n// Generate a random node \nconst genRandomNode = (nodes) => {\n\t\tvar title = getRandomStr(6);\n\t\tvar links = getRandomLinks(getRandomInt(6), title, nodes);\n\t\treturn { node:{ id: title }, links };\n}\n\n\n// generate a list of grapth recursibly\nconst genGrapNodes = (word, depth=0, data=[]) =>{\n\t\tfor(var i = 0; i < getRandomInt(3); i++){\n\t\t\t\tvar adjacent_word = getRandomStr(8);\n\t\t\t\tdata.push({  node:{id: adjacent_word }, links:[{ source: word, target: adjacent_word }] });\n\t\t\t\tif( depth > 0 ) genGrapNodes(adjacent_word, depth -1, data);\n\t\t}\n\t\treturn data;\n}\n\nconst makeNewNode = (prevNode, newNode, path=false, selected=false) => {\n\t\tvar nodeColor = (path)? pathNodeColor : (selected)? selectedNodeColor : unselectedNodeColor\n\t\tvar linkColor = (path)? pathLinkColor : (selected)? selectedLinkColor : unselectedLinkColor\n\t\t\t\treturn { \n\t\t\t\t\t\tnode:{ id: newNode, color: nodeColor}, \n\t\t\t\t\t\tlinks:[{ source: prevNode, target: newNode, color: linkColor}] \n\t\t\t\t}\n\t\t};\n\n// Generate a Nodes path from  node to the other\nconst genPath = (start, destination) =>{\n\t\tlet distance  = getRandomInt(10) + 5;\n\t\tlet currentNode = start;\n\t\tlet data = [];\n\t\tdata.push({node:{ id: start, color: pathNodeColor}, links:[] });\n\t\tfor(var i = 0; i < distance; i++){\n\t\t\t\tvar nextNode = getRandomStr(8);\n\t\t\t\tdata.push(makeNewNode(currentNode, nextNode, true));\n\t\t\t\tfor(var j = 0; j < getRandomInt(5); j++){\n\t\t\t\t\t\tvar adjacentNode = getRandomStr(8);\n\t\t\t\t\t\tdata.push(makeNewNode(nextNode, adjacentNode));\n\t\t\t\t}\n\t\t\t\tcurrentNode = nextNode;\n\t\t}\n\t\tdata.push(makeNewNode(currentNode, destination, true));\n\t\treturn data;\n}\n\n\n// generate a list of grapth recursibly sent them in lists \nconst genGrapDepth = (word, depth=0, data={ nodes:[], links:[] }) =>{\n\t\t// Add word to data nodes \n\t\tdata.nodes.push({ id: word });\n\t\t//for word get adjacent words into link data\n\t\tif( depth <= 0 ) return data;\n\t\tfor(var i = 0; i < getRandomInt(6); i++){\n\t\t\t\t//gen a adjecent word\n\t\t\t\tvar adjacent_word = getRandomStr(8);\n\t\t\t\t// Add link \n\t\t\t\tdata.links.push({ source: word, target: adjacent_word });\n\t\t\t\t// be a recursive bitch\n\t\t\t\tgenGrapDepth(adjacent_word, depth -1, data);\n\t\t}\n\t\treturn data;\n}\n\n\nexport { getRandomInt, getRandomStr, getRandomLinks, genRandomNode, genGrapNodes, genPath, genGrapDepth }\n"]},"metadata":{},"sourceType":"module"}