{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Alert.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Alert, ProgressBar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({\n  state,\n  dispatchState\n}) {\n  /* functions that return an error mesage depending onthe state */\n  // set timer ro dismiss with hook\n  const [percentage, setPercentange] = useState(0); // use effect to set the interval to make a contant preogress\n  //useEffect(() => setInterval( () => setPercentange(percentage+1), 2000), [percentage])\n\n  useEffect(() => {\n    let interval = null;\n\n    if (percentage < 100) {\n      interval = setInterval(() => {\n        setPercentange(percentage => percentage + 1);\n      }, 100);\n    } else {\n      // if it has reached 100 percent\n      clearInterval(interval); // stop the interval\n      //setPercentange(0) // set percentage back to 0\n\n      dispatchState({\n        type: 'DISSMISS_ERROR'\n      });\n    }\n\n    return () => {\n      clearInterval(interval); //dispatchState({type: 'DISSMISS_ERROR' });\n    };\n  }, [percentage, dispatchState]);\n\n  if (state.isError) {\n    return /*#__PURE__*/React.createElement(Alert, {\n      variant: \"danger\",\n      dismissible: true,\n      onClose: () => dispatchState({\n        type: 'DISSMISS_ERROR'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ProgressBar, {\n      variant: \"danger\",\n      now: percentage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Alert.Heading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, \"Oh Snap!\"), state.isWordNotFound ?\n    /*#__PURE__*/\n    //if the there is not words found\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, \"Looks like \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 23\n      }\n    }, [...state.wordsNotFound].map(word => /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 50\n      }\n    }, word, \", \"))), \"in no our dictionary yet.\") : /*#__PURE__*/React.createElement(React.Fragment, null), state.isPathNotFound ?\n    /*#__PURE__*/\n    //if there is a path not found\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"looks like there is no path between:\", [...state.pathsNotFound].map(path => /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 24\n      }\n    }, \" \", path.first), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 49\n      }\n    }, path.last, \",\")))) : /*#__PURE__*/React.createElement(React.Fragment, null), state.isFetchFailed ?\n    /*#__PURE__*/\n    //There is a problem with the network\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, \"Could not connect to server.\") : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, state.errorMsg));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n}\n\nexport default AlertContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Alert.js"],"names":["React","useState","useEffect","Alert","ProgressBar","AlertContainer","state","dispatchState","percentage","setPercentange","interval","setInterval","clearInterval","type","isError","isWordNotFound","wordsNotFound","map","word","isPathNotFound","pathsNotFound","path","first","last","isFetchFailed","errorMsg"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,WAAhB,QAAmC,iBAAnC;AACA,OAAO,sCAAP;AAEA;;;;;;;AAOA,SAASC,cAAT,CAAwB;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAxB,EAAgD;AAC9C;AACA;AACA,QAAM,CAAEC,UAAF,EAAcC,cAAd,IAAiCR,QAAQ,CAAC,CAAD,CAA/C,CAH8C,CAI9C;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,QAAQ,GAAG,IAAf;;AACA,QAAIF,UAAU,GAAG,GAAjB,EAAsB;AACpBE,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BF,QAAAA,cAAc,CAACD,UAAU,IAAIA,UAAU,GAAG,CAA5B,CAAd;AACD,OAFqB,EAEnB,GAFmB,CAAtB;AAGD,KAJD,MAIM;AAAE;AACNI,MAAAA,aAAa,CAACF,QAAD,CAAb,CADI,CACqB;AACzB;;AACAH,MAAAA,aAAa,CAAC;AAACM,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAb;AACD;;AACD,WAAO,MAAM;AACXD,MAAAA,aAAa,CAACF,QAAD,CAAb,CADW,CAEX;AACD,KAHD;AAID,GAfQ,EAeN,CAAEF,UAAF,EAAcD,aAAd,CAfM,CAAT;;AAkBA,MAAID,KAAK,CAACQ,OAAV,EAAmB;AACjB,wBACE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,QAAf;AAAwB,MAAA,WAAW,MAAnC;AACE,MAAA,OAAO,EAAE,MAAMP,aAAa,CAAC;AAACM,QAAAA,IAAI,EAAE;AAAP,OAAD,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE,oBAAC,WAAD;AAAa,MAAA,OAAO,EAAC,QAArB;AAA8B,MAAA,GAAG,EAAEL,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,EAIGF,KAAK,CAACS,cAAN;AAAA;AAAsB;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACV,CAAC,GAAGT,KAAK,CAACU,aAAV,EAAyBC,GAAzB,CAA6BC,IAAI,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,IAAJ,OAArC,CADU,CAAd,8BADC,gBAGmC,yCAPtC,EAQGZ,KAAK,CAACa,cAAN;AAAA;AAAsB;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACG,CAAC,GAAGb,KAAK,CAACc,aAAV,EAAyBH,GAAzB,CACCI,IAAI,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAKA,IAAI,CAACC,KAAV,CAAH,wBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,IAAI,CAACE,IAAT,MAA5B,CADT,CADH,CADC,gBAIM,yCAZT,EAaGjB,KAAK,CAACkB,aAAN;AAAA;AAAqB;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADC,gBACqC,yCAdxC,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIlB,KAAK,CAACmB,QAAV,CAfF,CADF;AAkBD,GAnBD,MAmBK;AACH,wBAAO,yCAAP;AACD;AACF;;AAED,eAAepB,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Alert, ProgressBar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({state, dispatchState}) {\n\t\t/* functions that return an error mesage depending onthe state */\n\t\t// set timer ro dismiss with hook\n\t\tconst [ percentage, setPercentange ] = useState(0)\n\t\t// use effect to set the interval to make a contant preogress\n\t\t//useEffect(() => setInterval( () => setPercentange(percentage+1), 2000), [percentage])\n\n\t\tuseEffect(() => {\n\t\t\t\tlet interval = null;\n\t\t\t\tif (percentage < 100) {\n\t\t\t\t\t\tinterval = setInterval(() => {\n\t\t\t\t\t\t\t\tsetPercentange(percentage => percentage + 1);\n\t\t\t\t\t\t}, 100);\n\t\t\t\t} else{ // if it has reached 100 percent\n\t\t\t\t\t\tclearInterval(interval); // stop the interval\n\t\t\t\t\t\t//setPercentange(0) // set percentage back to 0\n\t\t\t\t\t\tdispatchState({type: 'DISSMISS_ERROR' });\n\t\t\t\t}\n\t\t\t\treturn () => {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\t//dispatchState({type: 'DISSMISS_ERROR' });\n\t\t\t\t};\n\t\t}, [ percentage, dispatchState]);\n\n\n\t\tif (state.isError) {\n\t\t\t\treturn(\n\t\t\t\t\t\t<Alert variant=\"danger\" dismissible \n\t\t\t\t\t\t\t\tonClose={() => dispatchState({type: 'DISSMISS_ERROR'})} >\n\t\t\t\t\t\t\t\t<ProgressBar variant=\"danger\" now={percentage} />\n\t\t\t\t\t\t\t\t<Alert.Heading>Oh Snap!</Alert.Heading>\n\t\t\t\t\t\t\t\t{state.isWordNotFound? //if the there is not words found\n\t\t\t\t\t\t\t\t<p>Looks like <b>\n\t\t\t\t\t\t\t\t\t\t{ [...state.wordsNotFound].map(word => <i>{word}, </i> ) }\n\t\t\t\t\t\t\t\t</b>in no our dictionary yet.</p> : <></>}\n\t\t\t\t\t\t\t\t{state.isPathNotFound? //if there is a path not found\n\t\t\t\t\t\t\t\t<p>looks like there is no path between: \n\t\t\t\t\t\t\t\t\t\t{[...state.pathsNotFound].map(\n\t\t\t\t\t\t\t\t\t\t\t\tpath => <i><b> {path.first}</b> and <b>{path.last},</b></i> )}\n\t\t\t\t\t\t\t\t</p> : <></> }\n\t\t\t\t\t\t\t\t{state.isFetchFailed? //There is a problem with the network\n\t\t\t\t\t\t\t\t<p>Could not connect to server.</p> : <></> }\n\t\t\t\t\t\t\t\t<p>{state.errorMsg}</p>\n\t\t\t\t\t\t</Alert>)\n\t\t}else{\n\t\t\t\treturn <></>\n\t\t}\n}\n\nexport default AlertContainer;\n\n"]},"metadata":{},"sourceType":"module"}