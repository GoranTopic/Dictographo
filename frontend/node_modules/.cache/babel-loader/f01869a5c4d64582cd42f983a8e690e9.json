{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT } from \"../../myConfig\";\nimport styles from './SearchSuggestion.css';\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nimport Autosuggest from 'react-autosuggest';\n\nconst filterSuggestions = suggestions => {\n  return suggestions.filter(suggestion => /\\s/.test(suggestion));\n};\n\nconst getSuggestionValue = suggestion => suggestion; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }\n}, suggestion.w_id);\n\nclass Example extends React.Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = async ({\n      value\n    }) => {\n      if (value.length > 2) {\n        console.log(value);\n        fetch(API_ENDPOINT + query_search + value).then(result => result.json()) //unpack suggestions\n        .then(suggestions => {\n          console.log(suggestions);\n          return suggestions;\n        }).then(suggestions => filterSuggestions(suggestions)).then(suggestions => this.setState({\n          suggestions: suggestions,\n          value: value\n        })).catch(err => console.log(err));\n      }\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'dog cat',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nlet query_search = 'querysearch/';\n\nfunction SuggestionsContainer(props) {\n  /* tahek a child fro a input an add suggestions to it */\n  // handle the change by seting the state variable to \n  let state = props.state;\n  let dispatchState = props.dispatchState;\n  const activeSuggestion = 1;\n  const [suggestions, setSuggestions] = useState([]);\n  const [selected, setSetselected] = useState(0);\n\n  const filterSuggestions = suggestions => suggestions.filter(suggestion => /\\s/.test(suggestion));\n\n  const onClick = event => {\n    console.log(event);\n  };\n\n  useEffect(() => {\n    /* query server for search suggestionsa\n     * and sets the  */\n    console.log(\"I ran\");\n    fetch(API_ENDPOINT + query_search + state.searchTerm).then(result => result.json()) //unpack suggestions\n    .then(result => {\n      console.log(result);\n      return result;\n    }) //unpack suggestions\n    .then(suggestions => filterSuggestions(suggestions)).then(suggestions => setSuggestions(suggestions)).catch(err => console.log(err));\n  }, [state.searchTerm, dispatchState]);\n\n  const SuggestionList = () => /*#__PURE__*/React.createElement(\"ul\", {\n    class: \"suggestions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, suggestions.map((suggestion, index) => {\n    let className;\n    if (index === activeSuggestion) className = styles.active;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      className: className,\n      onClick: index = onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    }, suggestion.word);\n  }));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 10\n    }\n  }, props.children, state.searchTerm.length > 2 ? /*#__PURE__*/React.createElement(SuggestionList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 35\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n} //<Example/>\n\n\nexport default SuggestionsContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js"],"names":["React","useState","useEffect","API_ENDPOINT","styles","Autosuggest","filterSuggestions","suggestions","filter","suggestion","test","getSuggestionValue","renderSuggestion","w_id","Example","Component","constructor","onChange","event","newValue","setState","value","onSuggestionsFetchRequested","length","console","log","fetch","query_search","then","result","json","catch","err","onSuggestionsClearRequested","state","render","inputProps","placeholder","SuggestionsContainer","props","dispatchState","activeSuggestion","setSuggestions","selected","setSetselected","onClick","searchTerm","SuggestionList","map","index","className","active","word","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA;;;;;;;AAOA,OAAOC,WAAP,MAAwB,mBAAxB;;AAGA,MAAMC,iBAAiB,GAAGC,WAAW,IAAI;AACvC,SAAOA,WAAW,CAACC,MAAZ,CAAoBC,UAAU,IAAI,KAAKC,IAAL,CAAUD,UAAV,CAAlC,CAAP;AACD,CAFD;;AAIA,MAAME,kBAAkB,GAAGF,UAAU,IAAIA,UAAzC,C,CAEA;;;AACA,MAAMG,gBAAgB,GAAGH,UAAU,iBACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGA,UAAU,CAACI,IADd,CADF;;AAMA,MAAMC,OAAN,SAAsBd,KAAK,CAACe,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SASdC,QATc,GASH,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAEF;AADK,OAAd;AAGD,KAba;;AAAA,SAedG,2BAfc,GAegB,OAAO;AAAED,MAAAA;AAAF,KAAP,KAAqB;AACjD,UAAGA,KAAK,CAACE,MAAN,GAAe,CAAlB,EAAoB;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAK,QAAAA,KAAK,CAACvB,YAAY,GAAGwB,YAAf,GAA8BN,KAA/B,CAAL,CACGO,IADH,CACQC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADlB,EACiC;AADjC,SAEGF,IAFH,CAEQrB,WAAW,IAAI;AAAEiB,UAAAA,OAAO,CAACC,GAAR,CAAYlB,WAAZ;AAA0B,iBAAOA,WAAP;AAAoB,SAFvE,EAGGqB,IAHH,CAGQrB,WAAW,IAAID,iBAAiB,CAACC,WAAD,CAHxC,EAIGqB,IAJH,CAIQrB,WAAW,IAAI,KAAKa,QAAL,CAAc;AACjCb,UAAAA,WAAW,EAAEA,WADoB;AAEjCc,UAAAA,KAAK,EAAEA;AAF0B,SAAd,CAJvB,EAOIU,KAPJ,CAOWC,GAAD,IAASR,OAAO,CAACC,GAAR,CAAYO,GAAZ,CAPnB;AAQD;AACF,KA3Ba;;AAAA,SA6BdC,2BA7Bc,GA6BgB,MAAM;AAClC,WAAKb,QAAL,CAAc;AACNb,QAAAA,WAAW,EAAE;AADP,OAAd;AAID,KAlCa;;AAEZ,SAAK2B,KAAL,GAAa;AACXb,MAAAA,KAAK,EAAE,EADI;AAEXd,MAAAA,WAAW,EAAE;AAFF,KAAb;AAKG;;AA6BL4B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEd,MAAAA,KAAF;AAASd,MAAAA;AAAT,QAA0B,KAAK2B,KAArC,CADO,CAGP;;AACA,UAAME,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,SADI;AAEjBhB,MAAAA,KAFiB;AAGjBJ,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB,CAJO,CAUP;;AACA,wBACE,oBAAC,WAAD;AACE,MAAA,WAAW,EAAEV,WADf;AAEE,MAAA,2BAA2B,EAAE,KAAKe,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAKW,2BAHpC;AAIE,MAAA,kBAAkB,EAAEtB,kBAJtB;AAKE,MAAA,gBAAgB,EAAEC,gBALpB;AAME,MAAA,UAAU,EAAEwB,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AA1DmC;;AA6DtC,IAAIT,YAAY,GAAG,cAAnB;;AAEA,SAASW,oBAAT,CAA8BC,KAA9B,EAAoC;AACnC;AACC;AACA,MAAIL,KAAK,GAAGK,KAAK,CAACL,KAAlB;AACA,MAAIM,aAAa,GAAGD,KAAK,CAACC,aAA1B;AACA,QAAMC,gBAAgB,GAAG,CAAzB;AACA,QAAM,CAAClC,WAAD,EAAcmC,cAAd,IAAgCzC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC0C,QAAD,EAAWC,cAAX,IAA6B3C,QAAQ,CAAC,CAAD,CAA3C;;AAEA,QAAMK,iBAAiB,GAAGC,WAAW,IACnCA,WAAW,CAACC,MAAZ,CAAoBC,UAAU,IAAI,KAAKC,IAAL,CAAUD,UAAV,CAAlC,CADF;;AAGA,QAAMoC,OAAO,GAAI3B,KAAD,IAAW;AAC1BM,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACA,GAFD;;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACd;;AAEAsB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAC,IAAAA,KAAK,CAACvB,YAAY,GAAGwB,YAAf,GAA8BO,KAAK,CAACY,UAArC,CAAL,CACGlB,IADH,CACQC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADlB,EACiC;AADjC,KAEGF,IAFH,CAEQC,MAAM,IAAI;AAACL,MAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AAAqB,aAAOA,MAAP;AAAc,KAFtD,EAEwD;AAFxD,KAGGD,IAHH,CAGQrB,WAAW,IAAID,iBAAiB,CAACC,WAAD,CAHxC,EAIGqB,IAJH,CAIQrB,WAAW,IAAImC,cAAc,CAACnC,WAAD,CAJrC,EAKGwB,KALH,CAKUC,GAAD,IAASR,OAAO,CAACC,GAAR,CAAYO,GAAZ,CALlB;AAMD,GAVQ,EAUN,CAACE,KAAK,CAACY,UAAP,EAAmBN,aAAnB,CAVM,CAAT;;AAYA,QAAMO,cAAc,GAAG,mBACrB;AAAI,IAAA,KAAK,EAAC,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIxC,WAAW,CAACyC,GAAZ,CACA,CAACvC,UAAD,EAAawC,KAAb,KAAuB;AACrB,QAAIC,SAAJ;AACA,QAAID,KAAK,KAAKR,gBAAd,EACES,SAAS,GAAG9C,MAAM,CAAC+C,MAAnB;AACF,wBAAQ;AACN,MAAA,GAAG,EAAEF,KADC;AAEN,MAAA,SAAS,EAAEC,SAFL;AAGN,MAAA,OAAO,EAAGD,KAAD,GAAQJ,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAILpC,UAAU,CAAC2C,IAJN,CAAR;AAMD,GAXD,CADJ,CADF;;AAiBA,sBAAO;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACJb,KAAK,CAACc,QADF,EAEJnB,KAAK,CAACY,UAAN,CAAiBvB,MAAjB,GAA0B,CAA1B,gBAA6B,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,gBAAgD,yCAF5C,CAAP;AAID,C,CAEG;;;AAGJ,eAAee,oBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT }  from \"../../myConfig\";\nimport styles from './SearchSuggestion.css'; \n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nimport Autosuggest from 'react-autosuggest';\n\n\nconst filterSuggestions = suggestions => {\n\t\treturn suggestions.filter( suggestion => /\\s/.test(suggestion))\n};\n\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n\t\t<div>\n\t\t\t\t{suggestion.w_id}\n\t\t</div>\n);\n\nclass Example extends React.Component {\n\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.state = {\n\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\tsuggestions: []\n\t\t\t\t\t\t    \n\t\t\t\t};\n\t\t\t\t  }\n\n\t\tonChange = (event, { newValue }) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\tvalue: newValue \n\t\t\t\t})\n\t\t};\n\t\t\n\t\tonSuggestionsFetchRequested = async ({ value }) => {\n\t\t\t\tif(value.length > 2){\n\t\t\t\t\t\tconsole.log(value);\n\t\t\t\t\t\tfetch(API_ENDPOINT + query_search + value)\n\t\t\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t\t\t.then(suggestions => { console.log(suggestions); return suggestions })\n\t\t\t\t\t\t\t\t.then(suggestions => filterSuggestions(suggestions))\n\t\t\t\t\t\t\t\t.then(suggestions => this.setState({\n\t\t\t\t\t\t\t\t\t\tsuggestions: suggestions,\n\t\t\t\t\t\t\t\t\t\tvalue: value })\n\t\t\t\t\t\t\t\t).catch((err) => console.log(err));\n\t\t\t\t}\n\t\t};\n\n\t\tonSuggestionsClearRequested = () => {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\t      suggestions: []\n\t\t\t\t});\n\t\t\t\t  \n\t\t};\n\n\t\trender() {\n\t\t\t\tconst { value, suggestions  } = this.state;\n\n\t\t\t\t// Autosuggest will pass through all these props to the input.\n\t\t\t\tconst inputProps = {\n\t\t\t\t\t\tplaceholder: 'dog cat',\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tonChange: this.onChange\n\t\t\t\t};\n\n\t\t\t\t// Finally, render it!\n\t\t\t\treturn (\n\t\t\t\t\t\t<Autosuggest\n\t\t\t\t\t\t\t\tsuggestions={suggestions}\n\t\t\t\t\t\t\t\tonSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n\t\t\t\t\t\t\t\tonSuggestionsClearRequested={this.onSuggestionsClearRequested}\n\t\t\t\t\t\t\t\tgetSuggestionValue={getSuggestionValue}\n\t\t\t\t\t\t\t\trenderSuggestion={renderSuggestion}\n\t\t\t\t\t\t\t\tinputProps={inputProps}\n\t\t\t\t\t\t/>\n\t\t\t\t);\n\t\t}\n}\n\nlet query_search = 'querysearch/'\n\nfunction SuggestionsContainer(props){\n\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t\tconst activeSuggestion = 1;\n\t\tconst [suggestions, setSuggestions] = useState([])\t\n\t\tconst [selected, setSetselected] = useState(0)\t\n\t\t\t\t\n\t\tconst filterSuggestions = suggestions => \n\t\t\t\tsuggestions.filter( suggestion => /\\s/.test(suggestion))\n\n\t\tconst onClick = (event) => {\n\t\t\tconsole.log(event)\n\t\t}\n\n\t\tuseEffect(() => {\n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tconsole.log(\"I ran\");\n\t\t\t\tfetch(API_ENDPOINT + query_search + state.searchTerm)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(result => {console.log(result); return result}) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => filterSuggestions(suggestions))\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch((err) => console.log(err));\n\t\t}, [state.searchTerm, dispatchState])\n\n\t\tconst SuggestionList = () =>\n\t\t\t\t<ul class=\"suggestions\">\n\t\t\t\t\t\t{ suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => {  \n\t\t\t\t\t\t\t\t\t\tlet className;\n\t\t\t\t\t\t\t\t\t\tif (index === activeSuggestion) \n\t\t\t\t\t\t\t\t\t\t\t\tclassName = styles.active\n\t\t\t\t\t\t\t\t\t\treturn  <li \n\t\t\t\t\t\t\t\t\t\t\t\tkey={index} \n\t\t\t\t\t\t\t\t\t\t\t\tclassName={className}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={(index)=onClick}>\n\t\t\t\t\t\t\t\t\t\t\t\t{suggestion.word}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t</ul>\n\n\t\treturn <div className=\"input\">\n\t\t\t\t{props.children}\n\t\t\t\t{state.searchTerm.length > 2? <SuggestionList/>: <></> }\n\t\t</div>\n}\n\n\t\t\t\t//<Example/>\n\n\nexport default SuggestionsContainer;\n"]},"metadata":{},"sourceType":"module"}