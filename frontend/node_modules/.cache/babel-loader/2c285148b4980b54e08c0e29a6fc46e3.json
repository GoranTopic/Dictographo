{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkForGraphConfigChanges = checkForGraphConfigChanges;\nexports.checkForGraphElementsChanges = checkForGraphElementsChanges;\nexports.getCenterAndZoomTransformation = getCenterAndZoomTransformation;\nexports.getId = getId;\nexports.initializeGraphState = initializeGraphState;\nexports.updateNodeHighlightedValue = updateNodeHighlightedValue;\nexports.getNormalizedNodeCoordinates = getNormalizedNodeCoordinates;\n\nvar _d3Force = require(\"d3-force\");\n\nvar _graph2 = _interopRequireDefault(require(\"./graph.const\"));\n\nvar _graph3 = _interopRequireDefault(require(\"./graph.config\"));\n\nvar _err = _interopRequireDefault(require(\"../../err\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _collapse = require(\"./collapse.helper\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar NODE_PROPS_WHITELIST = [\"id\", \"highlighted\", \"x\", \"y\", \"index\", \"vy\", \"vx\"];\nvar LINK_PROPS_WHITELIST = [\"index\", \"source\", \"target\", \"isHidden\"];\n/**\n * Create d3 forceSimulation to be applied on the graph.<br/>\n * {@link https://github.com/d3/d3-force#forceSimulation|d3-force#forceSimulation}<br/>\n * {@link https://github.com/d3/d3-force#simulation_force|d3-force#simulation_force}<br/>\n * Wtf is a force? {@link https://github.com/d3/d3-force#forces| here}\n * @param  {number} width - the width of the container area of the graph.\n * @param  {number} height - the height of the container area of the graph.\n * @param  {number} gravity - the force strength applied to the graph.\n * @returns {Object} returns the simulation instance to be consumed.\n * @memberof Graph/helper\n */\n\nfunction _createForceSimulation(width, height, gravity) {\n  var frx = (0, _d3Force.forceX)(width / 2).strength(_graph2[\"default\"].FORCE_X);\n  var fry = (0, _d3Force.forceY)(height / 2).strength(_graph2[\"default\"].FORCE_Y);\n  var forceStrength = gravity;\n  return (0, _d3Force.forceSimulation)().force(\"charge\", (0, _d3Force.forceManyBody)().strength(forceStrength)).force(\"x\", frx).force(\"y\", fry);\n}\n/**\n * Receives a matrix of the graph with the links source and target as concrete node instances and it transforms it\n * in a lightweight matrix containing only links with source and target being strings representative of some node id\n * and the respective link value (if non existent will default to 1).\n * @param  {Array.<Link>} graphLinks - an array of all graph links.\n * @param  {Object} config - the graph config.\n * @returns {Object.<string, Object>} an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @memberof Graph/helper\n */\n\n\nfunction _initializeLinks(graphLinks, config) {\n  return graphLinks.reduce(function (links, l) {\n    var source = getId(l.source);\n    var target = getId(l.target);\n\n    if (!links[source]) {\n      links[source] = {};\n    }\n\n    if (!links[target]) {\n      links[target] = {};\n    }\n\n    var value = config.collapsible && l.isHidden ? 0 : l.value || 1;\n    links[source][target] = value;\n\n    if (!config.directed) {\n      links[target][source] = value;\n    }\n\n    return links;\n  }, {});\n}\n/**\n * Method that initialize graph nodes provided by rd3g consumer and adds additional default mandatory properties\n * that are optional for the user. Also it generates an index mapping, this maps nodes ids the their index in the array\n * of nodes. This is needed because d3 callbacks such as node click and link click return the index of the node.\n * @param  {Array.<Node>} graphNodes - the array of nodes provided by the rd3g consumer.\n * @returns {Object.<string, Object>} returns the nodes ready to be used within rd3g with additional properties such as x, y\n * and highlighted values.\n * @memberof Graph/helper\n */\n\n\nfunction _initializeNodes(graphNodes) {\n  var nodes = {};\n  var n = graphNodes.length;\n\n  for (var i = 0; i < n; i++) {\n    var node = graphNodes[i];\n    node.highlighted = false;\n\n    if (!Object.prototype.hasOwnProperty.call(node, \"x\")) {\n      node.x = 0;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(node, \"y\")) {\n      node.y = 0;\n    }\n\n    nodes[node.id.toString()] = node;\n  }\n\n  return nodes;\n}\n/**\n * Maps an input link (with format `{ source: 'sourceId', target: 'targetId' }`) to a d3Link\n * (with format `{ source: { id: 'sourceId' }, target: { id: 'targetId' } }`). If d3Link with\n * given index exists already that same d3Link is returned.\n * @param {Object} link - input link.\n * @param {number} index - index of the input link.\n * @param {Array.<Object>} d3Links - all d3Links.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a d3Link.\n * @memberof Graph/helper\n */\n\n\nfunction _mergeDataLinkWithD3Link(link, index) {\n  var d3Links = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var config = arguments.length > 3 ? arguments[3] : undefined;\n  var state = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {}; // find the matching link if it exists\n\n  var tmp = d3Links.find(function (l) {\n    return l.source.id === link.source && l.target.id === link.target;\n  });\n  var d3Link = tmp && (0, _utils.pick)(tmp, LINK_PROPS_WHITELIST);\n  var customProps = (0, _utils.antiPick)(link, [\"source\", \"target\"]);\n\n  if (d3Link) {\n    var toggledDirected = state.config && Object.prototype.hasOwnProperty.call(state.config, \"directed\") && config.directed !== state.config.directed;\n\n    var refinedD3Link = _objectSpread({\n      index: index\n    }, d3Link, {}, customProps); // every time we toggle directed config all links should be visible again\n\n\n    if (toggledDirected) {\n      return _objectSpread({}, refinedD3Link, {\n        isHidden: false\n      });\n    } // every time we disable collapsible (collapsible is false) all links should be visible again\n\n\n    return config.collapsible ? refinedD3Link : _objectSpread({}, refinedD3Link, {\n      isHidden: false\n    });\n  }\n\n  var highlighted = false;\n  var source = {\n    id: link.source,\n    highlighted: highlighted\n  };\n  var target = {\n    id: link.target,\n    highlighted: highlighted\n  };\n  return _objectSpread({\n    index: index,\n    source: source,\n    target: target\n  }, customProps);\n}\n/**\n * Tags orphan nodes with a `_orphan` flag.\n * @param {Object.<string, Object>} nodes - nodes mapped by their id.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @returns {Object.<string, Object>} same input nodes structure with tagged orphans nodes where applicable.\n * @memberof Graph/helper\n */\n\n\nfunction _tagOrphanNodes(nodes, linksMatrix) {\n  return Object.keys(nodes).reduce(function (acc, nodeId) {\n    var _computeNodeDegree = (0, _collapse.computeNodeDegree)(nodeId, linksMatrix),\n        inDegree = _computeNodeDegree.inDegree,\n        outDegree = _computeNodeDegree.outDegree;\n\n    var node = nodes[nodeId];\n    var taggedNode = inDegree === 0 && outDegree === 0 ? _objectSpread({}, node, {\n      _orphan: true\n    }) : node;\n    acc[nodeId] = taggedNode;\n    return acc;\n  }, {});\n}\n/**\n * Some integrity validations on links and nodes structure. If some validation fails the function will\n * throw an error.\n * @param  {Object} data - Same as {@link #initializeGraphState|data in initializeGraphState}.\n * @throws can throw the following error or warning msg:\n * INSUFFICIENT_DATA - msg if no nodes are provided\n * INVALID_LINKS - if links point to nonexistent nodes\n * INSUFFICIENT_LINKS - if no links are provided (not even empty Array)\n * @returns {undefined}\n * @memberof Graph/helper\n */\n\n\nfunction _validateGraphData(data) {\n  if (!data.nodes || !data.nodes.length) {\n    (0, _utils.throwErr)(\"Graph\", _err[\"default\"].INSUFFICIENT_DATA);\n  }\n\n  if (!data.links) {\n    (0, _utils.logWarning)(\"Graph\", _err[\"default\"].INSUFFICIENT_LINKS);\n    data.links = [];\n  }\n\n  var n = data.links.length;\n\n  var _loop = function _loop(i) {\n    var l = data.links[i];\n\n    if (!data.nodes.find(function (n) {\n      return n.id === l.source;\n    })) {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINKS, \" - \\\"\").concat(l.source, \"\\\" is not a valid source node id\"));\n    }\n\n    if (!data.nodes.find(function (n) {\n      return n.id === l.target;\n    })) {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINKS, \" - \\\"\").concat(l.target, \"\\\" is not a valid target node id\"));\n    }\n\n    if (l && l.value !== undefined && typeof l.value !== \"number\") {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINK_VALUE, \" - found in link with source \\\"\").concat(l.source, \"\\\" and target \\\"\").concat(l.target, \"\\\"\"));\n    }\n  };\n\n  for (var i = 0; i < n; i++) {\n    _loop(i);\n  }\n} // list of properties that are of no interest when it comes to nodes and links comparison\n\n\nvar NODE_PROPERTIES_DISCARD_TO_COMPARE = [\"x\", \"y\", \"vx\", \"vy\", \"index\"];\n/**\n * Picks the id.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with id property only.\n * @memberof Graph/helper\n */\n\nfunction _pickId(o) {\n  return (0, _utils.pick)(o, [\"id\"]);\n}\n/**\n * Picks source and target.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with source and target only.\n * @memberof Graph/helper\n */\n\n\nfunction _pickSourceAndTarget(o) {\n  return (0, _utils.pick)(o, [\"source\", \"target\"]);\n}\n/**\n * This function checks for graph elements (nodes and links) changes, in two different\n * levels of significance, updated elements (whether some property has changed in some\n * node or link) and new elements (whether some new elements or added/removed from the graph).\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - newGraphElements - flag that indicates whether new graph elements were added.\n * - graphElementsUpdated - flag that indicates whether some graph elements have\n * updated (some property that is not in NODE_PROPERTIES_DISCARD_TO_COMPARE was added to\n * some node or link or was updated).\n * @memberof Graph/helper\n */\n\n\nfunction checkForGraphElementsChanges(nextProps, currentState) {\n  var nextNodes = nextProps.data.nodes.map(function (n) {\n    return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);\n  });\n  var nextLinks = nextProps.data.links;\n  var stateD3Nodes = currentState.d3Nodes.map(function (n) {\n    return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);\n  });\n  var stateD3Links = currentState.d3Links.map(function (l) {\n    return {\n      source: getId(l.source),\n      target: getId(l.target)\n    };\n  });\n  var graphElementsUpdated = !((0, _utils.isDeepEqual)(nextNodes, stateD3Nodes) && (0, _utils.isDeepEqual)(nextLinks, stateD3Links));\n  var newGraphElements = nextNodes.length !== stateD3Nodes.length || nextLinks.length !== stateD3Links.length || !(0, _utils.isDeepEqual)(nextNodes.map(_pickId), stateD3Nodes.map(_pickId)) || !(0, _utils.isDeepEqual)(nextLinks.map(_pickSourceAndTarget), stateD3Links.map(_pickSourceAndTarget));\n  return {\n    graphElementsUpdated: graphElementsUpdated,\n    newGraphElements: newGraphElements\n  };\n}\n/**\n * Logic to check for changes in graph config.\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - configUpdated - global flag that indicates if any property was updated.\n * - d3ConfigUpdated - specific flag that indicates changes in d3 configurations.\n * @memberof Graph/helper\n */\n\n\nfunction checkForGraphConfigChanges(nextProps, currentState) {\n  var newConfig = nextProps.config || {};\n  var configUpdated = newConfig && !(0, _utils.isEmptyObject)(newConfig) && !(0, _utils.isDeepEqual)(newConfig, currentState.config);\n  var d3ConfigUpdated = newConfig && newConfig.d3 && !(0, _utils.isDeepEqual)(newConfig.d3, currentState.config.d3);\n  return {\n    configUpdated: configUpdated,\n    d3ConfigUpdated: d3ConfigUpdated\n  };\n}\n/**\n * Returns the transformation to apply in order to center the graph on the\n * selected node.\n * @param {Object} d3Node - node to focus the graph view on.\n * @param {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @returns {string|undefined} transform rule to apply.\n * @memberof Graph/helper\n */\n\n\nfunction getCenterAndZoomTransformation(d3Node, config) {\n  if (!d3Node) {\n    return;\n  }\n\n  var width = config.width,\n      height = config.height,\n      focusZoom = config.focusZoom;\n  return \"\\n        translate(\".concat(width / 2, \", \").concat(height / 2, \")\\n        scale(\").concat(focusZoom, \")\\n        translate(\").concat(-d3Node.x, \", \").concat(-d3Node.y, \")\\n    \");\n}\n/**\n * This function extracts an id from a link.\n * **Why this function?**\n * According to [d3-force](https://github.com/d3/d3-force#link_links)\n * d3 links might be initialized with \"source\" and \"target\"\n * properties as numbers or strings, but after initialization they\n * are converted to an object. This small utility functions ensures\n * that weather in initialization or further into the lifetime of the graph\n * we always get the id.\n * @param {Object|string|number} sot source or target\n * of the link to extract id.\n * we want to extract an id.\n * @returns {string|number} the id of the link.\n * @memberof Graph/helper\n */\n\n\nfunction getId(sot) {\n  return sot.id !== undefined && sot.id !== null ? sot.id : sot;\n}\n/**\n * Encapsulates common procedures to initialize graph.\n * @param {Object} props - Graph component props, object that holds data, id and config.\n * @param {Object} props.data - Data object holds links (array of **Link**) and nodes (array of **Node**).\n * @param {string} props.id - the graph id.\n * @param {Object} props.config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a fully (re)initialized graph state object.\n * @memberof Graph/helper\n */\n\n\nfunction initializeGraphState(_ref, state) {\n  var data = _ref.data,\n      id = _ref.id,\n      config = _ref.config;\n\n  _validateGraphData(data);\n\n  var graph;\n\n  if (state && state.nodes) {\n    graph = {\n      nodes: data.nodes.map(function (n) {\n        return state.nodes[n.id] ? _objectSpread({}, n, {}, (0, _utils.pick)(state.nodes[n.id], NODE_PROPS_WHITELIST)) : _objectSpread({}, n);\n      }),\n      links: data.links.map(function (l, index) {\n        return _mergeDataLinkWithD3Link(l, index, state && state.d3Links, config, state);\n      })\n    };\n  } else {\n    graph = {\n      nodes: data.nodes.map(function (n) {\n        return _objectSpread({}, n);\n      }),\n      links: data.links.map(function (l) {\n        return _objectSpread({}, l);\n      })\n    };\n  }\n\n  var newConfig = _objectSpread({}, (0, _utils.merge)(_graph3[\"default\"], config || {})),\n      links = _initializeLinks(graph.links, newConfig),\n      // matrix of graph connections\n  nodes = _tagOrphanNodes(_initializeNodes(graph.nodes), links);\n\n  var _graph = graph,\n      d3Nodes = _graph.nodes,\n      d3Links = _graph.links;\n  var formatedId = id.replace(/ /g, \"_\");\n\n  var simulation = _createForceSimulation(newConfig.width, newConfig.height, newConfig.d3 && newConfig.d3.gravity);\n\n  var minZoom = newConfig.minZoom,\n      maxZoom = newConfig.maxZoom,\n      focusZoom = newConfig.focusZoom;\n\n  if (focusZoom > maxZoom) {\n    newConfig.focusZoom = maxZoom;\n  } else if (focusZoom < minZoom) {\n    newConfig.focusZoom = minZoom;\n  }\n\n  return {\n    id: formatedId,\n    config: newConfig,\n    links: links,\n    d3Links: d3Links,\n    nodes: nodes,\n    d3Nodes: d3Nodes,\n    highlightedNode: \"\",\n    simulation: simulation,\n    newGraphElements: false,\n    configUpdated: false,\n    transform: 1,\n    draggedNode: null\n  };\n}\n/**\n * This function updates the highlighted value for a given node and also updates highlight props.\n * @param {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, Object>} links - an object containing a matrix of connections of the graph.\n * @param {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param {string} id - identifier of node to update.\n * @param {string} value - new highlight value for given node.\n * @returns {Object} returns an object containing the updated nodes\n * and the id of the highlighted node.\n * @memberof Graph/helper\n */\n\n\nfunction updateNodeHighlightedValue(nodes, links, config, id) {\n  var value = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var highlightedNode = value ? id : \"\";\n\n  var node = _objectSpread({}, nodes[id], {\n    highlighted: value\n  });\n\n  var updatedNodes = _objectSpread({}, nodes, _defineProperty({}, id, node)); // when highlightDegree is 0 we want only to highlight selected node\n\n\n  if (links[id] && config.highlightDegree !== 0) {\n    updatedNodes = Object.keys(links[id]).reduce(function (acc, linkId) {\n      var updatedNode = _objectSpread({}, updatedNodes[linkId], {\n        highlighted: value\n      });\n\n      acc[linkId] = updatedNode;\n      return acc;\n    }, updatedNodes);\n  }\n\n  return {\n    nodes: updatedNodes,\n    highlightedNode: highlightedNode\n  };\n}\n/**\n * Computes the normalized vector from a vector.\n * @param {Object} vector a 2D vector with x and y components\n * @param {number} vector.x x coordinate\n * @param {number} vector.y y coordinate\n * @returns {Object} normalized vector\n */\n\n\nfunction normalize(vector) {\n  var norm = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n  return {\n    x: vector.x / norm,\n    y: vector.y / norm\n  };\n}\n/**\n * Computes new node coordinates to make arrowheads point at nodes.\n * Arrow configuration is only available for circles.\n * @param {Object} node - the couple of nodes we need to compute new coordinates\n * @param {Object} node.source - node source\n * @param {Object} node.target - node target\n * @param {Object.<string, Object>} nodes - same as {@link #graphrenderer|nodes in renderGraph}.\n * @param {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {number} strokeWidth width of the link stroke\n * @returns {Object} new nodes coordinates\n */\n\n\nfunction getNormalizedNodeCoordinates(_ref2, nodes, config, strokeWidth) {\n  var _config$node, _config$node2;\n\n  var _ref2$source = _ref2.source,\n      source = _ref2$source === void 0 ? {} : _ref2$source,\n      _ref2$target = _ref2.target,\n      target = _ref2$target === void 0 ? {} : _ref2$target;\n\n  if ((_config$node = config.node) === null || _config$node === void 0 ? void 0 : _config$node.viewGenerator) {\n    return {\n      source: source,\n      target: target\n    };\n  }\n\n  var x1 = source.x,\n      y1 = source.y;\n  var x2 = target.x,\n      y2 = target.y;\n\n  switch ((_config$node2 = config.node) === null || _config$node2 === void 0 ? void 0 : _config$node2.symbolType) {\n    case _graph2[\"default\"].SYMBOLS.CIRCLE:\n      {\n        var _nodes$source;\n\n        var directionVector = normalize({\n          x: x2 - x1,\n          y: y2 - y1\n        });\n        var strokeSize = strokeWidth * Math.min(config.link.markerWidth, config.link.markerHeight);\n        var nodeSize = (nodes === null || nodes === void 0 ? void 0 : (_nodes$source = nodes[source]) === null || _nodes$source === void 0 ? void 0 : _nodes$source.size) || config.node.size; // cause this is a circle and A = pi * r^2\n        // we multiply by 0.95, because if we don't the link is not melting properly\n\n        nodeSize = Math.sqrt(nodeSize / Math.PI) * 0.95; // points from the source, we move them not to begin in the circle but outside\n\n        x1 += nodeSize * directionVector.x;\n        y1 += nodeSize * directionVector.y; // points from the target, we move the by the size of the radius of the circle + the size of the arrow\n\n        x2 -= (nodeSize + (config.directed ? strokeSize : 0)) * directionVector.x;\n        y2 -= (nodeSize + (config.directed ? strokeSize : 0)) * directionVector.y;\n        break;\n      }\n  }\n\n  return {\n    source: {\n      x: x1,\n      y: y1\n    },\n    target: {\n      x: x2,\n      y: y2\n    }\n  };\n}","map":{"version":3,"sources":["/home/telix/dictio-grapho/node_modules/react-d3-graph/lib/components/graph/graph.helper.js"],"names":["Object","defineProperty","exports","value","checkForGraphConfigChanges","checkForGraphElementsChanges","getCenterAndZoomTransformation","getId","initializeGraphState","updateNodeHighlightedValue","getNormalizedNodeCoordinates","_d3Force","require","_graph2","_interopRequireDefault","_graph3","_err","_utils","_collapse","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","NODE_PROPS_WHITELIST","LINK_PROPS_WHITELIST","_createForceSimulation","width","height","gravity","frx","forceX","strength","FORCE_X","fry","forceY","FORCE_Y","forceStrength","forceSimulation","force","forceManyBody","_initializeLinks","graphLinks","config","reduce","links","l","collapsible","isHidden","directed","_initializeNodes","graphNodes","nodes","n","node","highlighted","prototype","hasOwnProperty","call","x","y","id","toString","_mergeDataLinkWithD3Link","link","index","d3Links","undefined","state","tmp","find","d3Link","pick","customProps","antiPick","toggledDirected","refinedD3Link","_tagOrphanNodes","linksMatrix","acc","nodeId","_computeNodeDegree","computeNodeDegree","inDegree","outDegree","taggedNode","_orphan","_validateGraphData","data","throwErr","INSUFFICIENT_DATA","logWarning","INSUFFICIENT_LINKS","_loop","concat","INVALID_LINKS","INVALID_LINK_VALUE","NODE_PROPERTIES_DISCARD_TO_COMPARE","_pickId","o","_pickSourceAndTarget","nextProps","currentState","nextNodes","map","nextLinks","stateD3Nodes","d3Nodes","stateD3Links","graphElementsUpdated","isDeepEqual","newGraphElements","newConfig","configUpdated","isEmptyObject","d3ConfigUpdated","d3","d3Node","focusZoom","sot","_ref","graph","merge","_graph","formatedId","replace","simulation","minZoom","maxZoom","highlightedNode","transform","draggedNode","updatedNodes","highlightDegree","linkId","updatedNode","normalize","vector","norm","Math","sqrt","pow","_ref2","strokeWidth","_config$node","_config$node2","_ref2$source","_ref2$target","viewGenerator","x1","y1","x2","y2","symbolType","SYMBOLS","CIRCLE","_nodes$source","directionVector","strokeSize","min","markerWidth","markerHeight","nodeSize","size","PI"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkForGraphConfigChanges = checkForGraphConfigChanges;\nexports.checkForGraphElementsChanges = checkForGraphElementsChanges;\nexports.getCenterAndZoomTransformation = getCenterAndZoomTransformation;\nexports.getId = getId;\nexports.initializeGraphState = initializeGraphState;\nexports.updateNodeHighlightedValue = updateNodeHighlightedValue;\nexports.getNormalizedNodeCoordinates = getNormalizedNodeCoordinates;\n\nvar _d3Force = require(\"d3-force\");\n\nvar _graph2 = _interopRequireDefault(require(\"./graph.const\"));\n\nvar _graph3 = _interopRequireDefault(require(\"./graph.config\"));\n\nvar _err = _interopRequireDefault(require(\"../../err\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _collapse = require(\"./collapse.helper\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar NODE_PROPS_WHITELIST = [\"id\", \"highlighted\", \"x\", \"y\", \"index\", \"vy\", \"vx\"];\nvar LINK_PROPS_WHITELIST = [\"index\", \"source\", \"target\", \"isHidden\"];\n/**\n * Create d3 forceSimulation to be applied on the graph.<br/>\n * {@link https://github.com/d3/d3-force#forceSimulation|d3-force#forceSimulation}<br/>\n * {@link https://github.com/d3/d3-force#simulation_force|d3-force#simulation_force}<br/>\n * Wtf is a force? {@link https://github.com/d3/d3-force#forces| here}\n * @param  {number} width - the width of the container area of the graph.\n * @param  {number} height - the height of the container area of the graph.\n * @param  {number} gravity - the force strength applied to the graph.\n * @returns {Object} returns the simulation instance to be consumed.\n * @memberof Graph/helper\n */\n\nfunction _createForceSimulation(width, height, gravity) {\n  var frx = (0, _d3Force.forceX)(width / 2).strength(_graph2[\"default\"].FORCE_X);\n  var fry = (0, _d3Force.forceY)(height / 2).strength(_graph2[\"default\"].FORCE_Y);\n  var forceStrength = gravity;\n  return (0, _d3Force.forceSimulation)().force(\"charge\", (0, _d3Force.forceManyBody)().strength(forceStrength)).force(\"x\", frx).force(\"y\", fry);\n}\n/**\n * Receives a matrix of the graph with the links source and target as concrete node instances and it transforms it\n * in a lightweight matrix containing only links with source and target being strings representative of some node id\n * and the respective link value (if non existent will default to 1).\n * @param  {Array.<Link>} graphLinks - an array of all graph links.\n * @param  {Object} config - the graph config.\n * @returns {Object.<string, Object>} an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @memberof Graph/helper\n */\n\n\nfunction _initializeLinks(graphLinks, config) {\n  return graphLinks.reduce(function (links, l) {\n    var source = getId(l.source);\n    var target = getId(l.target);\n\n    if (!links[source]) {\n      links[source] = {};\n    }\n\n    if (!links[target]) {\n      links[target] = {};\n    }\n\n    var value = config.collapsible && l.isHidden ? 0 : l.value || 1;\n    links[source][target] = value;\n\n    if (!config.directed) {\n      links[target][source] = value;\n    }\n\n    return links;\n  }, {});\n}\n/**\n * Method that initialize graph nodes provided by rd3g consumer and adds additional default mandatory properties\n * that are optional for the user. Also it generates an index mapping, this maps nodes ids the their index in the array\n * of nodes. This is needed because d3 callbacks such as node click and link click return the index of the node.\n * @param  {Array.<Node>} graphNodes - the array of nodes provided by the rd3g consumer.\n * @returns {Object.<string, Object>} returns the nodes ready to be used within rd3g with additional properties such as x, y\n * and highlighted values.\n * @memberof Graph/helper\n */\n\n\nfunction _initializeNodes(graphNodes) {\n  var nodes = {};\n  var n = graphNodes.length;\n\n  for (var i = 0; i < n; i++) {\n    var node = graphNodes[i];\n    node.highlighted = false;\n\n    if (!Object.prototype.hasOwnProperty.call(node, \"x\")) {\n      node.x = 0;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(node, \"y\")) {\n      node.y = 0;\n    }\n\n    nodes[node.id.toString()] = node;\n  }\n\n  return nodes;\n}\n/**\n * Maps an input link (with format `{ source: 'sourceId', target: 'targetId' }`) to a d3Link\n * (with format `{ source: { id: 'sourceId' }, target: { id: 'targetId' } }`). If d3Link with\n * given index exists already that same d3Link is returned.\n * @param {Object} link - input link.\n * @param {number} index - index of the input link.\n * @param {Array.<Object>} d3Links - all d3Links.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a d3Link.\n * @memberof Graph/helper\n */\n\n\nfunction _mergeDataLinkWithD3Link(link, index) {\n  var d3Links = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var config = arguments.length > 3 ? arguments[3] : undefined;\n  var state = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  // find the matching link if it exists\n  var tmp = d3Links.find(function (l) {\n    return l.source.id === link.source && l.target.id === link.target;\n  });\n  var d3Link = tmp && (0, _utils.pick)(tmp, LINK_PROPS_WHITELIST);\n  var customProps = (0, _utils.antiPick)(link, [\"source\", \"target\"]);\n\n  if (d3Link) {\n    var toggledDirected = state.config && Object.prototype.hasOwnProperty.call(state.config, \"directed\") && config.directed !== state.config.directed;\n\n    var refinedD3Link = _objectSpread({\n      index: index\n    }, d3Link, {}, customProps); // every time we toggle directed config all links should be visible again\n\n\n    if (toggledDirected) {\n      return _objectSpread({}, refinedD3Link, {\n        isHidden: false\n      });\n    } // every time we disable collapsible (collapsible is false) all links should be visible again\n\n\n    return config.collapsible ? refinedD3Link : _objectSpread({}, refinedD3Link, {\n      isHidden: false\n    });\n  }\n\n  var highlighted = false;\n  var source = {\n    id: link.source,\n    highlighted: highlighted\n  };\n  var target = {\n    id: link.target,\n    highlighted: highlighted\n  };\n  return _objectSpread({\n    index: index,\n    source: source,\n    target: target\n  }, customProps);\n}\n/**\n * Tags orphan nodes with a `_orphan` flag.\n * @param {Object.<string, Object>} nodes - nodes mapped by their id.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @returns {Object.<string, Object>} same input nodes structure with tagged orphans nodes where applicable.\n * @memberof Graph/helper\n */\n\n\nfunction _tagOrphanNodes(nodes, linksMatrix) {\n  return Object.keys(nodes).reduce(function (acc, nodeId) {\n    var _computeNodeDegree = (0, _collapse.computeNodeDegree)(nodeId, linksMatrix),\n        inDegree = _computeNodeDegree.inDegree,\n        outDegree = _computeNodeDegree.outDegree;\n\n    var node = nodes[nodeId];\n    var taggedNode = inDegree === 0 && outDegree === 0 ? _objectSpread({}, node, {\n      _orphan: true\n    }) : node;\n    acc[nodeId] = taggedNode;\n    return acc;\n  }, {});\n}\n/**\n * Some integrity validations on links and nodes structure. If some validation fails the function will\n * throw an error.\n * @param  {Object} data - Same as {@link #initializeGraphState|data in initializeGraphState}.\n * @throws can throw the following error or warning msg:\n * INSUFFICIENT_DATA - msg if no nodes are provided\n * INVALID_LINKS - if links point to nonexistent nodes\n * INSUFFICIENT_LINKS - if no links are provided (not even empty Array)\n * @returns {undefined}\n * @memberof Graph/helper\n */\n\n\nfunction _validateGraphData(data) {\n  if (!data.nodes || !data.nodes.length) {\n    (0, _utils.throwErr)(\"Graph\", _err[\"default\"].INSUFFICIENT_DATA);\n  }\n\n  if (!data.links) {\n    (0, _utils.logWarning)(\"Graph\", _err[\"default\"].INSUFFICIENT_LINKS);\n    data.links = [];\n  }\n\n  var n = data.links.length;\n\n  var _loop = function _loop(i) {\n    var l = data.links[i];\n\n    if (!data.nodes.find(function (n) {\n      return n.id === l.source;\n    })) {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINKS, \" - \\\"\").concat(l.source, \"\\\" is not a valid source node id\"));\n    }\n\n    if (!data.nodes.find(function (n) {\n      return n.id === l.target;\n    })) {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINKS, \" - \\\"\").concat(l.target, \"\\\" is not a valid target node id\"));\n    }\n\n    if (l && l.value !== undefined && typeof l.value !== \"number\") {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINK_VALUE, \" - found in link with source \\\"\").concat(l.source, \"\\\" and target \\\"\").concat(l.target, \"\\\"\"));\n    }\n  };\n\n  for (var i = 0; i < n; i++) {\n    _loop(i);\n  }\n} // list of properties that are of no interest when it comes to nodes and links comparison\n\n\nvar NODE_PROPERTIES_DISCARD_TO_COMPARE = [\"x\", \"y\", \"vx\", \"vy\", \"index\"];\n/**\n * Picks the id.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with id property only.\n * @memberof Graph/helper\n */\n\nfunction _pickId(o) {\n  return (0, _utils.pick)(o, [\"id\"]);\n}\n/**\n * Picks source and target.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with source and target only.\n * @memberof Graph/helper\n */\n\n\nfunction _pickSourceAndTarget(o) {\n  return (0, _utils.pick)(o, [\"source\", \"target\"]);\n}\n/**\n * This function checks for graph elements (nodes and links) changes, in two different\n * levels of significance, updated elements (whether some property has changed in some\n * node or link) and new elements (whether some new elements or added/removed from the graph).\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - newGraphElements - flag that indicates whether new graph elements were added.\n * - graphElementsUpdated - flag that indicates whether some graph elements have\n * updated (some property that is not in NODE_PROPERTIES_DISCARD_TO_COMPARE was added to\n * some node or link or was updated).\n * @memberof Graph/helper\n */\n\n\nfunction checkForGraphElementsChanges(nextProps, currentState) {\n  var nextNodes = nextProps.data.nodes.map(function (n) {\n    return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);\n  });\n  var nextLinks = nextProps.data.links;\n  var stateD3Nodes = currentState.d3Nodes.map(function (n) {\n    return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);\n  });\n  var stateD3Links = currentState.d3Links.map(function (l) {\n    return {\n      source: getId(l.source),\n      target: getId(l.target)\n    };\n  });\n  var graphElementsUpdated = !((0, _utils.isDeepEqual)(nextNodes, stateD3Nodes) && (0, _utils.isDeepEqual)(nextLinks, stateD3Links));\n  var newGraphElements = nextNodes.length !== stateD3Nodes.length || nextLinks.length !== stateD3Links.length || !(0, _utils.isDeepEqual)(nextNodes.map(_pickId), stateD3Nodes.map(_pickId)) || !(0, _utils.isDeepEqual)(nextLinks.map(_pickSourceAndTarget), stateD3Links.map(_pickSourceAndTarget));\n  return {\n    graphElementsUpdated: graphElementsUpdated,\n    newGraphElements: newGraphElements\n  };\n}\n/**\n * Logic to check for changes in graph config.\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - configUpdated - global flag that indicates if any property was updated.\n * - d3ConfigUpdated - specific flag that indicates changes in d3 configurations.\n * @memberof Graph/helper\n */\n\n\nfunction checkForGraphConfigChanges(nextProps, currentState) {\n  var newConfig = nextProps.config || {};\n  var configUpdated = newConfig && !(0, _utils.isEmptyObject)(newConfig) && !(0, _utils.isDeepEqual)(newConfig, currentState.config);\n  var d3ConfigUpdated = newConfig && newConfig.d3 && !(0, _utils.isDeepEqual)(newConfig.d3, currentState.config.d3);\n  return {\n    configUpdated: configUpdated,\n    d3ConfigUpdated: d3ConfigUpdated\n  };\n}\n/**\n * Returns the transformation to apply in order to center the graph on the\n * selected node.\n * @param {Object} d3Node - node to focus the graph view on.\n * @param {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @returns {string|undefined} transform rule to apply.\n * @memberof Graph/helper\n */\n\n\nfunction getCenterAndZoomTransformation(d3Node, config) {\n  if (!d3Node) {\n    return;\n  }\n\n  var width = config.width,\n      height = config.height,\n      focusZoom = config.focusZoom;\n  return \"\\n        translate(\".concat(width / 2, \", \").concat(height / 2, \")\\n        scale(\").concat(focusZoom, \")\\n        translate(\").concat(-d3Node.x, \", \").concat(-d3Node.y, \")\\n    \");\n}\n/**\n * This function extracts an id from a link.\n * **Why this function?**\n * According to [d3-force](https://github.com/d3/d3-force#link_links)\n * d3 links might be initialized with \"source\" and \"target\"\n * properties as numbers or strings, but after initialization they\n * are converted to an object. This small utility functions ensures\n * that weather in initialization or further into the lifetime of the graph\n * we always get the id.\n * @param {Object|string|number} sot source or target\n * of the link to extract id.\n * we want to extract an id.\n * @returns {string|number} the id of the link.\n * @memberof Graph/helper\n */\n\n\nfunction getId(sot) {\n  return sot.id !== undefined && sot.id !== null ? sot.id : sot;\n}\n/**\n * Encapsulates common procedures to initialize graph.\n * @param {Object} props - Graph component props, object that holds data, id and config.\n * @param {Object} props.data - Data object holds links (array of **Link**) and nodes (array of **Node**).\n * @param {string} props.id - the graph id.\n * @param {Object} props.config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a fully (re)initialized graph state object.\n * @memberof Graph/helper\n */\n\n\nfunction initializeGraphState(_ref, state) {\n  var data = _ref.data,\n      id = _ref.id,\n      config = _ref.config;\n\n  _validateGraphData(data);\n\n  var graph;\n\n  if (state && state.nodes) {\n    graph = {\n      nodes: data.nodes.map(function (n) {\n        return state.nodes[n.id] ? _objectSpread({}, n, {}, (0, _utils.pick)(state.nodes[n.id], NODE_PROPS_WHITELIST)) : _objectSpread({}, n);\n      }),\n      links: data.links.map(function (l, index) {\n        return _mergeDataLinkWithD3Link(l, index, state && state.d3Links, config, state);\n      })\n    };\n  } else {\n    graph = {\n      nodes: data.nodes.map(function (n) {\n        return _objectSpread({}, n);\n      }),\n      links: data.links.map(function (l) {\n        return _objectSpread({}, l);\n      })\n    };\n  }\n\n  var newConfig = _objectSpread({}, (0, _utils.merge)(_graph3[\"default\"], config || {})),\n      links = _initializeLinks(graph.links, newConfig),\n      // matrix of graph connections\n  nodes = _tagOrphanNodes(_initializeNodes(graph.nodes), links);\n\n  var _graph = graph,\n      d3Nodes = _graph.nodes,\n      d3Links = _graph.links;\n  var formatedId = id.replace(/ /g, \"_\");\n\n  var simulation = _createForceSimulation(newConfig.width, newConfig.height, newConfig.d3 && newConfig.d3.gravity);\n\n  var minZoom = newConfig.minZoom,\n      maxZoom = newConfig.maxZoom,\n      focusZoom = newConfig.focusZoom;\n\n  if (focusZoom > maxZoom) {\n    newConfig.focusZoom = maxZoom;\n  } else if (focusZoom < minZoom) {\n    newConfig.focusZoom = minZoom;\n  }\n\n  return {\n    id: formatedId,\n    config: newConfig,\n    links: links,\n    d3Links: d3Links,\n    nodes: nodes,\n    d3Nodes: d3Nodes,\n    highlightedNode: \"\",\n    simulation: simulation,\n    newGraphElements: false,\n    configUpdated: false,\n    transform: 1,\n    draggedNode: null\n  };\n}\n/**\n * This function updates the highlighted value for a given node and also updates highlight props.\n * @param {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, Object>} links - an object containing a matrix of connections of the graph.\n * @param {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param {string} id - identifier of node to update.\n * @param {string} value - new highlight value for given node.\n * @returns {Object} returns an object containing the updated nodes\n * and the id of the highlighted node.\n * @memberof Graph/helper\n */\n\n\nfunction updateNodeHighlightedValue(nodes, links, config, id) {\n  var value = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var highlightedNode = value ? id : \"\";\n\n  var node = _objectSpread({}, nodes[id], {\n    highlighted: value\n  });\n\n  var updatedNodes = _objectSpread({}, nodes, _defineProperty({}, id, node)); // when highlightDegree is 0 we want only to highlight selected node\n\n\n  if (links[id] && config.highlightDegree !== 0) {\n    updatedNodes = Object.keys(links[id]).reduce(function (acc, linkId) {\n      var updatedNode = _objectSpread({}, updatedNodes[linkId], {\n        highlighted: value\n      });\n\n      acc[linkId] = updatedNode;\n      return acc;\n    }, updatedNodes);\n  }\n\n  return {\n    nodes: updatedNodes,\n    highlightedNode: highlightedNode\n  };\n}\n/**\n * Computes the normalized vector from a vector.\n * @param {Object} vector a 2D vector with x and y components\n * @param {number} vector.x x coordinate\n * @param {number} vector.y y coordinate\n * @returns {Object} normalized vector\n */\n\n\nfunction normalize(vector) {\n  var norm = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n  return {\n    x: vector.x / norm,\n    y: vector.y / norm\n  };\n}\n/**\n * Computes new node coordinates to make arrowheads point at nodes.\n * Arrow configuration is only available for circles.\n * @param {Object} node - the couple of nodes we need to compute new coordinates\n * @param {Object} node.source - node source\n * @param {Object} node.target - node target\n * @param {Object.<string, Object>} nodes - same as {@link #graphrenderer|nodes in renderGraph}.\n * @param {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {number} strokeWidth width of the link stroke\n * @returns {Object} new nodes coordinates\n */\n\n\nfunction getNormalizedNodeCoordinates(_ref2, nodes, config, strokeWidth) {\n  var _config$node, _config$node2;\n\n  var _ref2$source = _ref2.source,\n      source = _ref2$source === void 0 ? {} : _ref2$source,\n      _ref2$target = _ref2.target,\n      target = _ref2$target === void 0 ? {} : _ref2$target;\n\n  if ((_config$node = config.node) === null || _config$node === void 0 ? void 0 : _config$node.viewGenerator) {\n    return {\n      source: source,\n      target: target\n    };\n  }\n\n  var x1 = source.x,\n      y1 = source.y;\n  var x2 = target.x,\n      y2 = target.y;\n\n  switch ((_config$node2 = config.node) === null || _config$node2 === void 0 ? void 0 : _config$node2.symbolType) {\n    case _graph2[\"default\"].SYMBOLS.CIRCLE:\n      {\n        var _nodes$source;\n\n        var directionVector = normalize({\n          x: x2 - x1,\n          y: y2 - y1\n        });\n        var strokeSize = strokeWidth * Math.min(config.link.markerWidth, config.link.markerHeight);\n        var nodeSize = (nodes === null || nodes === void 0 ? void 0 : (_nodes$source = nodes[source]) === null || _nodes$source === void 0 ? void 0 : _nodes$source.size) || config.node.size; // cause this is a circle and A = pi * r^2\n        // we multiply by 0.95, because if we don't the link is not melting properly\n\n        nodeSize = Math.sqrt(nodeSize / Math.PI) * 0.95; // points from the source, we move them not to begin in the circle but outside\n\n        x1 += nodeSize * directionVector.x;\n        y1 += nodeSize * directionVector.y; // points from the target, we move the by the size of the radius of the circle + the size of the arrow\n\n        x2 -= (nodeSize + (config.directed ? strokeSize : 0)) * directionVector.x;\n        y2 -= (nodeSize + (config.directed ? strokeSize : 0)) * directionVector.y;\n        break;\n      }\n  }\n\n  return {\n    source: {\n      x: x1,\n      y: y1\n    },\n    target: {\n      x: x2,\n      y: y2\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}