{"ast":null,"code":"import { colors, API_ENDPOINT } from \"./myConfig\";\nimport { getRandomInt } from \"./Components/RandomGenerator\";\n/*\n * ==================================================\n *      Functions Definnitions for handeling changes\n * ==================================================\n * \n */\n\nconst processNode = node => {\n  /* process a node from the api into one for the dispatcher\n   * it changes title for id, for instance */\n  node['id'] = node.w_id;\n  node['key'] = node.w_id;\n  node['isSelected'] = false;\n  node['color'] = colors.node.default;\n  return node;\n}; // retrive node with given node id from state \n\n\nconst getNode = (nodeId, state) => state.nodes.filter(node => node.id === nodeId)[0]; // attemps to return true id node is not in state, \n// maybe make a dic so that is it not n time\n\n\nconst isNewNode = (nodeId, state) => state.nodes.every(node => node.id !== nodeId);\n\nconst onClickNode = (nodeId, state, dispatchState) => {\n  // when user clicks on a node\n  queryAdjecentNodes(getNode(nodeId, state), state, dispatchState);\n  dispatchState({\n    type: 'SWITCH_SELECTED_NODE',\n    payload: nodeId\n  });\n};\n\nconst timelyDispatch = (dispatchFunc, waitTime = 0, random = 10) => {\n  /* takes a dispachState functions and dispaches it in a \n   * random timply fashion this is usefulf for node not to \n   * appear all at once in the graph and make it easier on \n   * the browser. Returns nothing*/\n  setTimeout(dispatchFunc, waitTime + getRandomInt(random));\n};\n\nconst queryNewWord = (word, state, dispatchState) => {\n  /* reset the graph state and start a new query into a word, \n   * sometime this stymes when it is called a second time,\n   * this might be because of dispatchState being called twice\n   * must investigate.  */\n  fetch(API_ENDPOINT + word) // unpack json\n  .then(result => result.json()) //unpack word\n  .then(result => catchError(result, state, dispatchState)) //check if word was found\n  .then(result => processNode(result)) //process node\n  .then(node => {\n    //dispatch word\n    dispatchState({\n      type: 'SET_NEW_NODE',\n      payload: node\n    });\n    return node;\n  }) // get the surrounding words\n  .then(node => queryAdjecentNodes(node, state, dispatchState)).catch(() => dispatchState({\n    type: 'SET_FETCH_FAILED'\n  }));\n};\n\nconst queryPath = async (words, state, dispatchState) => {\n  /* gets passesed a set of two words, \n   * queries the server for the path and \n   * dispateches the result to state */\n  //split words into arrays\n  //let path;\n  let first;\n  let second;\n\n  for (var i = 0; i + 1 <= words.length - 1; i++) {\n    //for every node in the array get two by two\n    let nodes = await fetch(API_ENDPOINT + 'path/' + first + \"/\" + second);\n    nodes.then(result => result.json()) // unpack json\n    .then(result => console.log(result)).catch(err => dispatchState({\n      type: 'SET_FETCH_FAILED'\n    }));\n    console.log(nodes); //.then(nodes => catchError(nodes, state, dispatchState)) \t\n  }\n  /*\n  console.log(\"this ran\")\n  let prevNode = null;\n  let first;\n  let second;\n  \tfor( var i = 0; i+1 <= words.length-1; i++){\n  \t\tfirst = words[i];\n  \t\tsecond = words[i + 1];\n  \t\t//console.log(words)\n  \t\t//console.log(i)\n  \t\tconsole.log(first);\n  \t\tconsole.log(second);\n  \t\tfetch(API_ENDPOINT + 'path/' +  first  + \"/\" + second) \n  \t\t\t\t.then(result => result.json()) // unpack json\n  \t\t\t\t.then(nodes => {console.log(nodes); return nodes })\n  \t\t\t\t.then(nodes => catchError(nodes, state, dispatchState)) \n  \t\t\t\t\t//check if words not found\n  \t\t\t\t.then(pathNodes => {\n  \t\t\t\t\t\t//console.log(pathNodes)\n  \t\t\t\t\t\tpathNodes.forEach((node, index) => \n  \t\t\t\t\t\t\t\ttimelyDispatch(() => {  \n  \t\t\t\t\t\t\t\t\t\tnode = processNode(node);\n  \t\t\t\t\t\t\t\t\t\tif (prevNode === null){ \n  \t\t\t\t\t\t\t\t\t\t\t\t// if this is the first node\n  \t\t\t\t\t\t\t\t\t\t\t\tdispatchState({\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NEW_NODE', \n  \t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload: node,\n  \t\t\t\t\t\t\t\t\t\t\t\t})\n  \t\t\t\t\t\t\t\t\t\t}else{\n  \t\t\t\t\t\t\t\t\t\t\t\tconsole.log(prevNode.id)\n  \t\t\t\t\t\t\t\t\t\t\t\tconsole.log(\" --> \")\n  \t\t\t\t\t\t\t\t\t\t\t\tconsole.log(node.id)\n  \t\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"\\n\")\n  \t\t\t\t\t\t\t\t\t\t\t\t//if there is already other nodes\n  \t\t\t\t\t\t\t\t\t\t\t\tdispatchState({\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_PATH_NODE', \n  \t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode: node,\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: prevNode.id, \n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: node.id \n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t\t\t\t\t})\n  \t\t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t\t\tprevNode = node;\n  \t\t\t\t\t\t\t\t}, 25,0)\n  \t\t\t\t\t\t) //se the time as 25 and the random to 0\n  \t\t\t\t})\n  \t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}));\n  }\n  */\n\n};\n\nconst queryAdjecentNodes = (node, state, dispatchState) => {\n  /* for every node request the adjecent node to it */\n  let linkAll = state.isDeepLinks; // define whether we should link te deeper\n\n  let graph_type = 'synonyms/'; // define which type of graph we are requesting\n\n  fetch(API_ENDPOINT + graph_type + node.id) // request the synonyms\n  .then(result => result.json()).then(result => catchError(result, state, dispatchState)).then(adjNodes => adjNodes.forEach( // for every node in the array\n  adjNode => timelyDispatch(() => {\n    //for each of the nodes in the list \t\t\n    adjNode = processNode(adjNode); //process node \n\n    if (linkAll || isNewNode(adjNode.id, state)) {\n      // proces is it is new node, or deep link set\n      dispatchState({\n        type: 'SET_NODE_LINK',\n        payload: {\n          node: adjNode,\n          link: {\n            source: node.id,\n            target: adjNode.id\n          }\n        }\n      });\n    }\n  }))).catch(() => dispatchState({\n    type: 'SET_FETCH_FAILED'\n  }));\n};\n\nconst catchError = (response, state, dispatchState) => {\n  /* Set error to state when user search a word not found */\n  //console.log(\"got to cath error:\")\n  //console.log(response)\n  if (response instanceof Array) {\n    let foundWords = []; //console.log(\"words was not found\")\n    // if it has the response for many words\n\n    response.forEach((word, index, words) => {\n      if (word.detail === \"Not Found.\") {\n        dispatchState({\n          type: 'SET_WORD_NOT_FOUND',\n          payload: word.w_id\n        });\n      } else {\n        foundWords.push(word);\n      }\n    });\n    return foundWords;\n  } else {\n    // if it only one elment\n    //console.log(\"got word:\")\n    if (response.detail === \"Not found.\") {\n      dispatchState({\n        type: 'SET_WORD_NOT_FOUND',\n        payload: state.searchTerm\n      });\n      throw new Error(\"word not found\");\n    } else if (response.detail === \"Path not found.\") {\n      // if the error is path not found\n      //console.log(\"path was not found\")\n      dispatchState({\n        type: 'SET_PATH_NOT_FOUND',\n        payload: {\n          'first': response.first,\n          'last': response.last\n        }\n      });\n      throw new Error(\"path not found\");\n    } else {\n      return response;\n    }\n  }\n};\n\nconst onMouseOverNode = function (nodeId, dispatchState) {\n  dispatchState({\n    type: 'SET_DEFINED_NODE',\n    payload: nodeId\n  }); // need to fund a way to also run the default fuction \n};\n\nexport { processNode, catchError, queryNewWord, queryAdjecentNodes, queryPath, onClickNode, onMouseOverNode };","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/node_functions.js"],"names":["colors","API_ENDPOINT","getRandomInt","processNode","node","w_id","default","getNode","nodeId","state","nodes","filter","id","isNewNode","every","onClickNode","dispatchState","queryAdjecentNodes","type","payload","timelyDispatch","dispatchFunc","waitTime","random","setTimeout","queryNewWord","word","fetch","then","result","json","catchError","catch","queryPath","words","first","second","i","length","console","log","err","linkAll","isDeepLinks","graph_type","adjNodes","forEach","adjNode","link","source","target","response","Array","foundWords","index","detail","push","searchTerm","Error","last","onMouseOverNode"],"mappings":"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","sourcesContent":["import { colors, API_ENDPOINT }  from \"./myConfig\";\nimport { getRandomInt }  from \"./Components/RandomGenerator\";\n\n/*\n * ==================================================\n *      Functions Definnitions for handeling changes\n * ==================================================\n * \n */\n\n\nconst processNode = (node) =>{\n\t\t/* process a node from the api into one for the dispatcher\n\t\t * it changes title for id, for instance */\n\t\tnode['id'] = node.w_id;\n\t\tnode['key'] = node.w_id;\n\t\tnode['isSelected'] = false;\n\t\tnode['color'] = colors.node.default;\n\t\treturn node\n}\n\n// retrive node with given node id from state \nconst getNode = (nodeId, state) => state.nodes.filter( node => node.id === nodeId )[0]\n\n// attemps to return true id node is not in state, \n// maybe make a dic so that is it not n time\nconst isNewNode = (nodeId, state) => state.nodes.every( node => node.id !== nodeId )\n\nconst onClickNode = (nodeId, state, dispatchState) => {\n\t\t// when user clicks on a node\n\t\tqueryAdjecentNodes(getNode(nodeId, state), state, dispatchState)\n\t\tdispatchState({type:'SWITCH_SELECTED_NODE', payload: nodeId})  \n};\n\nconst timelyDispatch = (dispatchFunc , waitTime=0, random=10) => {\n\t/* takes a dispachState functions and dispaches it in a \n\t * random timply fashion this is usefulf for node not to \n\t * appear all at once in the graph and make it easier on \n\t * the browser. Returns nothing*/\n\t\tsetTimeout(dispatchFunc, waitTime + getRandomInt(random));\n}\n\nconst queryNewWord = (word, state, dispatchState) => {\n\t\t/* reset the graph state and start a new query into a word, \n\t\t * sometime this stymes when it is called a second time,\n\t\t * this might be because of dispatchState being called twice\n\t\t * must investigate.  */\n\t\tfetch(API_ENDPOINT + word)\n\t\t// unpack json\n\t\t\t\t.then(result => result.json()) //unpack word\n\t\t\t\t.then(result => catchError(result, state, dispatchState))//check if word was found\n\t\t\t\t.then(result => processNode(result)) //process node\n\t\t\t\t.then(node => { //dispatch word\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype: 'SET_NEW_NODE', \n\t\t\t\t\t\t\t\tpayload: node\n\t\t\t\t\t\t}); \n\t\t\t\t\t\treturn node; })\n\t\t// get the surrounding words\n\t\t\t\t.then(node => queryAdjecentNodes(node, state, dispatchState))\n\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}));\n}\n\nconst queryPath = async (words, state, dispatchState) => {\n\t\t/* gets passesed a set of two words, \n\t\t * queries the server for the path and \n\t\t * dispateches the result to state */\n\t\t//split words into arrays\n\t\t//let path;\n\t\tlet first;\n\t\tlet second;\n\t\tfor( var i = 0; i+1 <= words.length-1; i++){\n\t\t\t\t//for every node in the array get two by two\n\t\t\tlet nodes = await fetch(API_ENDPOINT + 'path/' +  first  + \"/\" + second)\n\t\t\t\t\t\tnodes.then(result => result.json()) // unpack json\n\t\t\t\t\t\t.then(result => console.log(result))\n\t\t\t\t\t\t.catch(err => dispatchState({type:'SET_FETCH_FAILED'}))\n\t\t\t\tconsole.log(nodes)\n\t\t\t\t//.then(nodes => catchError(nodes, state, dispatchState)) \t\n\t\t}\n\t\t/*\n\t\tconsole.log(\"this ran\")\n\t\tlet prevNode = null;\n\t\tlet first;\n\t\tlet second;\n\n\t\tfor( var i = 0; i+1 <= words.length-1; i++){\n\t\t\t\tfirst = words[i];\n\t\t\t\tsecond = words[i + 1];\n\t\t\t\t//console.log(words)\n\t\t\t\t//console.log(i)\n\t\t\t\tconsole.log(first);\n\t\t\t\tconsole.log(second);\n\t\t\t\tfetch(API_ENDPOINT + 'path/' +  first  + \"/\" + second) \n\t\t\t\t\t\t.then(result => result.json()) // unpack json\n\t\t\t\t\t\t.then(nodes => {console.log(nodes); return nodes })\n\t\t\t\t\t\t.then(nodes => catchError(nodes, state, dispatchState)) \n\t\t\t\t\t\t\t//check if words not found\n\t\t\t\t\t\t.then(pathNodes => {\n\t\t\t\t\t\t\t\t//console.log(pathNodes)\n\t\t\t\t\t\t\t\tpathNodes.forEach((node, index) => \n\t\t\t\t\t\t\t\t\t\ttimelyDispatch(() => {  \n\t\t\t\t\t\t\t\t\t\t\t\tnode = processNode(node);\n\t\t\t\t\t\t\t\t\t\t\t\tif (prevNode === null){ \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// if this is the first node\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NEW_NODE', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload: node,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(prevNode.id)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(\" --> \")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(node.id)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"\\n\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//if there is already other nodes\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_PATH_NODE', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode: node,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: prevNode.id, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: node.id \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tprevNode = node;\n\t\t\t\t\t\t\t\t\t\t}, 25,0)\n\t\t\t\t\t\t\t\t) //se the time as 25 and the random to 0\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}));\n\t\t}\n\t\t*/\n}\n\n\nconst queryAdjecentNodes = (node, state, dispatchState) => {\n\t\t/* for every node request the adjecent node to it */\n\t\tlet linkAll = state.isDeepLinks;\n\t\t// define whether we should link te deeper\n\t\tlet graph_type = 'synonyms/';\n\t\t// define which type of graph we are requesting\n\t\tfetch(API_ENDPOINT + graph_type + node.id )\n\t\t// request the synonyms\n\t\t\t\t.then(result => result.json())\n\t\t\t\t.then(result => catchError(result, state, dispatchState))\n\t\t\t\t.then(adjNodes => adjNodes.forEach( \n\t\t\t\t\t\t// for every node in the array\n\t\t\t\t\t\tadjNode => timelyDispatch(() => {  \n\t\t\t\t\t\t\t\t//for each of the nodes in the list \t\t\n\t\t\t\t\t\t\t\tadjNode = processNode(adjNode); //process node \n\t\t\t\t\t\t\t\tif(linkAll || isNewNode(adjNode.id, state)){\n\t\t\t\t\t\t\t\t\t\t// proces is it is new node, or deep link set\n\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NODE_LINK', \n\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode: adjNode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node.id ,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: adjNode.id \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t\n\t\t\t\t))\n\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}))\n}\n\nconst catchError = (response, state, dispatchState) =>{\n\t\t/* Set error to state when user search a word not found */\n\t\t//console.log(\"got to cath error:\")\n\t\t//console.log(response)\n\t\tif(response instanceof Array){\n\t\t\t\tlet foundWords = []\n\t\t\t\t//console.log(\"words was not found\")\n\t\t\t\t// if it has the response for many words\n\t\t\t\tresponse.forEach((word, index, words) => {\n\t\t\t\t\t\tif(word.detail === \"Not Found.\"){\n\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\ttype: 'SET_WORD_NOT_FOUND', \n\t\t\t\t\t\t\t\t\t\tpayload: word.w_id});\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tfoundWords.push(word);\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\treturn foundWords;\n\t\t}else{ // if it only one elment\n\t\t\t\t//console.log(\"got word:\")\n\t\t\t\tif(response.detail === \"Not found.\") {\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype: 'SET_WORD_NOT_FOUND', \n\t\t\t\t\t\t\t\tpayload: state.searchTerm});\n\t\t\t\t\t\tthrow new Error(\"word not found\");\n\t\t\t\t}else if(response.detail === \"Path not found.\"){\n\t\t\t\t\t\t// if the error is path not found\n\t\t\t\t\t\t//console.log(\"path was not found\")\n\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\ttype: 'SET_PATH_NOT_FOUND', \n\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t'first': response.first,\n\t\t\t\t\t\t\t\t\t\t'last': response.last,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\tthrow new Error(\"path not found\");\n\t\t\t\t}else{\n\t\t\t\t\t\treturn response\n\t\t\t\t}\n\t\t}\n}\n\nconst onMouseOverNode = function(nodeId, dispatchState) {\n\t\tdispatchState({type:'SET_DEFINED_NODE', payload: nodeId})  \n\t\t// need to fund a way to also run the default fuction \n};\n\nexport { processNode, catchError, queryNewWord, queryAdjecentNodes, queryPath, onClickNode, onMouseOverNode }\n\n"]},"metadata":{},"sourceType":"module"}