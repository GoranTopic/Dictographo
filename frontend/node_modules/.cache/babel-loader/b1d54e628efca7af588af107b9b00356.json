{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Graph/Graph.js\";\nimport React, { useCallback } from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { graphConfig } from \"../../myConfig\"; //import d3Switcher from \"./d3Switcher\";\n\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport _ from \"lodash\";\nimport SpriteText from 'three-spritetext'; //import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({\n  state,\n  dispatchState\n}) {\n  const stateCopy = state => {\n    //console.log(\"normal state\")\n    //console.log(state)\n    let d3State = _.cloneDeep(state);\n\n    return d3State;\n  };\n\n  const handleClick = useCallback(nodeId => {\n    //  handle click of node\n    onClickNode(nodeId, state, dispatchState);\n  }, [state, dispatchState]);\n\n  const chosenGraph = type => {\n    switch (type) {\n      case 'd3':\n        //console.log(\"checking the state\")\n        //console.log(state)\n        //console.log({...state, links:[]})\n        //console.log(\"d3 data:\")\n        //console.log(state.d3Data)\n        return /*#__PURE__*/React.createElement(Graph, {\n          id: \"graph-id\" // id is mandatory, \n          // if no id is defined rd3g will throw an error\n          ,\n          data: state.d3Data,\n          onClickNode: handleClick,\n          config: graphConfig,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 16\n          }\n        });\n\n      case '2D':\n        //console.log(\"checking the state\")\n        //console.log(state)\n        //console.log(\"2D data:\")\n        //console.log(state.forceData)\n        return /*#__PURE__*/React.createElement(ForceGraph2D, {\n          graphData: state.forceData,\n          onNodeClick: handleClick //nodeLabel=\"id\"\n          ,\n          enableNodeDrag: true,\n          linkDirectionalArrowLength: 3.5,\n          linkDirectionalArrowRelPos: 1,\n          onNodeDragEnd: node => {\n            node.fx = node.x;\n            node.fy = node.y;\n            node.fz = node.z;\n          },\n          nodeColor: node => node.isSelected ? 'red' : node.isDone ? 'gray' : 'back',\n          nodeCanvasObject: (node, ctx, globalScale) => {\n            const label = node.id;\n            const fontSize = 12 / globalScale;\n            ctx.font = `${fontSize}px Sans-Serif`;\n            const textWidth = ctx.measureText(label).width;\n            const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n            ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            ctx.fillStyle = node.color;\n            ctx.fillText(label, node.x, node.y);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 16\n          }\n        });\n\n      case '3D':\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(ForceGraph3D, {\n          graphData: state.forceData,\n          onNodeClick: handleClick,\n          nodeLabel: \"id\",\n          enableNodeDrag: true,\n          linkDirectionalArrowLength: 3.5,\n          linkDirectionalArrowRelPos: 1,\n          onNodeDragEnd: node => {\n            node.fx = node.x;\n            node.fy = node.y;\n            node.fz = node.z;\n          },\n          nodeColor: node => node.id === state.selected.id ? 'red' : node.isDone ? 'gray' : 'back',\n          nodeThreeObject: node => {\n            const sprite = new SpriteText(node.id);\n            sprite.color = node.color;\n            sprite.textHeight = 8;\n            return sprite;\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(Graph, {\n          id: \"graph-id\" // id is mandatory, \n          // if no id is defined rd3g will throw an error\n          ,\n          data: state,\n          config: graphConfig,\n          onClickNode: handleClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 16\n          }\n        });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundImage: 'url(./grid.png)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 10\n    }\n  }, chosenGraph(state.graphType));\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Graph/Graph.js"],"names":["React","useCallback","Graph","onClickNode","graphConfig","ForceGraph2D","ForceGraph3D","_","SpriteText","GraphContainer","state","dispatchState","stateCopy","d3State","cloneDeep","handleClick","nodeId","chosenGraph","type","d3Data","forceData","node","fx","x","fy","y","fz","z","isSelected","isDone","ctx","globalScale","label","id","fontSize","font","textWidth","measureText","width","bckgDimensions","map","n","fillStyle","fillRect","textAlign","textBaseline","color","fillText","selected","sprite","textHeight","backgroundImage","graphType"],"mappings":"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","sourcesContent":["import React, { useCallback }  from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { graphConfig }  from \"../../myConfig\";\n//import d3Switcher from \"./d3Switcher\";\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport _ from \"lodash\";\nimport SpriteText from 'three-spritetext';\n//import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({state, dispatchState}){\n\n\t\tconst stateCopy = (state) => {\n\t\t\t\t//console.log(\"normal state\")\n\t\t\t\t//console.log(state)\n\t\t\t\tlet d3State = _.cloneDeep(state);\n\t\t\t\treturn d3State;\n\t\t}\n\n\t\tconst handleClick = useCallback((nodeId) => {  //  handle click of node\n\t\t\t\tonClickNode(nodeId, state, dispatchState)\n\t\t}, [state, dispatchState]);\n\n\t\tconst chosenGraph = (type) =>{ \n\t\t\t\tswitch(type) {\n\t\t\t\t\t\tcase 'd3':\n\t\t\t\t\t\t\t\t//console.log(\"checking the state\")\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\t//console.log({...state, links:[]})\n\t\t\t\t\t\t\t\t//console.log(\"d3 data:\")\n\t\t\t\t\t\t\t\t//console.log(state.d3Data)\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state.d3Data}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tcase '2D':\n\t\t\t\t\t\t\t\t//console.log(\"checking the state\")\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\t//console.log(\"2D data:\")\n\t\t\t\t\t\t\t\t//console.log(state.forceData)\n\t\t\t\t\t\t\t\treturn <ForceGraph2D\n\t\t\t\t\t\t\t\t\t\tgraphData={state.forceData}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\t//nodeLabel=\"id\"\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowLength={3.5}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowRelPos={1}\n\t\t\t\t\t\t\t\t\t\tonNodeDragEnd={node => {\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fx = node.x;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fy = node.y;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fz = node.z;\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tnodeColor={node => node.isSelected ? 'red' :  node.isDone ? 'gray' : 'back'}\n\t\t\t\t\t\t\t\t\t\tnodeCanvasObject={(node, ctx, globalScale) => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst label = node.id;\n\t\t\t\t\t\t\t\t\t\t\t\tconst fontSize = 12/globalScale;\n\t\t\t\t\t\t\t\t\t\t\t\tctx.font = `${fontSize}px Sans-Serif`;\n\t\t\t\t\t\t\t\t\t\t\t\tconst textWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\t\t\t\t\t\tconst bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n\t\t\t\t\t\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillStyle = node.color;\n\t\t\t\t\t\t\t\t\t\t\t\tctx.fillText(label, node.x, node.y);\n\t\t\t\t\t\t\t\t\t\t\t\t          \n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tcase '3D':\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <ForceGraph3D\n\t\t\t\t\t\t\t\t\t\tgraphData={state.forceData}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tnodeLabel=\"id\"\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowLength={3.5}\n\t\t\t\t\t\t\t\t\t\tlinkDirectionalArrowRelPos={1}\n\t\t\t\t\t\t\t\t\t\tonNodeDragEnd={node => {\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fx = node.x;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fy = node.y;\n\t\t\t\t\t\t\t\t\t\t\t\tnode.fz = node.z;\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tnodeColor={node => \n\t\t\t\t\t\t\t\t\t\tnode.id === state.selected.id ? 'red' :  node.isDone ? 'gray' : 'back'}\n\t\t\t\t\t\t\t\t\t\tnodeThreeObject={node => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst sprite = new SpriteText(node.id);\n\t\t\t\t\t\t\t\t\t\t\t\tsprite.color = node.color;\n\t\t\t\t\t\t\t\t\t\t\t\tsprite.textHeight = 8;\n\t\t\t\t\t\t\t\t\t\t\t\treturn sprite;\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t} \n\t\t}\n\n\n\t\treturn <div style={{backgroundImage: 'url(./grid.png)'}} >\n\t\t\t\t{chosenGraph(state.graphType)}\n\t\t</div>\n\t\t\n}\n\nexport default GraphContainer;\n"]},"metadata":{},"sourceType":"module"}