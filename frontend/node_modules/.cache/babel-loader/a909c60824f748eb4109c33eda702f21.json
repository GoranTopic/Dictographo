{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Graph.js\";\nimport React from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../node_functions';\nimport { graphConfig } from \"../myConfig\";\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d'; //import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({\n  state,\n  dispatchState\n}) {\n  const {\n    //useState,\n    //useEffect, \n    useCallback\n  } = React;\n  const handleClick = useCallback( // handle click of node\n  nodeId => onClickNode(nodeId, state, dispatchState), [state, dispatchState]);\n\n  const chosenGraph = type => {\n    switch (type) {\n      case 'd3':\n        console.log(\"checking the state\");\n        console.log({ ...state,\n          links: []\n        });\n        return /*#__PURE__*/React.createElement(Graph, {\n          id: \"graph-id\" // id is mandatory, \n          // if no id is defined rd3g will throw an error\n          ,\n          data: { ...state,\n            ...state.nodes,\n            ...state.links\n          },\n          config: graphConfig,\n          onClickNode: handleClick,\n          backgroundColor: \"black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 16\n          }\n        });\n\n      case '2D':\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(ForceGraph2D, {\n          enableNodeDrag: true,\n          onNodeClick: handleClick,\n          graphData: state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 16\n          }\n        });\n\n      case '3D':\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(ForceGraph3D, {\n          enableNodeDrag: true,\n          onNodeClick: handleClick,\n          graphData: state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(Graph, {\n          id: \"graph-id\" // id is mandatory, \n          // if no id is defined rd3g will throw an error\n          ,\n          data: state,\n          config: graphConfig,\n          onClickNode: handleClick,\n          backgroundColor: \"black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 16\n          }\n        });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundImage: 'url(./grid.png)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 10\n    }\n  }, chosenGraph(state.graphType));\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Graph.js"],"names":["React","Graph","onClickNode","graphConfig","ForceGraph2D","ForceGraph3D","GraphContainer","state","dispatchState","useCallback","handleClick","nodeId","chosenGraph","type","console","log","links","nodes","backgroundImage","graphType"],"mappings":";AAAA,OAAOA,KAAP,MAAmB,OAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,WAAT,QAA6B,aAA7B;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,YAAP,MAAyB,sBAAzB,C,CACA;AACA;;AAEA;;;;;;AAMA,SAASC,cAAT,CAAwB;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAxB,EAA+C;AAE7C,QAAM;AACJ;AACA;AACAC,IAAAA;AAHI,MAIFT,KAJJ;AAOA,QAAMU,WAAW,GAAGD,WAAW,EAAE;AAC9BE,EAAAA,MAAD,IAAYT,WAAW,CAACS,MAAD,EAASJ,KAAT,EAAgBC,aAAhB,CADM,EAE7B,CAACD,KAAD,EAAQC,aAAR,CAF6B,CAA/B;;AAKA,QAAMI,WAAW,GAAIC,IAAD,IAAS;AAC3B,YAAOA,IAAP;AACE,WAAK,IAAL;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,EAAC,GAAGR,KAAJ;AAAWS,UAAAA,KAAK,EAAC;AAAjB,SAAZ;AACA,4BAAO,oBAAC,KAAD;AACL,UAAA,EAAE,EAAC,UADE,CAEL;AACA;AAHK;AAIL,UAAA,IAAI,EAAE,EAAC,GAAGT,KAAJ;AAAW,eAAGA,KAAK,CAACU,KAApB;AAA2B,eAAGV,KAAK,CAACS;AAApC,WAJD;AAKL,UAAA,MAAM,EAAEb,WALH;AAML,UAAA,WAAW,EAAEO,WANR;AAOL,UAAA,eAAe,EAAC,OAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AASF,WAAK,IAAL;AACE;AACA,4BAAO,oBAAC,YAAD;AACL,UAAA,cAAc,EAAE,IADX;AAEL,UAAA,WAAW,EAAEA,WAFR;AAGL,UAAA,SAAS,EAAEH,KAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AAKF,WAAK,IAAL;AACE;AACA,4BAAO,oBAAC,YAAD;AACL,UAAA,cAAc,EAAE,IADX;AAEL,UAAA,WAAW,EAAEG,WAFR;AAGL,UAAA,SAAS,EAAEH,KAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AAKF;AACE;AACA,4BAAO,oBAAC,KAAD;AACL,UAAA,EAAE,EAAC,UADE,CAEL;AACA;AAHK;AAIL,UAAA,IAAI,EAAEA,KAJD;AAKL,UAAA,MAAM,EAAEJ,WALH;AAML,UAAA,WAAW,EAAEO,WANR;AAOL,UAAA,eAAe,EAAC,OAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AA7BJ;AAuCD,GAxCD;;AA2CA,sBAAO;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,eAAe,EAAE;AAAlB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACJN,WAAW,CAACL,KAAK,CAACY,SAAP,CADP,CAAP;AAID;;AAED,eAAeb,cAAf","sourcesContent":["import React  from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../node_functions';\nimport { graphConfig }  from \"../myConfig\";\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\n//import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({state, dispatchState}){\n\n\t\tconst { \n\t\t\t\t//useState,\n\t\t\t\t//useEffect, \n\t\t\t\tuseCallback\n\t\t} = React;\n\n\n\t\tconst handleClick = useCallback( // handle click of node\n\t\t\t\t(nodeId) => onClickNode(nodeId, state, dispatchState), \n\t\t\t\t[state, dispatchState]);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\n\t\tconst chosenGraph = (type) =>{ \n\t\t\t\tswitch(type) {\n\t\t\t\t\t\tcase 'd3':\n\t\t\t\t\t\t\t\tconsole.log(\"checking the state\")\n\t\t\t\t\t\t\t\tconsole.log({...state, links:[]})\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={{...state, ...state.nodes, ...state.links}}\n\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\tbackgroundColor=\"black\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tcase '2D':\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <ForceGraph2D\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tgraphData={state}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tcase '3D':\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <ForceGraph3D\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tgraphData={state}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\tbackgroundColor=\"black\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t} \n\t\t}\n\n\n\t\treturn <div style={{backgroundImage: 'url(./grid.png)'}} >\n\t\t\t\t{chosenGraph(state.graphType)}\n\t\t</div>\n\t\t\n}\n\nexport default GraphContainer;\n"]},"metadata":{},"sourceType":"module"}