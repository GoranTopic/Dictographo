{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Graph.js\";\nimport React from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../node_functions';\nimport { graphConfig } from \"../myConfig\";\nimport ForceGraph2D from 'react-force-graph-2d'; //import ForceGraph3D from 'react-force-graph-3d';\n//import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({\n  state,\n  dispatchState\n}) {\n  const {\n    useState,\n    useEffect,\n    useCallback\n  } = React;\n\n  const DynamicGraph = () => {\n    const [data, setData] = useState({\n      nodes: [{\n        id: 0\n      }],\n      links: []\n    });\n    useEffect(() => {\n      setInterval(() => {\n        // Add a new connected node every second\n        setData(({\n          nodes,\n          links\n        }) => {\n          const id = nodes.length;\n          return {\n            nodes: [...nodes, {\n              id\n            }],\n            links: [...links, {\n              source: id,\n              target: Math.round(Math.random() * (id - 1))\n            }]\n          };\n        });\n      }, 1000);\n    }, []);\n    const handleClick = useCallback(node => {\n      const {\n        nodes,\n        links\n      } = data; // Remove node on click\n\n      const newLinks = links.filter(l => l.source !== node && l.target !== node); // Remove links attached to node\n\n      newNodes.splice(node.id, 1); // Remove node\n\n      newNodes.forEach((n, idx) => {\n        n.id = idx;\n      }); // Reset node ids to array index\n\n      setData({\n        nodes: newNodes,\n        links: newLinks\n      });\n    }, [data, setData]);\n    return /*#__PURE__*/React.createElement(ForceGraph3D, {\n      enableNodeDrag: false,\n      onNodeClick: handleClick,\n      graphData: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }\n    });\n  };\n}\n\nexport default GraphContainer; // redifine the function inside this context \n\n/*\nlet onClickNode_func =\n\t\t(nodeId) => onClickNode(nodeId, state, dispatchState);\nreturn(\n\t\t<div style={{backgroundImage: 'url(./grid.png)'}} >\n\t\t\t\t<Graph \n\t\t\t\t\t\tid=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\tonClickNode={onClickNode_func}\n\t\t\t\t\t\tbackgroundColor=\"black\"\n\t\t\t\t/>\n\t\t</div>\n)\n*/","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Graph.js"],"names":["React","Graph","onClickNode","graphConfig","ForceGraph2D","GraphContainer","state","dispatchState","useState","useEffect","useCallback","DynamicGraph","data","setData","nodes","id","links","setInterval","length","source","target","Math","round","random","handleClick","node","newLinks","filter","l","newNodes","splice","forEach","n","idx"],"mappings":";AAAA,OAAOA,KAAP,MAAmB,OAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,WAAT,QAA6B,aAA7B;AACA,OAAOC,YAAP,MAAyB,sBAAzB,C,CACA;AACA;AACA;;AAEA;;;;;;AAMA,SAASC,cAAT,CAAwB;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAxB,EAA+C;AAE7C,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,MAAwCV,KAA9C;;AAEA,QAAMW,YAAY,GAAG,MAAM;AACnB,UAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC;AAAEM,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAD,CAAT;AAAuBC,MAAAA,KAAK,EAAE;AAA9B,KAAD,CAAhC;AAENP,IAAAA,SAAS,CAAC,MAAM;AACdQ,MAAAA,WAAW,CAAC,MAAM;AAChB;AACAJ,QAAAA,OAAO,CAAC,CAAC;AAAEC,UAAAA,KAAF;AAASE,UAAAA;AAAT,SAAD,KAAuB;AAC7B,gBAAMD,EAAE,GAAGD,KAAK,CAACI,MAAjB;AACA,iBAAO;AACLJ,YAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ,EAAW;AAAEC,cAAAA;AAAF,aAAX,CADF;AAELC,YAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ,EAAW;AAAEG,cAAAA,MAAM,EAAEJ,EAAV;AAAcK,cAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBR,EAAE,GAAC,CAApB,CAAX;AAAtB,aAAX;AAFF,WAAP;AAID,SANM,CAAP;AAOD,OATU,EASR,IATQ,CAAX;AAUD,KAXQ,EAWN,EAXM,CAAT;AAYA,UAAMS,WAAW,GAAGd,WAAW,CAACe,IAAI,IAAI;AACtC,YAAM;AAAEX,QAAAA,KAAF;AAASE,QAAAA;AAAT,UAAoBJ,IAA1B,CADsC,CAEtC;;AACA,YAAMc,QAAQ,GAAGV,KAAK,CAACW,MAAN,CAAaC,CAAC,IAAIA,CAAC,CAACT,MAAF,KAAaM,IAAb,IAAqBG,CAAC,CAACR,MAAF,KAAaK,IAApD,CAAjB,CAHsC,CAGsC;;AAC5EI,MAAAA,QAAQ,CAACC,MAAT,CAAgBL,IAAI,CAACV,EAArB,EAAyB,CAAzB,EAJsC,CAIT;;AAC7Bc,MAAAA,QAAQ,CAACE,OAAT,CAAiB,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAAED,QAAAA,CAAC,CAACjB,EAAF,GAAOkB,GAAP;AAAc,OAA7C,EALsC,CAKU;;AAChDpB,MAAAA,OAAO,CAAC;AAAEC,QAAAA,KAAK,EAAEe,QAAT;AAAmBb,QAAAA,KAAK,EAAEU;AAA1B,OAAD,CAAP;AACD,KAP8B,EAO5B,CAACd,IAAD,EAAOC,OAAP,CAP4B,CAA/B;AASA,wBAAO,oBAAC,YAAD;AACL,MAAA,cAAc,EAAE,KADX;AAEL,MAAA,WAAW,EAAEW,WAFR;AAGL,MAAA,SAAS,EAAEZ,IAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAKD,GA7BD;AA8BD;;AACD,eAAeP,cAAf,C,CAEE;;AACA","sourcesContent":["import React  from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../node_functions';\nimport { graphConfig }  from \"../myConfig\";\nimport ForceGraph2D from 'react-force-graph-2d';\n//import ForceGraph3D from 'react-force-graph-3d';\n//import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({state, dispatchState}){\n\n\t\tconst { useState, useEffect, useCallback  } = React;\n\n\t\tconst DynamicGraph = () => {\n\t\t\t\t      const [data, setData] = useState({ nodes: [{ id: 0  }], links: []  });\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\tsetInterval(() => {\n\t\t\t\t\t\t\t\t// Add a new connected node every second\n\t\t\t\t\t\t\t\tsetData(({ nodes, links  }) => {\n\t\t\t\t\t\t\t\t\t\tconst id = nodes.length;\n\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\tnodes: [...nodes, { id  }],\n\t\t\t\t\t\t\t\t\t\t\t\tlinks: [...links, { source: id, target: Math.round(Math.random() * (id-1))  }]\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, 1000);\n\t\t\t\t}, []);\n\t\t\t\tconst handleClick = useCallback(node => {\n\t\t\t\t\t\tconst { nodes, links  } = data;\n\t\t\t\t\t\t// Remove node on click\n\t\t\t\t\t\tconst newLinks = links.filter(l => l.source !== node && l.target !== node); // Remove links attached to node\n\t\t\t\t\t\tnewNodes.splice(node.id, 1); // Remove node\n\t\t\t\t\t\tnewNodes.forEach((n, idx) => { n.id = idx;  }); // Reset node ids to array index\n\t\t\t\t\t\tsetData({ nodes: newNodes, links: newLinks  });\n\t\t\t\t}, [data, setData]);\n\t\t\t\t\t\t\t\t\n\t\t\t\treturn <ForceGraph3D\n\t\t\t\t\t\tenableNodeDrag={false}\n\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\tgraphData={data}\n\t\t\t\t/>;\n\t\t};\n}\nexport default GraphContainer;\n\n\t\t// redifine the function inside this context \n\t\t/*\n\t\tlet onClickNode_func =\n\t\t\t\t(nodeId) => onClickNode(nodeId, state, dispatchState);\n\t\treturn(\n\t\t\t\t<div style={{backgroundImage: 'url(./grid.png)'}} >\n\t\t\t\t\t\t<Graph \n\t\t\t\t\t\t\t\tid=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\tonClickNode={onClickNode_func}\n\t\t\t\t\t\t\t\tbackgroundColor=\"black\"\n\t\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t)\n\t\t*/\n"]},"metadata":{},"sourceType":"module"}