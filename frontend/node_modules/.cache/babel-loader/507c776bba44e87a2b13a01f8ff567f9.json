{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT } from \"../../myConfig\";\nimport classes from './SearchSuggestion.css'; //import { queryNewWord, queryPath } from '../node_functions';\n//import { colors }  from \"../myConfig\";\n//import { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n//import { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\n//import { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/';\n\nfunction SuggestionsContainer(props) {\n  let state = props.state;\n  let dispatchState = props.dispatchState;\n  /* tahek a child fro a input an add suggestions to it */\n  // handle the change by seting the state variable to \n\n  const [suggestions, setSuggestions] = useState([]);\n  useEffect(() => {\n    /* query server for search suggestionsa\n     * and sets the  */\n    console.log(\"I ran\");\n    fetch(API_ENDPOINT + query_search + state.searchTerm).then(result => result.json()) //unpack suggestions\n    .then(suggestions => setSuggestions(suggestions)).catch(() => dispatchState({\n      type: 'SET_ERROR'\n    }));\n  }, [state.searchTerm, dispatchState]);\n\n  const SuggestionList = () => /*#__PURE__*/React.createElement(\"ul\", {\n    class: \"suggestions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, suggestions.map((suggestion, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 32\n    }\n  }, suggestion)));\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.children, state.searchTerm.length > 2 ? /*#__PURE__*/React.createElement(SuggestionList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 35\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n}\n\nexport default SuggestionsContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js"],"names":["React","useState","useEffect","API_ENDPOINT","classes","query_search","SuggestionsContainer","props","state","dispatchState","suggestions","setSuggestions","console","log","fetch","searchTerm","then","result","json","catch","type","SuggestionList","map","suggestion","index","children","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA8B,gBAA9B;AACA,OAAOC,OAAP,MAAoB,wBAApB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAOA,IAAIC,YAAY,GAAG,cAAnB;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAAoC;AAClC,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AACA,MAAIC,aAAa,GAAGF,KAAK,CAACE,aAA1B;AACD;AACC;;AACA,QAAO,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA/C;AAGAC,EAAAA,SAAS,CAAE,MAAM;AACf;;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAC,IAAAA,KAAK,CAACX,YAAY,GAAGE,YAAf,GAA8BG,KAAK,CAACO,UAArC,CAAL,CACGC,IADH,CACQC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADlB,EACiC;AADjC,KAEGF,IAFH,CAEQN,WAAW,IAAIC,cAAc,CAACD,WAAD,CAFrC,EAGGS,KAHH,CAGS,MAAMV,aAAa,CAAC;AAACW,MAAAA,IAAI,EAAC;AAAN,KAAD,CAH5B;AAID,GARQ,EAQN,CAACZ,KAAK,CAACO,UAAP,EAAmBN,aAAnB,CARM,CAAT;;AAWA,QAAMY,cAAc,GAAG,mBACrB;AAAI,IAAA,KAAK,EAAC,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,WAAW,CAACY,GAAZ,CACC,CAACC,UAAD,EAAaC,KAAb,kBAAuB;AAAI,IAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBD,UAAjB,CADxB,CADH,CADF;;AAMA,sBAAO,0CACJhB,KAAK,CAACkB,QADF,EAEJjB,KAAK,CAACO,UAAN,CAAiBW,MAAjB,GAA0B,CAA1B,gBAA6B,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,gBAAgD,yCAF5C,CAAP;AAID;;AAED,eAAepB,oBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT }  from \"../../myConfig\";\nimport classes from './SearchSuggestion.css';\n//import { queryNewWord, queryPath } from '../node_functions';\n//import { colors }  from \"../myConfig\";\n//import { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n//import { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\n//import { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/'\n\nfunction SuggestionsContainer(props){\n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tconst  [suggestions, setSuggestions] = useState([])\t\n\n\t\t\t\t\n\t\tuseEffect( () => {\n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tconsole.log(\"I ran\");\n\t\t\t\tfetch(API_ENDPOINT + query_search + state.searchTerm)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch(() => dispatchState({type:'SET_ERROR'}));\n\t\t}, [state.searchTerm, dispatchState])\n\n\n\t\tconst SuggestionList = () =>\n\t\t\t\t<ul class=\"suggestions\">\n\t\t\t\t\t\t{suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => <li key={index}>{suggestion}</li> )}\n\t\t\t\t</ul>\n\n\t\treturn <>\n\t\t\t\t{props.children}\n\t\t\t\t{state.searchTerm.length > 2? <SuggestionList/>: <></> }\n\t\t</>\n}\n\nexport default SuggestionsContainer;\n"]},"metadata":{},"sourceType":"module"}