{"ast":null,"code":"import { colors, API_ENDPOINT } from \"./myConfig\";\n/*\n * ==================================================\n *      Functions Definnitions for handeling changes\n * ==================================================\n * \n */\n\nconst processNode = node => {\n  /* process a node from the api into one for the dispatcher\n   * it changes title for id, for instance */\n  node['id'] = node.w_id;\n  node['key'] = node.w_id;\n  node['isSelected'] = false;\n  node['color'] = colors.node.default;\n  return node;\n}; // retrive node with given node id from state \n\n\nconst getNode = (nodeId, state) => state.nodes.filter(node => node.id === nodeId)[0]; // attemps to return true id node is not in state\n\n\nconst isNewNode = (nodeId, state) => state.nodes.every(node => node.id !== nodeId);\n\nconst onClickNode = (nodeId, state, dispatchState) => {\n  // when user clicks on a node\n  requestAdjecentNodes(getNode(nodeId, state), state, dispatchState);\n  dispatchState({\n    type: 'SWITCH_SELECTED_NODE',\n    payload: nodeId\n  });\n};\n\nconst requestAdjecentNodes = (node, state, dispatchState) => {\n  /* for every node request the adjecent node to it */\n  let graph_type = 'synonyms/';\n  fetch(API_ENDPOINT + graph_type + node.id).then(result => result.json()).then(adjNodes => adjNodes.forEach(adjNode => {\n    if (isNewNode(node.id, state)) {\n      adjNode = processNode(adjNode);\n      dispatchState({\n        type: 'SET_NODE_LINK',\n        payload: {\n          node: adjNode,\n          link: {\n            source: node.id,\n            target: adjNode.id\n          }\n        }\n      });\n    }\n  })).catch(() => dispatchState({\n    type: 'SET_FETCH_FAILED'\n  }));\n  /*\n  node.synonyms.forEach(synonym => {\n  \t\tif(isNewNode(synonym['synonym'], state)){\n  \t\t\t\tfetch(API_ENDPOINT + synonym[\"synonym\"])\n  \t\t\t\t\t\t.then(result => result.json())\n  \t\t\t\t\t\t.then(result => processNode(result))\n  \t\t\t\t\t\t.then(adjNode => {\n  \t\t\t\t\t\t\t\tdispatchState({\n  \t\t\t\t\t\t\t\t\t\ttype: 'SET_NODE_LINK', \n  \t\t\t\t\t\t\t\t\t\tpayload: { \n  \t\t\t\t\t\t\t\t\t\t\t\tnode: adjNode,\n  \t\t\t\t\t\t\t\t\t\t\t\tlink: { \n  \t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node.id ,  \n  \t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: adjNode.id \n  \t\t\t\t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t})\n  \t\t\t\t\t\t})\n  \t\t\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}))\n  \t\t}\n  })\n  */\n};\n\nconst isWordNotFound = (response, dispatchState) => {\n  // Set error to state when user search a word not found\n  if (response.detail === \"Not found.\") {\n    dispatchState({\n      type: 'SET_WORD_NOT_FOUND'\n    });\n    throw new Error(\"word not found\");\n  } else {\n    return response;\n  }\n};\n\nconst onMouseOverNode = function (nodeId, dispatchState) {\n  dispatchState({\n    type: 'SET_DEFINED_NODE',\n    payload: nodeId\n  }); // need to fund a way to also run the default fuction \n};\n\nexport { processNode, isWordNotFound, requestAdjecentNodes, onClickNode, onMouseOverNode };","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/node_functions.js"],"names":["colors","API_ENDPOINT","processNode","node","w_id","default","getNode","nodeId","state","nodes","filter","id","isNewNode","every","onClickNode","dispatchState","requestAdjecentNodes","type","payload","graph_type","fetch","then","result","json","adjNodes","forEach","adjNode","link","source","target","catch","isWordNotFound","response","detail","Error","onMouseOverNode"],"mappings":"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","sourcesContent":["import { colors, API_ENDPOINT }  from \"./myConfig\";\n\n/*\n * ==================================================\n *      Functions Definnitions for handeling changes\n * ==================================================\n * \n */\n\n\nconst processNode = (node) =>{\n\t\t/* process a node from the api into one for the dispatcher\n\t\t * it changes title for id, for instance */\n\t\tnode['id'] = node.w_id;\n\t\tnode['key'] = node.w_id;\n\t\tnode['isSelected'] = false;\n\t\tnode['color'] = colors.node.default;\n\t\treturn node\n}\n\n// retrive node with given node id from state \nconst getNode = (nodeId, state) => state.nodes.filter( node => node.id === nodeId )[0]\n\n// attemps to return true id node is not in state\nconst isNewNode = (nodeId, state) => state.nodes.every( node => node.id !== nodeId )\n\nconst onClickNode = (nodeId, state, dispatchState) => {\n\t\t// when user clicks on a node\n\t\trequestAdjecentNodes(getNode(nodeId, state), state, dispatchState)\n\t\tdispatchState({type:'SWITCH_SELECTED_NODE', payload: nodeId})  \n};\n\nconst requestAdjecentNodes = (node, state, dispatchState) => {\n\t\t/* for every node request the adjecent node to it */\n\t\tlet graph_type = 'synonyms/'\n\t\tfetch(API_ENDPOINT + graph_type + node.id )\n\t\t\t\t.then(result => result.json())\n\t\t\t\t.then(adjNodes => adjNodes.forEach(adjNode => {  \n\t\t\t\t\t\tif(isNewNode(node.id, state)){\n\t\t\t\t\t\t\t\tadjNode = processNode(adjNode);\n\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\ttype: 'SET_NODE_LINK', \n\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\tnode: adjNode,\n\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node.id ,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: adjNode.id \n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t}))\n\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}))\n\n\t\t/*\n\t\tnode.synonyms.forEach(synonym => {\n\t\t\t\tif(isNewNode(synonym['synonym'], state)){\n\t\t\t\t\t\tfetch(API_ENDPOINT + synonym[\"synonym\"])\n\t\t\t\t\t\t\t\t.then(result => result.json())\n\t\t\t\t\t\t\t\t.then(result => processNode(result))\n\t\t\t\t\t\t\t\t.then(adjNode => {\n\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NODE_LINK', \n\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode: adjNode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node.id ,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: adjNode.id \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}))\n\t\t\t\t}\n\t\t})\n\t\t*/\n}\n\nconst isWordNotFound = (response, dispatchState) =>{\n\t\t// Set error to state when user search a word not found\n\t\tif( response.detail === \"Not found.\" ) {\n\t\t\t\tdispatchState({type: 'SET_WORD_NOT_FOUND'})\n\t\t\t\tthrow new Error(\"word not found\")\n\t\t}else{\n\t\t\t\treturn response\n\t\t}\n}\n\nconst onMouseOverNode = function(nodeId, dispatchState) {\n\t\tdispatchState({type:'SET_DEFINED_NODE', payload: nodeId})  \n\t\t// need to fund a way to also run the default fuction \n};\n\nexport { processNode, isWordNotFound, requestAdjecentNodes, onClickNode, onMouseOverNode }\n\n"]},"metadata":{},"sourceType":"module"}