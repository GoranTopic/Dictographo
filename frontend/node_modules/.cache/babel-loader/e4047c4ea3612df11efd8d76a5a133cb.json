{"ast":null,"code":"import constant from \"./constant.js\";\nexport default function (radius, x, y, z) {\n  var nodes,\n      nDim,\n      strength = constant(0.1),\n      strengths,\n      radiuses;\n  if (typeof radius !== \"function\") radius = constant(+radius);\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n  if (z == null) z = 0;\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length; i < n; ++i) {\n      var node = nodes[i],\n          dx = node.x - x || 1e-6,\n          dy = (node.y || 0) - y || 1e-6,\n          dz = (node.z || 0) - z || 1e-6,\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz),\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\n      node.vx += dx * k;\n\n      if (nDim > 1) {\n        node.vy += dy * k;\n      }\n\n      if (nDim > 2) {\n        node.vz += dz * k;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length;\n    strengths = new Array(n);\n    radiuses = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      radiuses[i] = +radius(nodes[i], i, nodes);\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function (initNodes, numDimensions) {\n    nodes = initNodes;\n    nDim = numDimensions;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  force.x = function (_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function (_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.z = function (_) {\n    return arguments.length ? (z = +_, force) : z;\n  };\n\n  return force;\n}","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/d3-force-3d/src/radial.js"],"names":["constant","radius","x","y","z","nodes","nDim","strength","strengths","radiuses","force","alpha","i","n","length","node","dx","dy","dz","r","Math","sqrt","k","vx","vy","vz","initialize","Array","isNaN","initNodes","numDimensions","_","arguments"],"mappings":"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","sourcesContent":["import constant from \"./constant.js\";\n\nexport default function(radius, x, y, z) {\n  var nodes,\n      nDim,\n      strength = constant(0.1),\n      strengths,\n      radiuses;\n\n  if (typeof radius !== \"function\") radius = constant(+radius);\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n  if (z == null) z = 0;\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length; i < n; ++i) {\n      var node = nodes[i],\n          dx = node.x - x || 1e-6,\n          dy = (node.y || 0) - y || 1e-6,\n          dz = (node.z || 0) - z || 1e-6,\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz),\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\n      node.vx += dx * k;\n      if (nDim>1) { node.vy += dy * k; }\n      if (nDim>2) { node.vz += dz * k; }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    radiuses = new Array(n);\n    for (i = 0; i < n; ++i) {\n      radiuses[i] = +radius(nodes[i], i, nodes);\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(initNodes, numDimensions) {\n    nodes = initNodes;\n    nDim = numDimensions;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.z = function(_) {\n    return arguments.length ? (z = +_, force) : z;\n  };\n\n  return force;\n}\n"]},"metadata":{},"sourceType":"module"}