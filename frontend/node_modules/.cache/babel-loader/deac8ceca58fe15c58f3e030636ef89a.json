{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _d3Shape = require(\"d3-shape\");\n\nvar _node = _interopRequireDefault(require(\"./node.const\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * @module Node/helper\n * @description\n * Some methods that help no the process of rendering a node.\n */\n\n/**\n * Converts a string that specifies a symbol into a concrete instance\n * of d3 symbol.<br/>\n * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol}\n * @param  {string} typeName - the string that specifies the symbol type (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol (defaults to circle).\n * @memberof Node/helper\n */\n\n\nfunction _convertTypeToD3Symbol(typeName) {\n  switch (typeName) {\n    case _node[\"default\"].SYMBOLS.CIRCLE:\n      return _d3Shape.symbolCircle;\n\n    case _node[\"default\"].SYMBOLS.CROSS:\n      return _d3Shape.symbolCross;\n\n    case _node[\"default\"].SYMBOLS.DIAMOND:\n      return _d3Shape.symbolDiamond;\n\n    case _node[\"default\"].SYMBOLS.SQUARE:\n      return _d3Shape.symbolSquare;\n\n    case _node[\"default\"].SYMBOLS.STAR:\n      return _d3Shape.symbolStar;\n\n    case _node[\"default\"].SYMBOLS.TRIANGLE:\n      return _d3Shape.symbolTriangle;\n\n    case _node[\"default\"].SYMBOLS.WYE:\n      return _d3Shape.symbolWye;\n\n    default:\n      return _d3Shape.symbolCircle;\n  }\n}\n/**\n * Build a d3 svg symbol based on passed symbol and symbol type.\n * @param  {number} [size=80] - the size of the symbol.\n * @param  {string} [symbolTypeDesc='circle'] - the string containing the type of symbol that we want to build\n * (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol.\n * @memberof Node/helper\n */\n\n\nfunction buildSvgSymbol() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _node[\"default\"].DEFAULT_NODE_SIZE;\n  var symbolTypeDesc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _node[\"default\"].SYMBOLS.CIRCLE;\n  return (0, _d3Shape.symbol)().size(function () {\n    return size;\n  }).type(function () {\n    return _convertTypeToD3Symbol(symbolTypeDesc);\n  })();\n}\n/**\n * return dx, dy, and potentially alignmentBaseline and textAnchor props to put label in correct position relative to node\n * @param {number | undefined} dx - default computed offset of label to the right of the node\n * @param {'left' | 'right' | 'top' | 'bottom' | 'center' | undefined} labelPosition - user specified position of label relative to node\n * @returns {{dx: string, dy: string} | {dx: string, dy: string, textAnchor: string, dominantBaseline: string}}\n * props to put text svg for label in correct spot. default case returns just dx and dy, without textAnchor and dominantBaseline\n */\n\n\nfunction getLabelPlacementProps(dx, labelPosition) {\n  switch (labelPosition) {\n    case \"right\":\n      return {\n        dx: dx ? \"\".concat(dx) : _node[\"default\"].NODE_LABEL_DX,\n        dy: \"0\",\n        dominantBaseline: \"middle\",\n        textAnchor: \"start\"\n      };\n\n    case \"left\":\n      return {\n        dx: dx ? \"\".concat(-dx) : \"-\".concat(_node[\"default\"].NODE_LABEL_DX),\n        dy: \"0\",\n        dominantBaseline: \"middle\",\n        textAnchor: \"end\"\n      };\n\n    case \"top\":\n      return {\n        dx: \"0\",\n        dy: dx ? \"\".concat(-dx) : \"-\".concat(_node[\"default\"].NODE_LABEL_DX),\n        dominantBaseline: \"baseline\",\n        textAnchor: \"middle\"\n      };\n\n    case \"bottom\":\n      return {\n        dx: \"0\",\n        dy: dx ? \"\".concat(dx) : _node[\"default\"].NODE_LABEL_DX,\n        dominantBaseline: \"hanging\",\n        textAnchor: \"middle\"\n      };\n\n    case \"center\":\n      return {\n        dx: \"0\",\n        dy: \"0\",\n        dominantBaseline: \"middle\",\n        textAnchor: \"middle\"\n      };\n\n    default:\n      return {\n        dx: dx ? \"\".concat(dx) : _node[\"default\"].NODE_LABEL_DX,\n        dy: _node[\"default\"].NODE_LABEL_DY\n      };\n  }\n}\n\nvar _default = {\n  buildSvgSymbol: buildSvgSymbol,\n  getLabelPlacementProps: getLabelPlacementProps\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/telix/dictio-grapho/frontend/node_modules/react-d3-graph/lib/components/node/node.helper.js"],"names":["Object","defineProperty","exports","value","_d3Shape","require","_node","_interopRequireDefault","obj","__esModule","_convertTypeToD3Symbol","typeName","SYMBOLS","CIRCLE","symbolCircle","CROSS","symbolCross","DIAMOND","symbolDiamond","SQUARE","symbolSquare","STAR","symbolStar","TRIANGLE","symbolTriangle","WYE","symbolWye","buildSvgSymbol","size","arguments","length","undefined","DEFAULT_NODE_SIZE","symbolTypeDesc","symbol","type","getLabelPlacementProps","dx","labelPosition","concat","NODE_LABEL_DX","dy","dominantBaseline","textAnchor","NODE_LABEL_DY","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _d3Shape = require(\"d3-shape\");\n\nvar _node = _interopRequireDefault(require(\"./node.const\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @module Node/helper\n * @description\n * Some methods that help no the process of rendering a node.\n */\n\n/**\n * Converts a string that specifies a symbol into a concrete instance\n * of d3 symbol.<br/>\n * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol}\n * @param  {string} typeName - the string that specifies the symbol type (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol (defaults to circle).\n * @memberof Node/helper\n */\nfunction _convertTypeToD3Symbol(typeName) {\n  switch (typeName) {\n    case _node[\"default\"].SYMBOLS.CIRCLE:\n      return _d3Shape.symbolCircle;\n\n    case _node[\"default\"].SYMBOLS.CROSS:\n      return _d3Shape.symbolCross;\n\n    case _node[\"default\"].SYMBOLS.DIAMOND:\n      return _d3Shape.symbolDiamond;\n\n    case _node[\"default\"].SYMBOLS.SQUARE:\n      return _d3Shape.symbolSquare;\n\n    case _node[\"default\"].SYMBOLS.STAR:\n      return _d3Shape.symbolStar;\n\n    case _node[\"default\"].SYMBOLS.TRIANGLE:\n      return _d3Shape.symbolTriangle;\n\n    case _node[\"default\"].SYMBOLS.WYE:\n      return _d3Shape.symbolWye;\n\n    default:\n      return _d3Shape.symbolCircle;\n  }\n}\n/**\n * Build a d3 svg symbol based on passed symbol and symbol type.\n * @param  {number} [size=80] - the size of the symbol.\n * @param  {string} [symbolTypeDesc='circle'] - the string containing the type of symbol that we want to build\n * (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol.\n * @memberof Node/helper\n */\n\n\nfunction buildSvgSymbol() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _node[\"default\"].DEFAULT_NODE_SIZE;\n  var symbolTypeDesc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _node[\"default\"].SYMBOLS.CIRCLE;\n  return (0, _d3Shape.symbol)().size(function () {\n    return size;\n  }).type(function () {\n    return _convertTypeToD3Symbol(symbolTypeDesc);\n  })();\n}\n/**\n * return dx, dy, and potentially alignmentBaseline and textAnchor props to put label in correct position relative to node\n * @param {number | undefined} dx - default computed offset of label to the right of the node\n * @param {'left' | 'right' | 'top' | 'bottom' | 'center' | undefined} labelPosition - user specified position of label relative to node\n * @returns {{dx: string, dy: string} | {dx: string, dy: string, textAnchor: string, dominantBaseline: string}}\n * props to put text svg for label in correct spot. default case returns just dx and dy, without textAnchor and dominantBaseline\n */\n\n\nfunction getLabelPlacementProps(dx, labelPosition) {\n  switch (labelPosition) {\n    case \"right\":\n      return {\n        dx: dx ? \"\".concat(dx) : _node[\"default\"].NODE_LABEL_DX,\n        dy: \"0\",\n        dominantBaseline: \"middle\",\n        textAnchor: \"start\"\n      };\n\n    case \"left\":\n      return {\n        dx: dx ? \"\".concat(-dx) : \"-\".concat(_node[\"default\"].NODE_LABEL_DX),\n        dy: \"0\",\n        dominantBaseline: \"middle\",\n        textAnchor: \"end\"\n      };\n\n    case \"top\":\n      return {\n        dx: \"0\",\n        dy: dx ? \"\".concat(-dx) : \"-\".concat(_node[\"default\"].NODE_LABEL_DX),\n        dominantBaseline: \"baseline\",\n        textAnchor: \"middle\"\n      };\n\n    case \"bottom\":\n      return {\n        dx: \"0\",\n        dy: dx ? \"\".concat(dx) : _node[\"default\"].NODE_LABEL_DX,\n        dominantBaseline: \"hanging\",\n        textAnchor: \"middle\"\n      };\n\n    case \"center\":\n      return {\n        dx: \"0\",\n        dy: \"0\",\n        dominantBaseline: \"middle\",\n        textAnchor: \"middle\"\n      };\n\n    default:\n      return {\n        dx: dx ? \"\".concat(dx) : _node[\"default\"].NODE_LABEL_DX,\n        dy: _node[\"default\"].NODE_LABEL_DY\n      };\n  }\n}\n\nvar _default = {\n  buildSvgSymbol: buildSvgSymbol,\n  getLabelPlacementProps: getLabelPlacementProps\n};\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}