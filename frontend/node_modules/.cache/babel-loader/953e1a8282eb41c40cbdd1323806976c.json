{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictio-grapho/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport { genRandomNode, genGrapNodes, genPath } from \"./RandomGenerator\";\nimport myConfig from \"./myConfig\";\n\nfunction App() {\n  // graph payload (with minimalist structure)\n  const initial_data = {\n    nodes: [{\n      id: \"Harry\",\n      fill: 'green',\n      type: 'Square',\n      color: 'red',\n      cx: 22,\n      cy: 22\n    }, {\n      id: \"Sally\"\n    }, {\n      id: \"Alice\"\n    }],\n    links: [{\n      source: \"Harry\",\n      target: \"Sally\",\n      color: 'red'\n    }, {\n      source: \"Harry\",\n      target: \"Alice\"\n    }],\n    isError: false,\n    isLoading: true,\n    searchTerm: '',\n    DestinationTerm: ''\n  }; // make reducer for the words data and internal state \n\n  const dataReducer = (state, action) => {\n    switch (action.type) {\n      case 'SET_NEW_NODE':\n        return { ...state,\n          nodes: [...state.nodes, action.payload.node],\n          links: [...state.links, ...action.payload.links]\n        };\n\n      case 'APPEND_NODES':\n        return { ...state,\n          nodes: [...state.nodes, ...action.payload.nodes],\n          links: [...state.links, ...action.payload.links]\n        };\n\n      case 'RESET_NODE':\n        return { ...state,\n          nodes: [action.payload.node],\n          links: []\n        };\n\n      case 'SET_FETCH_FAILED':\n        return { ...state,\n          isError: true\n        };\n\n      default:\n        throw new Error();\n    }\n  }; // define dispatcher for the Internal data \n\n\n  const [data, dispatchData] = React.useReducer(dataReducer, initial_data); // add Async word\n\n  const getWordAsync = () => new Promise((resolve, reject) => setTimeout(() => resolve(genRandomNode(data.nodes)), 200)); // get nodes Async\n\n\n  const getNodesAsync = word => new Promise((resolve, reject) => setTimeout(() => resolve(genGrapNodes(word, 0)), 200)); // get nodes Async\n\n\n  const getPathAsync = (word, dest) => new Promise((resolve, reject) => setTimeout(() => resolve(genPath(word, dest)), 200)); // add a random node\n\n\n  const addNodeAsync = () => {\n    getWordAsync().then(result => dispatchData({\n      type: 'SET_NEW_NODE',\n      payload: result\n    })).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  }; // append nodes into the graph\n\n\n  const appendNodesAsync = word => {\n    getNodesAsync(word).then(result => {\n      if (Array.isArray(result)) {\n        for (let i in result) dispatchData({\n          type: 'SET_NEW_NODE',\n          payload: result[i]\n        });\n      } else {\n        dispatchData({\n          type: 'APPEND_NODES',\n          payload: result\n        });\n      }\n    }).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  }; // append nodes in a path \n\n\n  const appendPathAsync = (word, dest) => {\n    getPathAsync(word, dest).then(result => {\n      for (let i in result) dispatchData({\n        type: 'SET_NEW_NODE',\n        payload: result[i]\n      });\n    }).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  }; // fuction for make a persitant state\n\n\n  const useSemiPersistentSate = key => {\n    const [value, setValue] = React.useState(localStorage.getItem(key) || '');\n    React.useEffect(key => {\n      localStorage.setItem(key, value);\n    }, [value]);\n    return [value, setValue];\n  }; // get state fuctions\n\n\n  const [searchTerm, setSearchTerm] = useSemiPersistentSate('search'); // get state fuctions\n\n  const [destinationTerm, setDestinationTerm] = useSemiPersistentSate('destination'); // handle the change by seting the state variable to \n\n  const handleSearchChange = change => setSearchTerm(change.target.value); // handle the change by seting the state variable to \n\n\n  const handleDestinationChange = change => setDestinationTerm(change.target.value); // handle submit search button\n\n\n  const handleSearchSubmit = () => {\n    dispatchData({\n      type: 'RESET_NODE',\n      payload: {\n        node: {\n          id: searchTerm\n        }\n      }\n    });\n    appendNodesAsync(searchTerm);\n  }; // handle path button\n\n\n  const handlePathSubmit = () => {\n    dispatchData({\n      type: 'RESET_NODE',\n      payload: {\n        node: {\n          id: searchTerm\n        }\n      }\n    });\n    appendPathAsync(searchTerm, destinationTerm);\n  };\n\n  const onClickNode = function (nodeId) {\n    console.log(`clicked node ${nodeId}`);\n    appendNodesAsync(nodeId);\n  };\n\n  const onRightClickNode = function (event, nodeId) {\n    window.alert(`Right clicked node ${nodeId}`);\n  };\n\n  const onClickLink = function (source, target) {\n    window.alert(`Clicked link between ${source} and ${target}`);\n  };\n\n  const onRightClickLink = function (event, source, target) {\n    window.alert(`Right clicked link between ${source} and ${target}`);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputWithLabel, {\n    id: \"search\",\n    type: \"text\",\n    isFocuse: true,\n    value: searchTerm,\n    onInputChange: handleSearchChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"Search:\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disable: !searchTerm,\n    onClick: handleSearchSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, \"Search\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addNodeAsync,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, \"Add random Node\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputWithLabel, {\n    id: \"destination\",\n    type: \"text\",\n    value: destinationTerm,\n    onInputChange: handleDestinationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, \"Destination:\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disable: !destinationTerm,\n    onClick: handlePathSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, \"Get path\")), /*#__PURE__*/React.createElement(Graph, {\n    id: \"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n    ,\n    data: data,\n    config: myConfig,\n    onClickNode: onClickNode,\n    onRightClickNode: onRightClickNode,\n    onClickLink: onClickLink,\n    onRightClickLink: onRightClickLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }));\n}\n\nconst InputWithLabel = ({\n  id,\n  type,\n  value,\n  onInputChange,\n  isFocused,\n  children\n}) => {\n  /* A component with the Input and a Label */\n  // Define an input ref for passing to input component\n  const inputRef = React.useRef(); // set up a side effect it is updates if the focus changes\n\n  React.useEffect(() => {\n    if (isFocused && inputRef.current) inputRef.current.focused();\n  }, [isFocused]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, \" \", children, \" \"), \"\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n    id: id,\n    ref: inputRef,\n    type: type,\n    value: value,\n    onChange: onInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/telix/dictio-grapho/src/App.js"],"names":["React","Graph","genRandomNode","genGrapNodes","genPath","myConfig","App","initial_data","nodes","id","fill","type","color","cx","cy","links","source","target","isError","isLoading","searchTerm","DestinationTerm","dataReducer","state","action","payload","node","Error","data","dispatchData","useReducer","getWordAsync","Promise","resolve","reject","setTimeout","getNodesAsync","word","getPathAsync","dest","addNodeAsync","then","result","catch","appendNodesAsync","Array","isArray","i","appendPathAsync","useSemiPersistentSate","key","value","setValue","useState","localStorage","getItem","useEffect","setItem","setSearchTerm","destinationTerm","setDestinationTerm","handleSearchChange","change","handleDestinationChange","handleSearchSubmit","handlePathSubmit","onClickNode","nodeId","console","log","onRightClickNode","event","window","alert","onClickLink","onRightClickLink","InputWithLabel","onInputChange","isFocused","children","inputRef","useRef","current","focused"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport { genRandomNode, genGrapNodes, genPath } from \"./RandomGenerator\";\nimport  myConfig  from \"./myConfig\";\n\nfunction App() {\n\n\t\t// graph payload (with minimalist structure)\n\t\tconst initial_data = {\n\t\t\t\tnodes: [{ id: \"Harry\", fill:'green', type:'Square', color:'red', cx:22, cy:22}, { id: \"Sally\" }, { id: \"Alice\" }],\n\t\t\t\tlinks: [\n\t\t\t\t\t\t{ source: \"Harry\", target: \"Sally\", color:'red' },\n\t\t\t\t\t\t{ source: \"Harry\", target: \"Alice\" },\n\t\t\t\t],\n\t\t\t\tisError: false,\n\t\t\t\tisLoading: true,\n\t\t\t\tsearchTerm: '',\n\t\t\t\tDestinationTerm: '',\n\t\t};\n\n\t\t// make reducer for the words data and internal state \n\t\tconst dataReducer = (state, action) =>{\n\t\t\t\tswitch (action.type){\n\t\t\t\t\t\tcase 'SET_NEW_NODE':\n\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, action.payload.node],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'APPEND_NODES':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 'RESET_NODE':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tnodes: [  action.payload.node ],\n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_FETCH_FAILED':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\t\t}\n\n\t\t// define dispatcher for the Internal data \n\t\tconst [data, dispatchData] = React.useReducer( dataReducer, initial_data );\n\n\t\t// add Async word\n\t\tconst getWordAsync = ()=> new Promise((resolve, reject) => setTimeout(() => resolve(genRandomNode(data.nodes)), 200));\n\n\t\t// get nodes Async\n\t\tconst getNodesAsync = (word)=> new Promise((resolve, reject)=> setTimeout(()=> resolve(genGrapNodes(word, 0)), 200));\n\n\t\t// get nodes Async\n\t\tconst getPathAsync =(word, dest)=> new Promise((resolve, reject)=> setTimeout(()=> resolve(genPath(word, dest)), 200));\n\n\t\t// add a random node\n\t\tconst addNodeAsync = () => { \n\t\t\t\tgetWordAsync()\n\t\t\t\t\t\t.then( result => dispatchData({ type: 'SET_NEW_NODE', payload: result }) )\n\t\t\t\t\t\t.catch( () => dispatchData({ type: 'SET_FETCH_FAILED' }) );\n\t\t}\n\n\t\t// append nodes into the graph\n\t\tconst appendNodesAsync = (word) => { \n\t\t\t\tgetNodesAsync(word)\n\t\t\t\t\t\t.then( result => {\n\t\t\t\t\t\t\t\tif(Array.isArray(result)){\n\t\t\t\t\t\t\t\t\t\tfor(let i in result) dispatchData({ type: 'SET_NEW_NODE', payload: result[i] });\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tdispatchData({ type: 'APPEND_NODES', payload: result })\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t}).catch( () => dispatchData({ type: 'SET_FETCH_FAILED' }) );\n\t\t}\n\n\n\t\t// append nodes in a path \n\t\tconst appendPathAsync = (word, dest) => { \n\t\t\t\tgetPathAsync(word, dest)\n\t\t\t\t\t\t.then( result => {for(let i in result) dispatchData({ type: 'SET_NEW_NODE', payload: result[i] }) })\n\t\t\t\t\t\t.catch( () => dispatchData({ type: 'SET_FETCH_FAILED' }) );\n\t\t}\n\n\t\t// fuction for make a persitant state\n\t\tconst useSemiPersistentSate = key => { \n\t\t\t\tconst [value, setValue] = React.useState( localStorage.getItem(key) || '');\n\t\t\t\tReact.useEffect( (key) => { localStorage.setItem(key, value)} , [value] );\n\t\t\t\treturn [value, setValue];\n\t\t}\n\n\t\t// get state fuctions\n\t\tconst [ searchTerm, setSearchTerm] = useSemiPersistentSate('search');\n\t\t// get state fuctions\n\t\tconst [ destinationTerm, setDestinationTerm] = useSemiPersistentSate('destination');\n\n\t\t// handle the change by seting the state variable to \n\t\tconst handleSearchChange = change => setSearchTerm(change.target.value);\n\t\t// handle the change by seting the state variable to \n\t\tconst handleDestinationChange = change => setDestinationTerm(change.target.value);\n\n\t\t// handle submit search button\n\t\tconst handleSearchSubmit = () => { \n\t\t\t\tdispatchData({ type: 'RESET_NODE', payload:{ node:{ id: searchTerm } } });\n\t\t\t\tappendNodesAsync(searchTerm);\n\t\t};\n\n\t\t// handle path button\n\t\tconst handlePathSubmit = () => { \n\t\t\t\tdispatchData({ type: 'RESET_NODE', payload:{ node:{ id: searchTerm } } });\n\t\t\t\tappendPathAsync(searchTerm, destinationTerm);\n\t\t};\n\n\t\tconst onClickNode = function(nodeId) {\n\t\t\t\tconsole.log(`clicked node ${nodeId}`);\n\t\t\t\tappendNodesAsync(nodeId);\n\t\t};\n\n\t\tconst onRightClickNode = function(event, nodeId) {\n\t\t\t\twindow.alert(`Right clicked node ${nodeId}`);\n\t\t};\n\n\t\tconst onClickLink = function(source, target) {\n\t\t\t\twindow.alert(`Clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\tconst onRightClickLink = function(event, source, target) {\n\t\t\t\twindow.alert(`Right clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<InputWithLabel id=\"search\" type=\"text\" isFocuse value={searchTerm} onInputChange={handleSearchChange}>\n\t\t\t\t\t\t\t\t\t\t<strong>Search:</strong>\n\t\t\t\t\t\t\t\t</InputWithLabel>\n\t\t\t\t\t\t\t\t<button type=\"button\" disable={!searchTerm} onClick={handleSearchSubmit}>\n\t\t\t\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button type=\"button\" onClick={addNodeAsync}>\n\t\t\t\t\t\t\t\t\t\tAdd random Node\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<InputWithLabel id=\"destination\" type=\"text\" value={destinationTerm} onInputChange={handleDestinationChange}>\n\t\t\t\t\t\t\t\t\t\t<strong>Destination:</strong>\n\t\t\t\t\t\t\t\t</InputWithLabel>\n\t\t\t\t\t\t\t\t<button type=\"button\" disable={!destinationTerm} onClick={handlePathSubmit}>\n\t\t\t\t\t\t\t\t\t\tGet path\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Graph\n\t\t\t\t\t\t\t\tid=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\t\tconfig={myConfig}\n\t\t\t\t\t\t\t\tonClickNode={onClickNode}\n\t\t\t\t\t\t\t\tonRightClickNode={onRightClickNode}\n\t\t\t\t\t\t\t\tonClickLink={onClickLink}\n\t\t\t\t\t\t\t\tonRightClickLink={onRightClickLink}\n\t\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t);\n}\n\nconst InputWithLabel = ({ id, type, value, onInputChange, isFocused, children }) => {\n\t\t/* A component with the Input and a Label */\n\t\t// Define an input ref for passing to input component\n\t\tconst inputRef = React.useRef()\n\t\t// set up a side effect it is updates if the focus changes\n\t\tReact.useEffect(() => { if(isFocused && inputRef.current) inputRef.current.focused(); }, [isFocused])\n\t\treturn <>\n\t\t\t\t\t\t<label htmlFor={id}> {children} </label>\n\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t<input id={id} ref={inputRef} type={type} value={value} onChange={onInputChange}/>\n\t\t\t\t\t</>\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}