{"ast":null,"code":"import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function (links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      nDim,\n      count,\n      bias,\n      random,\n      iterations = 1;\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x = 0, y = 0, z = 0, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n\n        if (nDim > 1) {\n          y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        }\n\n        if (nDim > 2) {\n          z = target.z + target.vz - source.z - source.vz || jiggle(random);\n        }\n\n        l = Math.sqrt(x * x + y * y + z * z);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l, z *= l;\n        target.vx -= x * (b = bias[i]);\n\n        if (nDim > 1) {\n          target.vy -= y * b;\n        }\n\n        if (nDim > 2) {\n          target.vz -= z * b;\n        }\n\n        source.vx += x * (b = 1 - b);\n\n        if (nDim > 1) {\n          source.vy += y * b;\n        }\n\n        if (nDim > 2) {\n          source.vz += z * b;\n        }\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map(function (d, i) {\n      return [id(d, i, nodes), d];\n    })),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function (_nodes, _numDimensions, _random) {\n    nodes = _nodes;\n    nDim = _numDimensions;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function (_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function (_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function (_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/d3-force-3d/src/link.js"],"names":["constant","jiggle","index","d","find","nodeById","nodeId","node","get","Error","links","id","strength","defaultStrength","strengths","distance","distances","nodes","nDim","count","bias","random","iterations","link","Math","min","source","target","force","alpha","k","n","length","i","x","y","z","l","b","vx","vy","vz","sqrt","initialize","m","Map","map","Array","initializeStrength","initializeDistance","_nodes","_numDimensions","_random","_","arguments"],"mappings":"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","sourcesContent":["import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      nDim,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x = 0, y = 0, z = 0, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        if (nDim > 1) { y = target.y + target.vy - source.y - source.vy || jiggle(random); }\n        if (nDim > 2) { z = target.z + target.vz - source.z - source.vz || jiggle(random); }\n        l = Math.sqrt(x * x + y * y + z * z);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l, z *= l;\n\n        target.vx -= x * (b = bias[i]);\n        if (nDim > 1) { target.vy -= y * b; }\n        if (nDim > 2) { target.vz -= z * b; }\n\n        source.vx += x * (b = 1 - b);\n        if (nDim > 1) { source.vy += y * b; }\n        if (nDim > 2) { source.vz += z * b; }\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, _numDimensions, _random) {\n    nodes = _nodes;\n    nDim = _numDimensions;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n"]},"metadata":{},"sourceType":"module"}