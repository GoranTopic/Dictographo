{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT } from \"../../myConfig\"; //import { queryNewWord, queryPath } from '../node_functions';\n//import { colors }  from \"../myConfig\";\n//import { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n//import { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\n//import { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nimport Autosuggest from 'react-autosuggest';\n\nconst filterSuggestions = suggestions => {\n  return suggestions.filter(suggestion => /\\s/.test(suggestion));\n};\n\nconst getSuggestionValue = suggestion => suggestion; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }\n}, suggestion.w_id);\n\nclass Example extends React.Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = async ({\n      value\n    }) => {\n      if (value.length > 2) {\n        console.log;\n        fetch(API_ENDPOINT + query_search + value).then(result => result.json()) //unpack suggestions\n        .then(suggestions => {\n          console.log(suggestions);\n          return suggestions;\n        }).then(suggestions => filterSuggestions(suggestions)).then(suggestions => this.setState({\n          suggestions: suggestions,\n          value: value\n        })).catch(err => console.log(err));\n      }\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'dog cat',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nlet query_search = 'querysearch/';\n\nfunction SuggestionsContainer(props) {\n  let state = props.state;\n  let dispatchState = props.dispatchState;\n  /* tahek a child fro a input an add suggestions to it */\n  // handle the change by seting the state variable to \n\n  const [suggestions, setSuggestions] = useState([]);\n  useEffect(() => {\n    /* query server for search suggestionsa\n     * and sets the  */\n    console.log(\"I ran\");\n    fetch(API_ENDPOINT + query_search + state.searchTerm).then(result => result.json()) //unpack suggestions\n    .then(suggestions => setSuggestions(suggestions)).catch(() => dispatchState({\n      type: 'SET_ERROR'\n    }));\n  }, [state.searchTerm, dispatchState]);\n\n  const SuggestionList = () => /*#__PURE__*/React.createElement(\"ul\", {\n    class: \"suggestions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, suggestions.map((suggestion, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 32\n    }\n  }, suggestion)));\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Example, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }), props.children); //{state.searchTerm.length > 2? <SuggestionList/>: <></> }\n}\n\nexport default SuggestionsContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js"],"names":["React","useState","useEffect","API_ENDPOINT","Autosuggest","filterSuggestions","suggestions","filter","suggestion","test","getSuggestionValue","renderSuggestion","w_id","Example","Component","constructor","onChange","event","newValue","setState","value","onSuggestionsFetchRequested","length","console","log","fetch","query_search","then","result","json","catch","err","onSuggestionsClearRequested","state","render","inputProps","placeholder","SuggestionsContainer","props","dispatchState","setSuggestions","searchTerm","type","SuggestionList","map","index","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT }  from \"../../myConfig\";\n//import { queryNewWord, queryPath } from '../node_functions';\n//import { colors }  from \"../myConfig\";\n//import { Nav, Navbar, NavDropdown, Form, FormControl, Button, InputGroup } from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n//import { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\n//import { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nimport Autosuggest from 'react-autosuggest';\n\n\nconst filterSuggestions = suggestions => {\n\t\treturn suggestions.filter( suggestion => /\\s/.test(suggestion))\n};\n\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n\t\t<div>\n\t\t\t\t{suggestion.w_id}\n\t\t</div>\n);\n\nclass Example extends React.Component {\n\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.state = {\n\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\tsuggestions: []\n\t\t\t\t\t\t    \n\t\t\t\t};\n\t\t\t\t  }\n\n\t\tonChange = (event, { newValue }) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\tvalue: newValue \n\t\t\t\t})\n\t\t};\n\t\t\n\t\tonSuggestionsFetchRequested = async ({ value  }) => {\n\t\t\t\tif(value.length > 2){\n\t\t\t\t\t\tconsole.log\n\t\t\t\t\t\tfetch(API_ENDPOINT + query_search + value)\n\t\t\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t\t\t.then(suggestions => { console.log(suggestions); return suggestions })\n\t\t\t\t\t\t\t\t.then(suggestions => filterSuggestions(suggestions))\n\t\t\t\t\t\t\t\t.then(suggestions => this.setState({\n\t\t\t\t\t\t\t\t\t\tsuggestions: suggestions,\n\t\t\t\t\t\t\t\t\t\tvalue: value })\n\t\t\t\t\t\t\t\t).catch((err) => console.log(err));\n\t\t\t\t}\n\t\t};\n\n\t\tonSuggestionsClearRequested = () => {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\t      suggestions: []\n\t\t\t\t});\n\t\t\t\t  \n\t\t};\n\n\t\trender() {\n\t\t\t\tconst { value, suggestions  } = this.state;\n\n\t\t\t\t// Autosuggest will pass through all these props to the input.\n\t\t\t\tconst inputProps = {\n\t\t\t\t\t\tplaceholder: 'dog cat',\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tonChange: this.onChange\n\t\t\t\t};\n\n\t\t\t\t// Finally, render it!\n\t\t\t\treturn (\n\t\t\t\t\t\t<Autosuggest\n\t\t\t\t\t\t\t\tsuggestions={suggestions}\n\t\t\t\t\t\t\t\tonSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n\t\t\t\t\t\t\t\tonSuggestionsClearRequested={this.onSuggestionsClearRequested}\n\t\t\t\t\t\t\t\tgetSuggestionValue={getSuggestionValue}\n\t\t\t\t\t\t\t\trenderSuggestion={renderSuggestion}\n\t\t\t\t\t\t\t\tinputProps={inputProps}\n\t\t\t\t\t\t/>\n\t\t\t\t);\n\t\t}\n}\n\n\n\n\nlet query_search = 'querysearch/'\n\nfunction SuggestionsContainer(props){\n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tconst  [suggestions, setSuggestions] = useState([])\t\n\n\t\t\t\t\n\t\tuseEffect(() => {\n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tconsole.log(\"I ran\");\n\t\t\t\tfetch(API_ENDPOINT + query_search + state.searchTerm)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch(() => dispatchState({type:'SET_ERROR'}));\n\t\t}, [state.searchTerm, dispatchState])\n\n\n\t\tconst SuggestionList = () =>\n\t\t\t\t<ul class=\"suggestions\">\n\t\t\t\t\t\t{suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => <li key={index}>{suggestion}</li> )}\n\t\t\t\t</ul>\n\n\t\treturn <>\n\t\t\t\t<Example/>\n\t\t\t\t{props.children}\n\t\t\t\t\n\t\t</>\n\t\t\t\t//{state.searchTerm.length > 2? <SuggestionList/>: <></> }\n}\n\nexport default SuggestionsContainer;\n"]},"metadata":{},"sourceType":"module"}