{"ast":null,"code":"var createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateDragForceFunction;\nmodule.exports.generateCreateDragForceFunctionBody = generateCreateDragForceFunctionBody;\n\nfunction generateCreateDragForceFunction(dimension) {\n  var code = generateCreateDragForceFunctionBody(dimension);\n  return new Function('options', code);\n}\n\nfunction generateCreateDragForceFunctionBody(dimension) {\n  var pattern = createPatternBuilder(dimension);\n  var code = \"\\n  if (!Number.isFinite(options.dragCoefficient)) throw new Error('dragCoefficient is not a finite number');\\n\\n  return {\\n    update: function(body) {\\n      \".concat(pattern('body.force.{var} -= options.dragCoefficient * body.velocity.{var};', {\n    indent: 6\n  }), \"\\n    }\\n  };\\n\");\n  return code;\n}","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateDragForce.js"],"names":["createPatternBuilder","require","module","exports","generateCreateDragForceFunction","generateCreateDragForceFunctionBody","dimension","code","Function","pattern","indent"],"mappings":"AAAA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,+BAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,mCAAf,GAAqDA,mCAArD;;AAEA,SAASD,+BAAT,CAAyCE,SAAzC,EAAoD;AAClD,MAAIC,IAAI,GAAGF,mCAAmC,CAACC,SAAD,CAA9C;AACA,SAAO,IAAIE,QAAJ,CAAa,SAAb,EAAwBD,IAAxB,CAAP;AACD;;AAED,SAASF,mCAAT,CAA6CC,SAA7C,EAAwD;AACtD,MAAIG,OAAO,GAAGT,oBAAoB,CAACM,SAAD,CAAlC;AACA,MAAIC,IAAI,8KAKFE,OAAO,CAAC,oEAAD,EAAuE;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAvE,CALL,oBAAR;AASA,SAAOH,IAAP;AACD","sourcesContent":["const createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateDragForceFunction;\nmodule.exports.generateCreateDragForceFunctionBody = generateCreateDragForceFunctionBody;\n\nfunction generateCreateDragForceFunction(dimension) {\n  let code = generateCreateDragForceFunctionBody(dimension);\n  return new Function('options', code);\n}\n\nfunction generateCreateDragForceFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let code = `\n  if (!Number.isFinite(options.dragCoefficient)) throw new Error('dragCoefficient is not a finite number');\n\n  return {\n    update: function(body) {\n      ${pattern('body.force.{var} -= options.dragCoefficient * body.velocity.{var};', {indent: 6})}\n    }\n  };\n`\n  return code;\n}\n"]},"metadata":{},"sourceType":"script"}