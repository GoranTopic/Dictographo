{"ast":null,"code":"import _toConsumableArray from\"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from'react';import{Alert}from'react-bootstrap';import'bootstrap/dist/css/bootstrap.min.css';/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */function AlertContainer(_ref){var state=_ref.state,dispatchState=_ref.dispatchState;/* functions that return an error mesage depending onthe state */if(state.isError){return/*#__PURE__*/React.createElement(Alert,{variant:\"danger\",dismissible:true,onClose:function onClose(){return dispatchState({type:'DISSMISS_ERROR'});}},/*#__PURE__*/React.createElement(Alert.Heading,null,\"Oh Snap!\"),state.isWordNotFound?/*#__PURE__*/ //if the there is not words found\nReact.createElement(\"p\",null,\"Looks like \",/*#__PURE__*/React.createElement(\"b\",null,_toConsumableArray(state.wordsNotFound).map(function(word){return/*#__PURE__*/React.createElement(\"i\",null,word,\", \");})),\"in no our dictionary yet.\"):/*#__PURE__*/React.createElement(React.Fragment,null),state.isPathNotFound?/*#__PURE__*/ //if there is a path not found\nReact.createElement(\"p\",null,\"looks like there is no path between:\",_toConsumableArray(state.pathsNotFound).map(function(path){return/*#__PURE__*/React.createElement(\"i\",null,/*#__PURE__*/React.createElement(\"b\",null,\" \",path.first),\" and \",/*#__PURE__*/React.createElement(\"b\",null,path.last,\",\"));})):/*#__PURE__*/React.createElement(React.Fragment,null),state.isFetchFailed?/*#__PURE__*/ //There is a problem with the network\nReact.createElement(\"p\",null,\"Could not connect to server.\"):/*#__PURE__*/React.createElement(React.Fragment,null),/*#__PURE__*/React.createElement(\"p\",null,state.errorMsg));}else{return/*#__PURE__*/React.createElement(React.Fragment,null);}}export default AlertContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Alert.js"],"names":["React","Alert","AlertContainer","state","dispatchState","isError","type","isWordNotFound","wordsNotFound","map","word","isPathNotFound","pathsNotFound","path","first","last","isFetchFailed","errorMsg"],"mappings":"+JAAA,MAAOA,CAAAA,KAAP,KAAmB,OAAnB,CACA,OAASC,KAAT,KAAsB,iBAAtB,CACA,MAAO,sCAAP,CAEA;;;;;GAOA,QAASC,CAAAA,cAAT,MAAgD,IAAvBC,CAAAA,KAAuB,MAAvBA,KAAuB,CAAhBC,aAAgB,MAAhBA,aAAgB,CAC9C,iEACA,GAAID,KAAK,CAACE,OAAV,CAAmB,CACjB,mBACE,oBAAC,KAAD,EAAO,OAAO,CAAC,QAAf,CAAwB,WAAW,KAAnC,CACE,OAAO,CAAE,yBAAMD,CAAAA,aAAa,CAAC,CAACE,IAAI,CAAE,gBAAP,CAAD,CAAnB,EADX,eAEE,oBAAC,KAAD,CAAO,OAAP,iBAFF,CAGGH,KAAK,CAACI,cAAN,eAAsB;AACvB,wDAAc,6BACV,mBAAIJ,KAAK,CAACK,aAAV,EAAyBC,GAAzB,CAA6B,SAAAC,IAAI,qBAAI,6BAAIA,IAAJ,MAAJ,EAAjC,CADU,CAAd,6BADC,cAGmC,wCANtC,CAOGP,KAAK,CAACQ,cAAN,eAAsB;AACvB,oEACG,mBAAIR,KAAK,CAACS,aAAV,EAAyBH,GAAzB,CACC,SAAAI,IAAI,qBAAI,0CAAG,iCAAKA,IAAI,CAACC,KAAV,CAAH,sBAA4B,6BAAID,IAAI,CAACE,IAAT,KAA5B,CAAJ,EADL,CADH,CADC,cAIM,wCAXT,CAYGZ,KAAK,CAACa,aAAN,eAAqB;AACtB,4DADC,cACqC,wCAbxC,cAcE,6BAAIb,KAAK,CAACc,QAAV,CAdF,CADF,CAiBD,CAlBD,IAkBK,CACH,mBAAO,wCAAP,CACD,CACF,CAED,cAAef,CAAAA,cAAf","sourcesContent":["import React  from 'react';\nimport { Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({state, dispatchState}) {\n\t\t/* functions that return an error mesage depending onthe state */\n\t\tif (state.isError) {\n\t\t\t\treturn(\n\t\t\t\t\t\t<Alert variant=\"danger\" dismissible \n\t\t\t\t\t\t\t\tonClose={() => dispatchState({type: 'DISSMISS_ERROR'})} >\n\t\t\t\t\t\t\t\t<Alert.Heading>Oh Snap!</Alert.Heading>\n\t\t\t\t\t\t\t\t{state.isWordNotFound? //if the there is not words found\n\t\t\t\t\t\t\t\t<p>Looks like <b>\n\t\t\t\t\t\t\t\t\t\t{ [...state.wordsNotFound].map(word => <i>{word}, </i> ) }\n\t\t\t\t\t\t\t\t</b>in no our dictionary yet.</p> : <></>}\n\t\t\t\t\t\t\t\t{state.isPathNotFound? //if there is a path not found\n\t\t\t\t\t\t\t\t<p>looks like there is no path between: \n\t\t\t\t\t\t\t\t\t\t{[...state.pathsNotFound].map(\n\t\t\t\t\t\t\t\t\t\t\t\tpath => <i><b> {path.first}</b> and <b>{path.last},</b></i> )}\n\t\t\t\t\t\t\t\t</p> : <></> }\n\t\t\t\t\t\t\t\t{state.isFetchFailed? //There is a problem with the network\n\t\t\t\t\t\t\t\t<p>Could not connect to server.</p> : <></> }\n\t\t\t\t\t\t\t\t<p>{state.errorMsg}</p>\n\t\t\t\t\t\t</Alert>)\n\t\t}else{\n\t\t\t\treturn <></>\n\t\t}\n}\n\nexport default AlertContainer;\n\n"]},"metadata":{},"sourceType":"module"}