{"ast":null,"code":"import { utils } from \"./utils.js\";\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\n\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return \"[\" + this.curves.map(function (curve) {\n      return utils.pointsToString(curve.points);\n    }).join(\", \") + \"]\";\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves.map(function (v) {\n      return v.length();\n    }).reduce(function (a, b) {\n      return a + b;\n    });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n\n}\n\nexport { PolyBezier };","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/bezier-js/lib/poly-bezier.js"],"names":["utils","PolyBezier","constructor","curves","_3d","valueOf","toString","map","curve","pointsToString","points","join","addCurve","push","length","v","reduce","a","b","idx","bbox","c","i","expandbox","offset","d","forEach"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AAEA;;;;;AAIA,MAAMC,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKA,MAAL,GAAc,EAAd;AACA,SAAKC,GAAL,GAAW,KAAX;;AACA,QAAI,CAAC,CAACD,MAAN,EAAc;AACZ,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKC,GAAL,GAAW,KAAKD,MAAL,CAAY,CAAZ,EAAeC,GAA1B;AACD;AACF;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKC,QAAL,EAAP;AACD;;AAEDA,EAAAA,QAAQ,GAAG;AACT,WACE,MACA,KAAKH,MAAL,CACGI,GADH,CACO,UAAUC,KAAV,EAAiB;AACpB,aAAOR,KAAK,CAACS,cAAN,CAAqBD,KAAK,CAACE,MAA3B,CAAP;AACD,KAHH,EAIGC,IAJH,CAIQ,IAJR,CADA,GAMA,GAPF;AASD;;AAEDC,EAAAA,QAAQ,CAACJ,KAAD,EAAQ;AACd,SAAKL,MAAL,CAAYU,IAAZ,CAAiBL,KAAjB;AACA,SAAKJ,GAAL,GAAW,KAAKA,GAAL,IAAYI,KAAK,CAACJ,GAA7B;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKX,MAAL,CACJI,GADI,CACA,UAAUQ,CAAV,EAAa;AAChB,aAAOA,CAAC,CAACD,MAAF,EAAP;AACD,KAHI,EAIJE,MAJI,CAIG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACtB,aAAOD,CAAC,GAAGC,CAAX;AACD,KANI,CAAP;AAOD;;AAEDV,EAAAA,KAAK,CAACW,GAAD,EAAM;AACT,WAAO,KAAKhB,MAAL,CAAYgB,GAAZ,CAAP;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,UAAMC,CAAC,GAAG,KAAKlB,MAAf;AACA,QAAIiB,IAAI,GAAGC,CAAC,CAAC,CAAD,CAAD,CAAKD,IAAL,EAAX;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAAC,CAACP,MAAtB,EAA8BQ,CAAC,EAA/B,EAAmC;AACjCtB,MAAAA,KAAK,CAACuB,SAAN,CAAgBH,IAAhB,EAAsBC,CAAC,CAACC,CAAD,CAAD,CAAKF,IAAL,EAAtB;AACD;;AACD,WAAOA,IAAP;AACD;;AAEDI,EAAAA,MAAM,CAACC,CAAD,EAAI;AACR,UAAMD,MAAM,GAAG,EAAf;AACA,SAAKrB,MAAL,CAAYuB,OAAZ,CAAoB,UAAUX,CAAV,EAAa;AAC/BS,MAAAA,MAAM,CAACX,IAAP,CAAY,GAAGE,CAAC,CAACS,MAAF,CAASC,CAAT,CAAf;AACD,KAFD;AAGA,WAAO,IAAIxB,UAAJ,CAAeuB,MAAf,CAAP;AACD;;AA5Dc;;AA+DjB,SAASvB,UAAT","sourcesContent":["import { utils } from \"./utils.js\";\n\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return (\n      \"[\" +\n      this.curves\n        .map(function (curve) {\n          return utils.pointsToString(curve.points);\n        })\n        .join(\", \") +\n      \"]\"\n    );\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves\n      .map(function (v) {\n        return v.length();\n      })\n      .reduce(function (a, b) {\n        return a + b;\n      });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n}\n\nexport { PolyBezier };\n"]},"metadata":{},"sourceType":"module"}