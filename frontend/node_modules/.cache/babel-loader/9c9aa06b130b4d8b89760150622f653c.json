{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Graph/Graph.js\";\nimport React, { useCallback } from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { graphConfig } from \"../../myConfig\"; //import d3Switcher from \"./d3Switcher\";\n\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport _ from \"lodash\"; //import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({\n  state,\n  dispatchState\n}) {\n  const stateCopy = state => {\n    //console.log(\"normal state\")\n    //console.log(state)\n    let d3State = _.cloneDeep(state);\n\n    return d3State;\n  };\n\n  const handleClickD3 = useCallback(nodeId => {\n    //  handle click of node\n    console.log(\"passed nodeId: \");\n    console.log(nodeId);\n    nodeId instanceof String ? onClickNode(nodeId, state, dispatchState) : onClickNode(nodeId.id, state, dispatchState);\n  }, [state, dispatchState]);\n  const handleClickForce = useCallback(nodeId => {\n    //  handle click of node\n    console.log(\"passed nodeId: \");\n    console.log(nodeId);\n    onClickNode(nodeId.id, state, dispatchState);\n  }, [state, dispatchState]);\n\n  const chosenGraph = type => {\n    switch (type) {\n      case 'd3':\n        console.log(\"checking the state\");\n        console.log(state); //console.log({...state, links:[]})\n\n        console.log(\"d3 data:\");\n        console.log(state.d3Data);\n        return /*#__PURE__*/React.createElement(Graph, {\n          id: \"graph-id\" // id is mandatory, \n          // if no id is defined rd3g will throw an error\n          ,\n          data: state.d3Data,\n          onClickNode: handleClick,\n          config: graphConfig,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 16\n          }\n        });\n\n      case '2D':\n        console.log(\"checking the state\");\n        console.log(state);\n        console.log(\"2D data:\");\n        console.log(state.forceData);\n        return /*#__PURE__*/React.createElement(ForceGraph2D, {\n          graphData: state.forceData,\n          enableNodeDrag: true,\n          onNodeClick: handleClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 16\n          }\n        });\n\n      case '3D':\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(ForceGraph3D, {\n          enableNodeDrag: true,\n          onNodeClick: handleClick,\n          graphData: state.forceData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(Graph, {\n          id: \"graph-id\" // id is mandatory, \n          // if no id is defined rd3g will throw an error\n          ,\n          data: state,\n          config: graphConfig,\n          onClickNode: handleClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 16\n          }\n        });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundImage: 'url(./grid.png)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 10\n    }\n  }, chosenGraph(state.graphType));\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Graph/Graph.js"],"names":["React","useCallback","Graph","onClickNode","graphConfig","ForceGraph2D","ForceGraph3D","_","GraphContainer","state","dispatchState","stateCopy","d3State","cloneDeep","handleClickD3","nodeId","console","log","String","id","handleClickForce","chosenGraph","type","d3Data","handleClick","forceData","backgroundImage","graphType"],"mappings":"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","sourcesContent":["import React, { useCallback }  from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { graphConfig }  from \"../../myConfig\";\n//import d3Switcher from \"./d3Switcher\";\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport _ from \"lodash\";\n//import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({state, dispatchState}){\n\n\t\tconst stateCopy = (state) => {\n\t\t\t\t//console.log(\"normal state\")\n\t\t\t\t//console.log(state)\n\t\t\t\tlet d3State = _.cloneDeep(state);\n\t\t\t\treturn d3State;\n\t\t}\n\n\t\tconst handleClickD3 = useCallback((nodeId) => {  //  handle click of node\n\t\t\t\tconsole.log(\"passed nodeId: \");\n\t\t\t\tconsole.log(nodeId);\n\t\t\t\t(nodeId instanceof String)? \n\t\t\t\tonClickNode(nodeId, state, dispatchState)\n\t\t\t\t: onClickNode(nodeId.id, state, dispatchState)\n\t\t}, [state, dispatchState]);\n\n\t\t\tconst handleClickForce = useCallback((nodeId) => {  //  handle click of node\n\t\t\t\tconsole.log(\"passed nodeId: \");\n\t\t\t\tconsole.log(nodeId);\n\t\t\t\tonClickNode(nodeId.id, state, dispatchState)\n\t\t}, [state, dispatchState]);\n\t\t\n\t\t\n\n\t\tconst chosenGraph = (type) =>{ \n\t\t\t\tswitch(type) {\n\t\t\t\t\t\tcase 'd3':\n\t\t\t\t\t\t\t\tconsole.log(\"checking the state\")\n\t\t\t\t\t\t\t\tconsole.log(state)\n\t\t\t\t\t\t\t\t//console.log({...state, links:[]})\n\t\t\t\t\t\t\t\tconsole.log(\"d3 data:\")\n\t\t\t\t\t\t\t\tconsole.log(state.d3Data)\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state.d3Data}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tcase '2D':\n\t\t\t\t\t\t\t\tconsole.log(\"checking the state\")\n\t\t\t\t\t\t\t\tconsole.log(state)\n\t\t\t\t\t\t\t\tconsole.log(\"2D data:\")\n\t\t\t\t\t\t\t\tconsole.log(state.forceData)\n\t\t\t\t\t\t\t\treturn <ForceGraph2D\n\t\t\t\t\t\t\t\t\t\tgraphData={state.forceData}\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tcase '3D':\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <ForceGraph3D\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tgraphData={state.forceData}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t} \n\t\t}\n\n\n\t\treturn <div style={{backgroundImage: 'url(./grid.png)'}} >\n\t\t\t\t{chosenGraph(state.graphType)}\n\t\t</div>\n\t\t\n}\n\nexport default GraphContainer;\n"]},"metadata":{},"sourceType":"module"}