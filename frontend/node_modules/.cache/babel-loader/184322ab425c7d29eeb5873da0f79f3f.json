{"ast":null,"code":"import _slicedToArray from\"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{API_ENDPOINT}from\"../../myConfig\";import useKeypress from'../../hooks/useKeypress';import'./SearchSuggestion.css';import{queryNewWord,queryPath}from'../../node_functions';/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */var query_search='querysearch/';//add this to myconfig\nfunction SuggestionsContainer(props){/* tahek a child fro a input an add suggestions to it */ // handle the change by seting the state variable to \nvar state=props.state;var dispatchState=props.dispatchState;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),suggestions=_useState2[0],setSuggestions=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),selected=_useState4[0],setSelected=_useState4[1];useKeypress('ArrowDown',function(){return selected<0?setSelected(suggestions.length-1):setSelected(selected+1);});useKeypress('ArrowUp',function(){return selected>suggestions.length-1?setSelected(0):setSelected(selected-1);});var getmultipleWords=function getmultipleWords(string){/* determines qhereteher a string \n\t\t\t\t * is compossed of multiple words */ //remove multiple spaces\n//trim, remove multiple and seperate by spaces\nreturn string.replace(/  +/g,' ').trim().split(' ');};useKeypress('Enter',function(){if(isWrittingWord()){if(suggestions.length>0){addToSearchTerm(suggestions[selected].word);}}else{var words=getmultipleWords(state.searchTerm.toLowerCase());// set all serches to lowercase\nif(words.length>1){//if it has more that two words\nqueryPath(words,state,dispatchState);}else{// if there is only one word\nqueryNewWord(words[0],state,dispatchState);}}});var isWrittingWord=function isWrittingWord(){/* uses the state to see if\n\t\t\t\t\t\t* the user is in the middle of writting a word */var len=state.searchTerm.length;var last=state.searchTerm[state.searchTerm.length-1];if(len===0){return false;}else if(last===\" \"){return false;}else return true;};var filterSuggestions=function filterSuggestions(suggestions){return(/* filter out all words which have spaces */suggestions.filter(function(suggestion){return /\\s/.test(suggestion);}));};var addToSearchTerm=function addToSearchTerm(word){/* append a given word to the seate searchTerm */var wordList=state.searchTerm.split(\" \");var len=wordList.length;wordList[len-1]=word;// set the last word as clicke word\ndispatchState({type:'SET_SEARCH_TERM',payload:wordList.join(\" \")+\" \"});setSuggestions([]);// reset suggestions\nsetSelected(0);// reset selected\n};var _onClick=function onClick(word){return addToSearchTerm(word);};useEffect(function(){/* query server for search suggestionsa\n\t\t\t\t * and sets the  */var wordList=state.searchTerm.split(\" \");//split the search into words\nvar len=wordList.length;//get the length\nvar last=wordList[len-1];//fetch the last element \nfetch(API_ENDPOINT+query_search+last).then(function(result){return result.json();})//unpack suggestions\n.then(function(result){console.log(result);return result;})//unpack suggestions\n.then(function(suggestions){return filterSuggestions(suggestions);}).then(function(suggestions){return setSuggestions(suggestions);}).catch(function(err){return console.log(err);});},[state.searchTerm,dispatchState]);var SuggestionList=function SuggestionList(){return/*#__PURE__*/React.createElement(\"ul\",{class:\"suggestions\"},suggestions.map(function(suggestion,index){return/*#__PURE__*/React.createElement(\"li\",{key:index,className:index===selected?\"selected\":null,onClick:function onClick(){return _onClick(suggestion.word);}},suggestion.word);}));};return/*#__PURE__*/React.createElement(\"div\",{className:\"input\"},props.children,isWrittingWord()?/*#__PURE__*/React.createElement(SuggestionList,null):/*#__PURE__*/React.createElement(React.Fragment,null));}export default SuggestionsContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js"],"names":["React","useState","useEffect","API_ENDPOINT","useKeypress","queryNewWord","queryPath","query_search","SuggestionsContainer","props","state","dispatchState","suggestions","setSuggestions","selected","setSelected","length","getmultipleWords","string","replace","trim","split","isWrittingWord","addToSearchTerm","word","words","searchTerm","toLowerCase","len","last","filterSuggestions","filter","suggestion","test","wordList","type","payload","join","onClick","fetch","then","result","json","console","log","catch","err","SuggestionList","map","index","children"],"mappings":"uJAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,YAAT,KAA8B,gBAA9B,CACA,MAAOC,CAAAA,WAAP,KAAwB,yBAAxB,CACA,MAAO,wBAAP,CACA,OAASC,YAAT,CAAuBC,SAAvB,KAAwC,sBAAxC,CAEA;;;;;GAOA,GAAIC,CAAAA,YAAY,CAAG,cAAnB,CAAkC;AAElC,QAASC,CAAAA,oBAAT,CAA8BC,KAA9B,CAAoC,CAClC,wDADkC,CAElC;AACA,GAAIC,CAAAA,KAAK,CAAGD,KAAK,CAACC,KAAlB,CACA,GAAIC,CAAAA,aAAa,CAAGF,KAAK,CAACE,aAA1B,CAJkC,cAKIV,QAAQ,CAAC,EAAD,CALZ,wCAK3BW,WAL2B,eAKdC,cALc,8BAMFZ,QAAQ,CAAC,CAAD,CANN,yCAM3Ba,QAN2B,eAMjBC,WANiB,eASlCX,WAAW,CAAC,WAAD,CAAc,iBACtBU,CAAAA,QAAQ,CAAG,CAAZ,CACAC,WAAW,CAACH,WAAW,CAACI,MAAZ,CAAmB,CAApB,CADX,CAEED,WAAW,CAACD,QAAQ,CAAG,CAAZ,CAHU,EAAd,CAAX,CAMAV,WAAW,CAAC,SAAD,CAAY,iBACpBU,CAAAA,QAAQ,CAAGF,WAAW,CAACI,MAAZ,CAAmB,CAA/B,CACAD,WAAW,CAAC,CAAD,CADX,CAECA,WAAW,CAACD,QAAQ,CAAG,CAAZ,CAHS,EAAZ,CAAX,CAOA,GAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,MAAD,CAAY,CACnC;wCADmC,CAGnC;AACA;AACA,MAAOA,CAAAA,MAAM,CAACC,OAAP,CAAe,MAAf,CAAuB,GAAvB,EAA4BC,IAA5B,GAAmCC,KAAnC,CAAyC,GAAzC,CAAP,CACD,CAND,CAQAjB,WAAW,CAAC,OAAD,CAAU,UAAM,CACzB,GAAGkB,cAAc,EAAjB,CAAoB,CAClB,GAAGV,WAAW,CAACI,MAAZ,CAAqB,CAAxB,CAA0B,CACxBO,eAAe,CAACX,WAAW,CAACE,QAAD,CAAX,CAAsBU,IAAvB,CAAf,CACD,CACF,CAJD,IAIK,CACH,GAAIC,CAAAA,KAAK,CAAGR,gBAAgB,CAACP,KAAK,CAACgB,UAAN,CAAiBC,WAAjB,EAAD,CAA5B,CACA;AACA,GAAGF,KAAK,CAACT,MAAN,CAAe,CAAlB,CAAoB,CAClB;AACAV,SAAS,CAACmB,KAAD,CAAQf,KAAR,CAAeC,aAAf,CAAT,CACD,CAHD,IAGK,CACH;AACAN,YAAY,CAACoB,KAAK,CAAC,CAAD,CAAN,CAAWf,KAAX,CAAkBC,aAAlB,CAAZ,CACD,CACF,CACF,CAhBU,CAAX,CAkBA,GAAMW,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAK,CAC1B;uDAEA,GAAIM,CAAAA,GAAG,CAAGlB,KAAK,CAACgB,UAAN,CAAiBV,MAA3B,CACA,GAAIa,CAAAA,IAAI,CAAGnB,KAAK,CAACgB,UAAN,CAAiBhB,KAAK,CAACgB,UAAN,CAAiBV,MAAjB,CAAwB,CAAzC,CAAX,CACA,GAAGY,GAAG,GAAK,CAAX,CAAa,CAAE,MAAO,MAAP,CACd,CADD,IACM,IAAIC,IAAI,GAAK,GAAb,CAAiB,CAAE,MAAO,MAAP,CACxB,CADK,IACA,OAAO,KAAP,CACP,CARD,CAUA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAlB,WAAW,QACnC,6CACAA,WAAW,CAACmB,MAAZ,CAAoB,SAAAC,UAAU,QAAI,MAAKC,IAAL,CAAUD,UAAV,CAAJ,EAA9B,CAFmC,GAArC,CAKA,GAAMT,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,IAAD,CAAU,CAChC,iDACA,GAAIU,CAAAA,QAAQ,CAAGxB,KAAK,CAACgB,UAAN,CAAiBL,KAAjB,CAAuB,GAAvB,CAAf,CACA,GAAIO,CAAAA,GAAG,CAAGM,QAAQ,CAAClB,MAAnB,CACAkB,QAAQ,CAACN,GAAG,CAAC,CAAL,CAAR,CAAkBJ,IAAlB,CAAuB;AACvBb,aAAa,CAAC,CACZwB,IAAI,CAAE,iBADM,CAEZC,OAAO,CAAEF,QAAQ,CAACG,IAAT,CAAc,GAAd,EAAqB,GAFlB,CAAD,CAAb,CAIAxB,cAAc,CAAC,EAAD,CAAd,CAAoB;AACpBE,WAAW,CAAC,CAAD,CAAX,CAAgB;AACjB,CAXD,CAcA,GAAMuB,CAAAA,QAAO,CAAG,QAAVA,CAAAA,OAAU,CAACd,IAAD,QAAUD,CAAAA,eAAe,CAACC,IAAD,CAAzB,EAAhB,CAGAtB,SAAS,CAAC,UAAM,CACd;uBAEA,GAAIgC,CAAAA,QAAQ,CAAGxB,KAAK,CAACgB,UAAN,CAAiBL,KAAjB,CAAuB,GAAvB,CAAf,CACA;AACA,GAAIO,CAAAA,GAAG,CAAGM,QAAQ,CAAClB,MAAnB,CACA;AACA,GAAIa,CAAAA,IAAI,CAAGK,QAAQ,CAACN,GAAG,CAAC,CAAL,CAAnB,CACA;AACAW,KAAK,CAACpC,YAAY,CAAGI,YAAf,CAA8BsB,IAA/B,CAAL,CACGW,IADH,CACQ,SAAAC,MAAM,QAAIA,CAAAA,MAAM,CAACC,IAAP,EAAJ,EADd,CACiC;AADjC,CAEGF,IAFH,CAEQ,SAAAC,MAAM,CAAI,CAACE,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAAqB,MAAOA,CAAAA,MAAP,CAAc,CAFtD,CAEwD;AAFxD,CAGGD,IAHH,CAGQ,SAAA5B,WAAW,QAAIkB,CAAAA,iBAAiB,CAAClB,WAAD,CAArB,EAHnB,EAIG4B,IAJH,CAIQ,SAAA5B,WAAW,QAAIC,CAAAA,cAAc,CAACD,WAAD,CAAlB,EAJnB,EAKGiC,KALH,CAKS,SAACC,GAAD,QAASH,CAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAT,EALT,EAMD,CAfQ,CAeN,CAACpC,KAAK,CAACgB,UAAP,CAAmBf,aAAnB,CAfM,CAAT,CAkBA,GAAMoC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,sBACrB,0BAAI,KAAK,CAAC,aAAV,EACInC,WAAW,CAACoC,GAAZ,CACA,SAAChB,UAAD,CAAaiB,KAAb,CAAuB,CACrB,mBAAQ,0BACN,GAAG,CAAEA,KADC,CAEN,SAAS,CAAEA,KAAK,GAAKnC,QAAV,CAAoB,UAApB,CAAgC,IAFrC,CAGN,OAAO,CAAE,yBAAMwB,CAAAA,QAAO,CAACN,UAAU,CAACR,IAAZ,CAAb,EAHH,EAILQ,UAAU,CAACR,IAJN,CAAR,CAMD,CARD,CADJ,CADqB,EAAvB,CAcI,mBAAO,2BAAK,SAAS,CAAC,OAAf,EACJf,KAAK,CAACyC,QADF,CAEJ5B,cAAc,gBAAI,oBAAC,cAAD,MAAJ,cAAuB,wCAFjC,CAAP,CAIL,CAED,cAAed,CAAAA,oBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT }  from \"../../myConfig\";\nimport useKeypress from '../../hooks/useKeypress';\nimport './SearchSuggestion.css'; \nimport { queryNewWord, queryPath } from '../../node_functions';\n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/' //add this to myconfig\n\nfunction SuggestionsContainer(props){\n\t\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t\tconst [suggestions, setSuggestions] = useState([])\t\n\t\tconst [selected, setSelected] = useState(0)\t\n\t\t\n\n\t\tuseKeypress('ArrowDown', () =>\n\t\t\t\t(selected < 0)?\n\t\t\t\tsetSelected(suggestions.length-1)\n\t\t\t\t: setSelected(selected + 1)\n\t\t);\n\n\t\tuseKeypress('ArrowUp', () => \n\t\t\t\t(selected > suggestions.length-1)?\n\t\t\t\tsetSelected(0)\n\t\t\t\t:setSelected(selected - 1)\n\t\t);\n\n\n\t\tconst getmultipleWords = (string) => {\n\t\t\t\t/* determines qhereteher a string \n\t\t\t\t * is compossed of multiple words */\n\t\t\t\t//remove multiple spaces\n\t\t\t\t//trim, remove multiple and seperate by spaces\n\t\t\t\treturn string.replace(/  +/g, ' ').trim().split(' ') \n\t\t}\n\n\t\tuseKeypress('Enter', () => {\n\t\t\t\tif(isWrittingWord()){\n\t\t\t\t\t\tif(suggestions.length > 0){\n\t\t\t\t\t\t\t\taddToSearchTerm(suggestions[selected].word);\n\t\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t\tlet words = getmultipleWords(state.searchTerm.toLowerCase());\n\t\t\t\t\t\t// set all serches to lowercase\n\t\t\t\t\t\tif(words.length > 1){\n\t\t\t\t\t\t\t\t//if it has more that two words\n\t\t\t\t\t\t\t\tqueryPath(words, state, dispatchState);\n\t\t\t\t\t\t}else{ \n\t\t\t\t\t\t\t\t// if there is only one word\n\t\t\t\t\t\t\t\tqueryNewWord(words[0], state, dispatchState);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t})\n\n\t\tconst isWrittingWord = () =>{\n\t\t\t\t/* uses the state to see if\n\t\t\t\t\t\t* the user is in the middle of writting a word */\n\t\t\t\tlet len = state.searchTerm.length;\n\t\t\t\tlet last = state.searchTerm[state.searchTerm.length-1];\n\t\t\t\tif(len === 0){ return false;\n\t\t\t\t}else if (last === \" \"){ return false;\n\t\t\t\t}else return true; \n\t\t}\n\n\t\tconst filterSuggestions = suggestions => \n\t\t\t\t/* filter out all words which have spaces */\n\t\t\t\tsuggestions.filter( suggestion => /\\s/.test(suggestion))\n\n\t\t\n\t\tconst addToSearchTerm = (word) => {\n\t\t\t\t/* append a given word to the seate searchTerm */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\tlet len = wordList.length \n\t\t\t\twordList[len-1] = word // set the last word as clicke word\n\t\t\t\tdispatchState({ \n\t\t\t\t\t\ttype: 'SET_SEARCH_TERM',\n\t\t\t\t\t\tpayload: wordList.join(\" \") + \" \",\n\t\t\t\t});\t\n\t\t\t\tsetSuggestions([]); // reset suggestions\n\t\t\t\tsetSelected(0); // reset selected\n\t\t}\n\n\n\t\tconst onClick = (word) => addToSearchTerm(word);\n\t\t\n\n\t\tuseEffect(() => {\n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\t//split the search into words\n\t\t\t\tlet len = wordList.length;\n\t\t\t\t//get the length\n\t\t\t\tlet last = wordList[len-1]\n\t\t\t\t//fetch the last element \n\t\t\t\tfetch(API_ENDPOINT + query_search + last)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(result => {console.log(result); return result}) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => filterSuggestions(suggestions))\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch((err) => console.log(err));\n\t\t}, [state.searchTerm, dispatchState])\n\n\n\t\tconst SuggestionList = () =>\n\t\t\t\t<ul class=\"suggestions\">\n\t\t\t\t\t\t{ suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => {  \n\t\t\t\t\t\t\t\t\t\treturn  <li \n\t\t\t\t\t\t\t\t\t\t\t\tkey={index} \n\t\t\t\t\t\t\t\t\t\t\t\tclassName={index === selected? \"selected\": null}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onClick(suggestion.word)}>\n\t\t\t\t\t\t\t\t\t\t\t\t{suggestion.word}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t</ul>\n\n\t\t\t\t\t\treturn <div className=\"input\">\n\t\t\t\t\t\t\t\t{props.children}\n\t\t\t\t\t\t\t\t{isWrittingWord()? <SuggestionList/>: <></> }\n\t\t\t\t\t\t</div>\n}\n\nexport default SuggestionsContainer;\n"]},"metadata":{},"sourceType":"module"}