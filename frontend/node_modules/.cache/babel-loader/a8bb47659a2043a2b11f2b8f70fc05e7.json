{"ast":null,"code":"/**\n * Manages a simulation of physical forces acting on bodies and springs.\n */\nmodule.exports = createPhysicsSimulator;\n\nvar generateCreateBodyFunction = require('./codeGenerators/generateCreateBody');\n\nvar generateQuadTreeFunction = require('./codeGenerators/generateQuadTree');\n\nvar generateBoundsFunction = require('./codeGenerators/generateBounds');\n\nvar generateCreateDragForceFunction = require('./codeGenerators/generateCreateDragForce');\n\nvar generateCreateSpringForceFunction = require('./codeGenerators/generateCreateSpringForce');\n\nvar generateIntegratorFunction = require('./codeGenerators/generateIntegrator');\n\nvar dimensionalCache = {};\n\nfunction createPhysicsSimulator(settings) {\n  var Spring = require('./spring');\n\n  var merge = require('ngraph.merge');\n\n  var eventify = require('ngraph.events');\n\n  if (settings) {\n    // Check for names from older versions of the layout\n    if (settings.springCoeff !== undefined) throw new Error('springCoeff was renamed to springCoefficient');\n    if (settings.dragCoeff !== undefined) throw new Error('dragCoeff was renamed to dragCoefficient');\n  }\n\n  settings = merge(settings, {\n    /**\n     * Ideal length for links (springs in physical model).\n     */\n    springLength: 10,\n\n    /**\n     * Hook's law coefficient. 1 - solid spring.\n     */\n    springCoefficient: 0.8,\n\n    /**\n     * Coulomb's law coefficient. It's used to repel nodes thus should be negative\n     * if you make it positive nodes start attract each other :).\n     */\n    gravity: -12,\n\n    /**\n     * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\n     * The closer it's to 1 the more nodes algorithm will have to go through.\n     * Setting it to one makes Barnes Hut simulation no different from\n     * brute-force forces calculation (each node is considered).\n     */\n    theta: 0.8,\n\n    /**\n     * Drag force coefficient. Used to slow down system, thus should be less than 1.\n     * The closer it is to 0 the less tight system will be.\n     */\n    dragCoefficient: 0.9,\n    // TODO: Need to rename this to something better. E.g. `dragCoefficient`\n\n    /**\n     * Default time step (dt) for forces integration\n     */\n    timeStep: 0.5,\n\n    /**\n     * Adaptive time step uses average spring length to compute actual time step:\n     * See: https://twitter.com/anvaka/status/1293067160755957760\n     */\n    adaptiveTimeStepWeight: 0,\n\n    /**\n     * This parameter defines number of dimensions of the space where simulation\n     * is performed. \n     */\n    dimensions: 2,\n\n    /**\n     * In debug mode more checks are performed, this will help you catch errors\n     * quickly, however for production build it is recommended to turn off this flag\n     * to speed up computation.\n     */\n    debug: false\n  });\n  var factory = dimensionalCache[settings.dimensions];\n\n  if (!factory) {\n    var dimensions = settings.dimensions;\n    factory = {\n      Body: generateCreateBodyFunction(dimensions, settings.debug),\n      createQuadTree: generateQuadTreeFunction(dimensions),\n      createBounds: generateBoundsFunction(dimensions),\n      createDragForce: generateCreateDragForceFunction(dimensions),\n      createSpringForce: generateCreateSpringForceFunction(dimensions),\n      integrate: generateIntegratorFunction(dimensions)\n    };\n    dimensionalCache[dimensions] = factory;\n  }\n\n  var Body = factory.Body;\n  var createQuadTree = factory.createQuadTree;\n  var createBounds = factory.createBounds;\n  var createDragForce = factory.createDragForce;\n  var createSpringForce = factory.createSpringForce;\n  var integrate = factory.integrate;\n\n  var createBody = function createBody(pos) {\n    return new Body(pos);\n  };\n\n  var random = require('ngraph.random').random(42);\n\n  var bodies = []; // Bodies in this simulation.\n\n  var springs = []; // Springs in this simulation.\n\n  var quadTree = createQuadTree(settings, random);\n  var bounds = createBounds(bodies, settings, random);\n  var springForce = createSpringForce(settings, random);\n  var dragForce = createDragForce(settings);\n  var totalMovement = 0; // how much movement we made on last step\n\n  var forces = [];\n  var forceMap = new Map();\n  var iterationNumber = 0;\n  addForce('nbody', nbodyForce);\n  addForce('spring', updateSpringForce);\n  var publicApi = {\n    /**\n     * Array of bodies, registered with current simulator\n     *\n     * Note: To add new body, use addBody() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    bodies: bodies,\n    quadTree: quadTree,\n\n    /**\n     * Array of springs, registered with current simulator\n     *\n     * Note: To add new spring, use addSpring() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    springs: springs,\n\n    /**\n     * Returns settings with which current simulator was initialized\n     */\n    settings: settings,\n\n    /**\n     * Adds a new force to simulation\n     */\n    addForce: addForce,\n\n    /**\n     * Removes a force from the simulation.\n     */\n    removeForce: removeForce,\n\n    /**\n     * Returns a map of all registered forces.\n     */\n    getForces: getForces,\n\n    /**\n     * Performs one step of force simulation.\n     *\n     * @returns {boolean} true if system is considered stable; False otherwise.\n     */\n    step: function step() {\n      for (var i = 0; i < forces.length; ++i) {\n        forces[i](iterationNumber);\n      }\n\n      var movement = integrate(bodies, settings.timeStep, settings.adaptiveTimeStepWeight);\n      iterationNumber += 1;\n      return movement;\n    },\n\n    /**\n     * Adds body to the system\n     *\n     * @param {ngraph.physics.primitives.Body} body physical body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBody: function addBody(body) {\n      if (!body) {\n        throw new Error('Body is required');\n      }\n\n      bodies.push(body);\n      return body;\n    },\n\n    /**\n     * Adds body to the system at given position\n     *\n     * @param {Object} pos position of a body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBodyAt: function addBodyAt(pos) {\n      if (!pos) {\n        throw new Error('Body position is required');\n      }\n\n      var body = createBody(pos);\n      bodies.push(body);\n      return body;\n    },\n\n    /**\n     * Removes body from the system\n     *\n     * @param {ngraph.physics.primitives.Body} body to remove\n     *\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\n     */\n    removeBody: function removeBody(body) {\n      if (!body) {\n        return;\n      }\n\n      var idx = bodies.indexOf(body);\n\n      if (idx < 0) {\n        return;\n      }\n\n      bodies.splice(idx, 1);\n\n      if (bodies.length === 0) {\n        bounds.reset();\n      }\n\n      return true;\n    },\n\n    /**\n     * Adds a spring to this simulation.\n     *\n     * @returns {Object} - a handle for a spring. If you want to later remove\n     * spring pass it to removeSpring() method.\n     */\n    addSpring: function addSpring(body1, body2, springLength, springCoefficient) {\n      if (!body1 || !body2) {\n        throw new Error('Cannot add null spring to force simulator');\n      }\n\n      if (typeof springLength !== 'number') {\n        springLength = -1; // assume global configuration\n      }\n\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1);\n      springs.push(spring); // TODO: could mark simulator as dirty.\n\n      return spring;\n    },\n\n    /**\n     * Returns amount of movement performed on last step() call\n     */\n    getTotalMovement: function getTotalMovement() {\n      return totalMovement;\n    },\n\n    /**\n     * Removes spring from the system\n     *\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\n     *\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\n     */\n    removeSpring: function removeSpring(spring) {\n      if (!spring) {\n        return;\n      }\n\n      var idx = springs.indexOf(spring);\n\n      if (idx > -1) {\n        springs.splice(idx, 1);\n        return true;\n      }\n    },\n    getBestNewBodyPosition: function getBestNewBodyPosition(neighbors) {\n      return bounds.getBestNewPosition(neighbors);\n    },\n\n    /**\n     * Returns bounding box which covers all bodies\n     */\n    getBBox: getBoundingBox,\n    getBoundingBox: getBoundingBox,\n    invalidateBBox: function invalidateBBox() {\n      console.warn('invalidateBBox() is deprecated, bounds always recomputed on `getBBox()` call');\n    },\n    gravity: function gravity(value) {\n      if (value !== undefined) {\n        settings.gravity = value;\n        quadTree.options({\n          gravity: value\n        });\n        return this;\n      } else {\n        return settings.gravity;\n      }\n    },\n    theta: function theta(value) {\n      if (value !== undefined) {\n        settings.theta = value;\n        quadTree.options({\n          theta: value\n        });\n        return this;\n      } else {\n        return settings.theta;\n      }\n    }\n  }; // allow settings modification via public API:\n\n  expose(settings, publicApi);\n  eventify(publicApi);\n  return publicApi;\n\n  function getBoundingBox() {\n    bounds.update();\n    return bounds.box;\n  }\n\n  function addForce(forceName, forceFunction) {\n    if (forceMap.has(forceName)) throw new Error('Force ' + forceName + ' is already added');\n    forceMap.set(forceName, forceFunction);\n    forces.push(forceFunction);\n  }\n\n  function removeForce(forceName) {\n    var forceIndex = forces.indexOf(forceMap.get(forceName));\n    if (forceIndex < 0) return;\n    forces.splice(forceIndex, 1);\n  }\n\n  function getForces() {\n    // TODO: Should I trust them or clone the forces?\n    return forceMap;\n  }\n\n  function nbodyForce(iterationUmber) {\n    if (bodies.length === 0) return;\n    quadTree.insertBodies(bodies);\n    var i = bodies.length;\n\n    while (i--) {\n      var body = bodies[i];\n\n      if (!body.isPinned) {\n        body.reset();\n        quadTree.updateBodyForce(body);\n        dragForce.update(body);\n      }\n    }\n  }\n\n  function updateSpringForce() {\n    var i = springs.length;\n\n    while (i--) {\n      springForce.update(springs[i]);\n    }\n  }\n\n  function expose(settings, target) {\n    for (var key in settings) {\n      augment(settings, target, key);\n    }\n  }\n\n  function augment(source, target, key) {\n    if (!source.hasOwnProperty(key)) return;\n\n    if (typeof target[key] === 'function') {\n      // this accessor is already defined. Ignore it\n      return;\n    }\n\n    var sourceIsNumber = Number.isFinite(source[key]);\n\n    if (sourceIsNumber) {\n      target[key] = function (value) {\n        if (value !== undefined) {\n          if (!Number.isFinite(value)) throw new Error('Value of ' + key + ' should be a valid number.');\n          source[key] = value;\n          return target;\n        }\n\n        return source[key];\n      };\n    } else {\n      target[key] = function (value) {\n        if (value !== undefined) {\n          source[key] = value;\n          return target;\n        }\n\n        return source[key];\n      };\n    }\n  }\n}","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js"],"names":["module","exports","createPhysicsSimulator","generateCreateBodyFunction","require","generateQuadTreeFunction","generateBoundsFunction","generateCreateDragForceFunction","generateCreateSpringForceFunction","generateIntegratorFunction","dimensionalCache","settings","Spring","merge","eventify","springCoeff","undefined","Error","dragCoeff","springLength","springCoefficient","gravity","theta","dragCoefficient","timeStep","adaptiveTimeStepWeight","dimensions","debug","factory","Body","createQuadTree","createBounds","createDragForce","createSpringForce","integrate","createBody","pos","random","bodies","springs","quadTree","bounds","springForce","dragForce","totalMovement","forces","forceMap","Map","iterationNumber","addForce","nbodyForce","updateSpringForce","publicApi","removeForce","getForces","step","i","length","movement","addBody","body","push","addBodyAt","removeBody","idx","indexOf","splice","reset","addSpring","body1","body2","spring","getTotalMovement","removeSpring","getBestNewBodyPosition","neighbors","getBestNewPosition","getBBox","getBoundingBox","invalidateBBox","console","warn","value","options","expose","update","box","forceName","forceFunction","has","set","forceIndex","get","iterationUmber","insertBodies","isPinned","updateBodyForce","target","key","augment","source","hasOwnProperty","sourceIsNumber","Number","isFinite"],"mappings":"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","sourcesContent":["/**\n * Manages a simulation of physical forces acting on bodies and springs.\n */\nmodule.exports = createPhysicsSimulator;\n\nvar generateCreateBodyFunction = require('./codeGenerators/generateCreateBody');\nvar generateQuadTreeFunction = require('./codeGenerators/generateQuadTree');\nvar generateBoundsFunction = require('./codeGenerators/generateBounds');\nvar generateCreateDragForceFunction = require('./codeGenerators/generateCreateDragForce');\nvar generateCreateSpringForceFunction = require('./codeGenerators/generateCreateSpringForce');\nvar generateIntegratorFunction = require('./codeGenerators/generateIntegrator')\n\nvar dimensionalCache = {}\n\nfunction createPhysicsSimulator(settings) {\n  var Spring = require('./spring');\n  var merge = require('ngraph.merge');\n  var eventify = require('ngraph.events');\n  if (settings) {\n    // Check for names from older versions of the layout\n    if (settings.springCoeff !== undefined) throw new Error('springCoeff was renamed to springCoefficient');\n    if (settings.dragCoeff !== undefined) throw new Error('dragCoeff was renamed to dragCoefficient');\n  }\n\n  settings = merge(settings, {\n      /**\n       * Ideal length for links (springs in physical model).\n       */\n      springLength: 10,\n\n      /**\n       * Hook's law coefficient. 1 - solid spring.\n       */\n      springCoefficient: 0.8, \n\n      /**\n       * Coulomb's law coefficient. It's used to repel nodes thus should be negative\n       * if you make it positive nodes start attract each other :).\n       */\n      gravity: -12,\n\n      /**\n       * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\n       * The closer it's to 1 the more nodes algorithm will have to go through.\n       * Setting it to one makes Barnes Hut simulation no different from\n       * brute-force forces calculation (each node is considered).\n       */\n      theta: 0.8,\n\n      /**\n       * Drag force coefficient. Used to slow down system, thus should be less than 1.\n       * The closer it is to 0 the less tight system will be.\n       */\n      dragCoefficient: 0.9, // TODO: Need to rename this to something better. E.g. `dragCoefficient`\n\n      /**\n       * Default time step (dt) for forces integration\n       */\n      timeStep : 0.5,\n\n      /**\n       * Adaptive time step uses average spring length to compute actual time step:\n       * See: https://twitter.com/anvaka/status/1293067160755957760\n       */\n      adaptiveTimeStepWeight: 0,\n\n      /**\n       * This parameter defines number of dimensions of the space where simulation\n       * is performed. \n       */\n      dimensions: 2,\n\n      /**\n       * In debug mode more checks are performed, this will help you catch errors\n       * quickly, however for production build it is recommended to turn off this flag\n       * to speed up computation.\n       */\n      debug: false\n  });\n\n  var factory = dimensionalCache[settings.dimensions];\n  if (!factory) {\n    var dimensions = settings.dimensions;\n    factory = {\n      Body: generateCreateBodyFunction(dimensions, settings.debug),\n      createQuadTree: generateQuadTreeFunction(dimensions),\n      createBounds: generateBoundsFunction(dimensions),\n      createDragForce: generateCreateDragForceFunction(dimensions),\n      createSpringForce: generateCreateSpringForceFunction(dimensions),\n      integrate: generateIntegratorFunction(dimensions),\n    };\n    dimensionalCache[dimensions] = factory;\n  }\n\n  var Body = factory.Body;\n  var createQuadTree = factory.createQuadTree;\n  var createBounds = factory.createBounds;\n  var createDragForce = factory.createDragForce;\n  var createSpringForce = factory.createSpringForce;\n  var integrate = factory.integrate;\n  var createBody = pos => new Body(pos);\n\n  var random = require('ngraph.random').random(42);\n  var bodies = []; // Bodies in this simulation.\n  var springs = []; // Springs in this simulation.\n\n  var quadTree =  createQuadTree(settings, random);\n  var bounds = createBounds(bodies, settings, random);\n  var springForce = createSpringForce(settings, random);\n  var dragForce = createDragForce(settings);\n\n  var totalMovement = 0; // how much movement we made on last step\n  var forces = [];\n  var forceMap = new Map();\n  var iterationNumber = 0;\n \n  addForce('nbody', nbodyForce);\n  addForce('spring', updateSpringForce);\n\n  var publicApi = {\n    /**\n     * Array of bodies, registered with current simulator\n     *\n     * Note: To add new body, use addBody() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    bodies: bodies,\n\n    quadTree: quadTree,\n\n    /**\n     * Array of springs, registered with current simulator\n     *\n     * Note: To add new spring, use addSpring() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    springs: springs,\n\n    /**\n     * Returns settings with which current simulator was initialized\n     */\n    settings: settings,\n\n    /**\n     * Adds a new force to simulation\n     */\n    addForce: addForce,\n    \n    /**\n     * Removes a force from the simulation.\n     */\n    removeForce: removeForce,\n\n    /**\n     * Returns a map of all registered forces.\n     */\n    getForces: getForces,\n\n    /**\n     * Performs one step of force simulation.\n     *\n     * @returns {boolean} true if system is considered stable; False otherwise.\n     */\n    step: function () {\n      for (var i = 0; i < forces.length; ++i) {\n        forces[i](iterationNumber);\n      }\n      var movement = integrate(bodies, settings.timeStep, settings.adaptiveTimeStepWeight);\n      iterationNumber += 1;\n      return movement;\n    },\n\n    /**\n     * Adds body to the system\n     *\n     * @param {ngraph.physics.primitives.Body} body physical body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBody: function (body) {\n      if (!body) {\n        throw new Error('Body is required');\n      }\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Adds body to the system at given position\n     *\n     * @param {Object} pos position of a body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBodyAt: function (pos) {\n      if (!pos) {\n        throw new Error('Body position is required');\n      }\n      var body = createBody(pos);\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Removes body from the system\n     *\n     * @param {ngraph.physics.primitives.Body} body to remove\n     *\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\n     */\n    removeBody: function (body) {\n      if (!body) { return; }\n\n      var idx = bodies.indexOf(body);\n      if (idx < 0) { return; }\n\n      bodies.splice(idx, 1);\n      if (bodies.length === 0) {\n        bounds.reset();\n      }\n      return true;\n    },\n\n    /**\n     * Adds a spring to this simulation.\n     *\n     * @returns {Object} - a handle for a spring. If you want to later remove\n     * spring pass it to removeSpring() method.\n     */\n    addSpring: function (body1, body2, springLength, springCoefficient) {\n      if (!body1 || !body2) {\n        throw new Error('Cannot add null spring to force simulator');\n      }\n\n      if (typeof springLength !== 'number') {\n        springLength = -1; // assume global configuration\n      }\n\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1);\n      springs.push(spring);\n\n      // TODO: could mark simulator as dirty.\n      return spring;\n    },\n\n    /**\n     * Returns amount of movement performed on last step() call\n     */\n    getTotalMovement: function () {\n      return totalMovement;\n    },\n\n    /**\n     * Removes spring from the system\n     *\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\n     *\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\n     */\n    removeSpring: function (spring) {\n      if (!spring) { return; }\n      var idx = springs.indexOf(spring);\n      if (idx > -1) {\n        springs.splice(idx, 1);\n        return true;\n      }\n    },\n\n    getBestNewBodyPosition: function (neighbors) {\n      return bounds.getBestNewPosition(neighbors);\n    },\n\n    /**\n     * Returns bounding box which covers all bodies\n     */\n    getBBox: getBoundingBox, \n    getBoundingBox: getBoundingBox, \n\n    invalidateBBox: function () {\n      console.warn('invalidateBBox() is deprecated, bounds always recomputed on `getBBox()` call');\n    },\n\n    gravity: function (value) {\n      if (value !== undefined) {\n        settings.gravity = value;\n        quadTree.options({gravity: value});\n        return this;\n      } else {\n        return settings.gravity;\n      }\n    },\n\n    theta: function (value) {\n      if (value !== undefined) {\n        settings.theta = value;\n        quadTree.options({theta: value});\n        return this;\n      } else {\n        return settings.theta;\n      }\n    }\n  };\n\n  // allow settings modification via public API:\n  expose(settings, publicApi);\n\n  eventify(publicApi);\n\n  return publicApi;\n\n  function getBoundingBox() {\n    bounds.update();\n    return bounds.box;\n  }\n\n  function addForce(forceName, forceFunction) {\n    if (forceMap.has(forceName)) throw new Error('Force ' + forceName + ' is already added');\n\n    forceMap.set(forceName, forceFunction);\n    forces.push(forceFunction)\n  }\n\n  function removeForce(forceName) {\n    var forceIndex = forces.indexOf(forceMap.get(forceName))\n    if (forceIndex < 0) return;\n    forces.splice(forceIndex, 1);\n  }\n\n  function getForces() {\n    // TODO: Should I trust them or clone the forces?\n    return forceMap;\n  }\n\n  function nbodyForce(iterationUmber) {\n    if (bodies.length === 0) return;\n\n    quadTree.insertBodies(bodies);\n    var i = bodies.length;\n    while (i--) {\n      var body = bodies[i];\n      if (!body.isPinned) {\n        body.reset();\n        quadTree.updateBodyForce(body);\n        dragForce.update(body);\n      }\n    }\n  }\n\n  function updateSpringForce() {\n    var i = springs.length;\n    while (i--) {\n      springForce.update(springs[i]);\n    }\n  }\n\n  function expose(settings, target) {\n    for (var key in settings) {\n      augment(settings, target, key);\n    }\n  }\n\n  function augment(source, target, key) {\n    if (!source.hasOwnProperty(key)) return\n    if (typeof target[key] === 'function') {\n      // this accessor is already defined. Ignore it\n      return;\n    }\n    var sourceIsNumber = Number.isFinite(source[key]);\n\n    if (sourceIsNumber) {\n      target[key] = function (value) {\n        if (value !== undefined) {\n          if (!Number.isFinite(value)) throw new Error('Value of ' + key + ' should be a valid number.');\n          source[key] = value;\n          return target;\n        }\n        return source[key];\n      }\n    } else {\n      target[key] = function (value) {\n        if (value !== undefined) {\n          source[key] = value;\n          return target;\n        }\n        return source[key];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}