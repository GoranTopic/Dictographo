{"ast":null,"code":"import _toConsumableArray from \"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/telix/dictographo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { utils } from \"./utils.js\";\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\n\nvar PolyBezier = /*#__PURE__*/function () {\n  function PolyBezier(curves) {\n    _classCallCheck(this, PolyBezier);\n\n    this.curves = [];\n    this._3d = false;\n\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  _createClass(PolyBezier, [{\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[\" + this.curves.map(function (curve) {\n        return utils.pointsToString(curve.points);\n      }).join(\", \") + \"]\";\n    }\n  }, {\n    key: \"addCurve\",\n    value: function addCurve(curve) {\n      this.curves.push(curve);\n      this._3d = this._3d || curve._3d;\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.curves.map(function (v) {\n        return v.length();\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n    }\n  }, {\n    key: \"curve\",\n    value: function curve(idx) {\n      return this.curves[idx];\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      var c = this.curves;\n      var bbox = c[0].bbox();\n\n      for (var i = 1; i < c.length; i++) {\n        utils.expandbox(bbox, c[i].bbox());\n      }\n\n      return bbox;\n    }\n  }, {\n    key: \"offset\",\n    value: function offset(d) {\n      var offset = [];\n      this.curves.forEach(function (v) {\n        offset.push.apply(offset, _toConsumableArray(v.offset(d)));\n      });\n      return new PolyBezier(offset);\n    }\n  }]);\n\n  return PolyBezier;\n}();\n\nexport { PolyBezier };","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/bezier-js/lib/poly-bezier.js"],"names":["utils","PolyBezier","curves","_3d","toString","map","curve","pointsToString","points","join","push","v","length","reduce","a","b","idx","c","bbox","i","expandbox","d","offset","forEach"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,YAAtB;AAEA;;;;;IAIMC,U;AACJ,sBAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAc,EAAd;AACA,SAAKC,GAAL,GAAW,KAAX;;AACA,QAAI,CAAC,CAACD,MAAN,EAAc;AACZ,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKC,GAAL,GAAW,KAAKD,MAAL,CAAY,CAAZ,EAAeC,GAA1B;AACD;AACF;;;;8BAES;AACR,aAAO,KAAKC,QAAL,EAAP;AACD;;;+BAEU;AACT,aACE,MACA,KAAKF,MAAL,CACGG,GADH,CACO,UAAUC,KAAV,EAAiB;AACpB,eAAON,KAAK,CAACO,cAAN,CAAqBD,KAAK,CAACE,MAA3B,CAAP;AACD,OAHH,EAIGC,IAJH,CAIQ,IAJR,CADA,GAMA,GAPF;AASD;;;6BAEQH,K,EAAO;AACd,WAAKJ,MAAL,CAAYQ,IAAZ,CAAiBJ,KAAjB;AACA,WAAKH,GAAL,GAAW,KAAKA,GAAL,IAAYG,KAAK,CAACH,GAA7B;AACD;;;6BAEQ;AACP,aAAO,KAAKD,MAAL,CACJG,GADI,CACA,UAAUM,CAAV,EAAa;AAChB,eAAOA,CAAC,CAACC,MAAF,EAAP;AACD,OAHI,EAIJC,MAJI,CAIG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACtB,eAAOD,CAAC,GAAGC,CAAX;AACD,OANI,CAAP;AAOD;;;0BAEKC,G,EAAK;AACT,aAAO,KAAKd,MAAL,CAAYc,GAAZ,CAAP;AACD;;;2BAEM;AACL,UAAMC,CAAC,GAAG,KAAKf,MAAf;AACA,UAAIgB,IAAI,GAAGD,CAAC,CAAC,CAAD,CAAD,CAAKC,IAAL,EAAX;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,CAACL,MAAtB,EAA8BO,CAAC,EAA/B,EAAmC;AACjCnB,QAAAA,KAAK,CAACoB,SAAN,CAAgBF,IAAhB,EAAsBD,CAAC,CAACE,CAAD,CAAD,CAAKD,IAAL,EAAtB;AACD;;AACD,aAAOA,IAAP;AACD;;;2BAEMG,C,EAAG;AACR,UAAMC,MAAM,GAAG,EAAf;AACA,WAAKpB,MAAL,CAAYqB,OAAZ,CAAoB,UAAUZ,CAAV,EAAa;AAC/BW,QAAAA,MAAM,CAACZ,IAAP,OAAAY,MAAM,qBAASX,CAAC,CAACW,MAAF,CAASD,CAAT,CAAT,EAAN;AACD,OAFD;AAGA,aAAO,IAAIpB,UAAJ,CAAeqB,MAAf,CAAP;AACD;;;;;;AAGH,SAASrB,UAAT","sourcesContent":["import { utils } from \"./utils.js\";\n\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return (\n      \"[\" +\n      this.curves\n        .map(function (curve) {\n          return utils.pointsToString(curve.points);\n        })\n        .join(\", \") +\n      \"]\"\n    );\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves\n      .map(function (v) {\n        return v.length();\n      })\n      .reduce(function (a, b) {\n        return a + b;\n      });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n}\n\nexport { PolyBezier };\n"]},"metadata":{},"sourceType":"module"}