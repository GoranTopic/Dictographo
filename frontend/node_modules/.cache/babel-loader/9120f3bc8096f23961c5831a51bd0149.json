{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Graph/Graph.js\";\nimport React, { useEffect, useLayoutEffect } from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { graphConfig } from \"../../myConfig\"; //import d3Switcher from \"./d3Switcher\";\n\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d'; //import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({\n  state,\n  dispatchState\n}) {\n  const {\n    //useState,\n    //useEffect, \n    useCallback\n  } = React; // if graph is d3 and previous graph is not d3, the it is switching to d3\n\n  const isSwitchingTo3d = () => state.graphType === 'd3' && state.prevGraphType !== 'd3';\n\n  const [d3State, setD3State] = useState(state);\n  useLayoutEffect(() => {\n    console.log(\"use layout effect\");\n    console.log(isSwitchingTo3d());\n  });\n  useEffect(() => {\n    console.log('isSwitching: ' + isSwitchingTo3d);\n\n    if (isSwitching) {\n      //dispatchState({type: 'SET_LINKS', payload: })\n      console.log();\n    }\n\n    return () => {\n      console.log(\"--- done ---\");\n    };\n  }, [isSwitchingTo3d]);\n  const handleClick = useCallback( // handle click of node\n  nodeId => onClickNode(nodeId, state, dispatchState), [state, dispatchState]);\n\n  const chosenGraph = type => {\n    switch (type) {\n      case 'd3':\n        if (isSwitchingTo3d()) {\n          //console.log(\"checking the state\")\n          console.log(state); //console.log({...state, links:[]})\n\n          return /*#__PURE__*/React.createElement(Graph, {\n            id: \"graph-id\" // id is mandatory, \n            // if no id is defined rd3g will throw an error\n            ,\n            data: { ...state,\n              links: []\n            },\n            config: graphConfig,\n            onClickNode: handleClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 18\n            }\n          });\n        } else {\n          //console.log(\"checking the state\")\n          console.log(state); //console.log({...state, links:[]})\n\n          return /*#__PURE__*/React.createElement(Graph, {\n            id: \"graph-id\" // id is mandatory, \n            // if no id is defined rd3g will throw an error\n            ,\n            data: state,\n            config: graphConfig,\n            onClickNode: handleClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 18\n            }\n          });\n        }\n\n      case '2D':\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(ForceGraph2D, {\n          enableNodeDrag: true,\n          onNodeClick: handleClick,\n          graphData: state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 16\n          }\n        });\n\n      case '3D':\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(ForceGraph3D, {\n          enableNodeDrag: true,\n          onNodeClick: handleClick,\n          graphData: state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        //console.log(state)\n        return /*#__PURE__*/React.createElement(Graph, {\n          id: \"graph-id\" // id is mandatory, \n          // if no id is defined rd3g will throw an error\n          ,\n          data: state,\n          config: graphConfig,\n          onClickNode: handleClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 16\n          }\n        });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundImage: 'url(./grid.png)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 10\n    }\n  }, chosenGraph(state.graphType));\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Graph/Graph.js"],"names":["React","useEffect","useLayoutEffect","Graph","onClickNode","graphConfig","ForceGraph2D","ForceGraph3D","GraphContainer","state","dispatchState","useCallback","isSwitchingTo3d","graphType","prevGraphType","d3State","setD3State","useState","console","log","isSwitching","handleClick","nodeId","chosenGraph","type","links","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect }  from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport { onClickNode } from '../../node_functions';\nimport { graphConfig }  from \"../../myConfig\";\n//import d3Switcher from \"./d3Switcher\";\nimport ForceGraph2D from 'react-force-graph-2d';\nimport ForceGraph3D from 'react-force-graph-3d';\n//import ForceGraphVR from 'react-force-graph-vr';\n//import ForceGraphAR from 'react-force-graph-ar';\n\n/*\n * =======================================\n *      Graph Componente for React \n * =======================================\n */\n\nfunction GraphContainer({state, dispatchState}){\n\n\t\tconst { \n\t\t\t\t//useState,\n\t\t\t\t//useEffect, \n\t\t\t\tuseCallback\n\t\t} = React;\n\n\t\t// if graph is d3 and previous graph is not d3, the it is switching to d3\n\t\tconst isSwitchingTo3d = () => state.graphType === 'd3' && state.prevGraphType !== 'd3';\n\n\t\tconst [d3State, setD3State]  = useState(state)\n\n\t\tuseLayoutEffect(() => {\n\t\t\t\tconsole.log(\"use layout effect\")\n\t\t\t\tconsole.log(isSwitchingTo3d())\n\n\t\t})\n\n\t\t\n\n\t\tuseEffect(() => {  \n\t\t\t\tconsole.log('isSwitching: ' + isSwitchingTo3d);\n\t\t\t\tif(isSwitching){\n\t\t\t\t\t\t//dispatchState({type: 'SET_LINKS', payload: })\n\t\t\t\t\t\tconsole.log()\n\t\t\t\t}\n\t\t\t\treturn () =>{\n\t\t\t\t\t\tconsole.log(\"--- done ---\")\n\t\t\t\t}\n\t\t\t}, [isSwitchingTo3d])\n\t\t\t\n\t\tconst handleClick = useCallback( // handle click of node\n\n\t\t\t\t(nodeId) => onClickNode(nodeId, state, dispatchState), \n\t\t\t\t[state, dispatchState]);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\n\t\tconst chosenGraph = (type) =>{ \n\t\t\t\tswitch(type) {\n\t\t\t\t\t\tcase 'd3':\n\t\t\t\t\t\t\t\tif(isSwitchingTo3d()){\n\t\t\t\t\t\t\t\t\t\t//console.log(\"checking the state\")\n\t\t\t\t\t\t\t\t\t\tconsole.log(state)\n\t\t\t\t\t\t\t\t\t\t//console.log({...state, links:[]})\n\t\t\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\t\t\tdata={{ ...state, links:[]}}\n\t\t\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t//console.log(\"checking the state\")\n\t\t\t\t\t\t\t\t\t\tconsole.log(state)\n\t\t\t\t\t\t\t\t\t\t//console.log({...state, links:[]})\n\t\t\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcase '2D':\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <ForceGraph2D\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tgraphData={state}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tcase '3D':\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <ForceGraph3D\n\t\t\t\t\t\t\t\t\t\tenableNodeDrag={true}\n\t\t\t\t\t\t\t\t\t\tonNodeClick={handleClick}\n\t\t\t\t\t\t\t\t\t\tgraphData={state}\n\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t//console.log(state)\n\t\t\t\t\t\t\t\treturn <Graph \n\t\t\t\t\t\t\t\t\t\tid=\"graph-id\" \n\t\t\t\t\t\t\t\t\t\t// id is mandatory, \n\t\t\t\t\t\t\t\t\t\t// if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\t\t\tdata={state}\n\t\t\t\t\t\t\t\t\t\tconfig={graphConfig}\n\t\t\t\t\t\t\t\t\t\tonClickNode={handleClick}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t} \n\t\t}\n\n\n\t\treturn <div style={{backgroundImage: 'url(./grid.png)'}} >\n\t\t\t\t{chosenGraph(state.graphType)}\n\t\t</div>\n\t\t\n}\n\nexport default GraphContainer;\n"]},"metadata":{},"sourceType":"module"}