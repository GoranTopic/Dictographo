{"ast":null,"code":"import { colors } from \"../myConfig\";\nconst initial_state = {\n  /* graph payload (with minimalist structure) */\n  nodes: [],\n  // the master node information \n  links: [],\n  //the master links information\n  d3Data: {\n    // the copy of data for the d3 graph\n    nodes: [],\n    links: []\n  },\n  forceData: {\n    // th copy of data for the force graphs\n    nodes: [],\n    links: []\n  },\n  selected: {},\n  definedNode: {},\n  graphType: 'd3',\n  isError: false,\n  errorMsg: \"\",\n  isFetchFailed: false,\n  isWordNotFound: false,\n  wordsNotFound: [],\n  isPathNotFound: false,\n  pathsNotFound: [],\n  isEmpty: true,\n  isLoading: true,\n  searchTerm: '',\n  DestinationTerm: '',\n  isDeepLinks: false,\n  showModal: false,\n  isSideBar: true\n};\n\nconst stateReducer = (state, action) => {\n  /* make reducer for the words data and internal state */\n  let node;\n  /* finds and colors the node */\n\n  const findNcolor = (selectedNode, color) => node => node.id === selectedNode ? { ...node,\n    color: color\n  } : node;\n  /* reomeves the duplicate node or link in a array */\n\n\n  const removeDuplicateWithSet = array => {\n    let uniqueKeys = [];\n    let uniqueArray = [];\n    array.forEach(obj => {\n      if ('id' in obj) {\n        // if it is an node\n        if (!(obj.id in uniqueKeys)) {\n          // if it is not in unique keys\n          console.log(\"adding:\");\n          console.log(obj.id);\n          uniqueArray.push(obj);\n          uniqueKeys.push(obj.id);\n        }\n      } else {\n        // if it is an link\n        let id = obj.source + obj.target;\n\n        if (!(id in uniqueKeys)) {\n          // if it is not in unique keys\n          console.log(\"adding:\");\n          console.log(id);\n          uniqueArray.push(obj);\n          uniqueKeys.push(id);\n        }\n      }\n\n      console.log(\"object: \");\n      console.log(obj);\n    });\n    return uniqueArray;\n  };\n\n  switch (action.type) {\n    case 'SET_NEW_NODES':\n      return { ...state,\n        nodes: [...state.nodes, ...action.payload],\n        d3Data: { ...state.d3Data,\n          nodes: [...state.d3Data.nodes, ...action.payload]\n        },\n        forceData: { ...state.forceData,\n          nodes: [...state.forceData.nodes, ...action.payload]\n        }\n      };\n\n    case 'SET_NEW_LINKS':\n      return { ...state,\n        links: [...state.links, ...action.payload],\n        d3Data: { ...state.d3Data,\n          links: [...state.d3Data.links, ...action.payload]\n        },\n        forceData: { ...state.forceData,\n          links: [...state.forceData.links, ...action.payload]\n        }\n      };\n\n    case 'SET_NEW_LINK':\n      return { ...state,\n        links: [...state.links, action.payload],\n        d3Data: { ...state.d3Data,\n          links: [...state.d3Data.links, action.payload]\n        },\n        forceData: { ...state.forceData,\n          links: [...state.forceData.links, action.payload]\n        }\n      };\n\n    case 'SET_NODE_LINK':\n      return { ...state,\n        nodes: removeDuplicateWithSet([...state.nodes, action.payload.node]),\n        links: removeDuplicateWithSet([...state.links, action.payload.link]),\n        d3Data: { ...state.d3Data,\n          nodes: removeDuplicateWithSet([...state.d3Data.nodes, action.payload.node]),\n          links: removeDuplicateWithSet([...state.d3Data.links, action.payload.link])\n        },\n        forceData: { ...state.forceData,\n          nodes: removeDuplicateWithSet([...state.forceData.nodes, action.payload.node]),\n          links: removeDuplicateWithSet([...state.forceData.links, action.payload.link])\n        }\n      };\n\n    case 'CLEAR_LINKS':\n      return { ...state,\n        links: [],\n        d3Data: { ...state.d3Data,\n          links: []\n        },\n        forceData: { ...state.forceData,\n          links: []\n        }\n      };\n\n    case 'CLEAR_NODES':\n      return { ...state,\n        nodes: [],\n        d3Data: { ...state.d3Data,\n          nodes: []\n        },\n        forceData: { ...state.forceData,\n          nodes: []\n        }\n      };\n\n    case 'SET_STATE':\n      return { ...state,\n        nodes: [...state.nodes, ...action.payload.nodes],\n        links: [...state.links, ...action.payload.links],\n        d3Data: { ...state.d3Data,\n          nodes: [...state.d3Data.nodes, ...action.payload.nodes],\n          links: [...state.d3Data.links, ...action.payload.links]\n        },\n        forceData: { ...state.forceData,\n          nodes: [...state.forceData.nodes, ...action.payload.nodes],\n          links: [...state.forceData.links, ...action.payload.links]\n        }\n      };\n\n    case 'SET_NEW_NODE':\n      return { ...state,\n        nodes: [{ ...action.payload,\n          selected: true,\n          color: colors.node.selected\n        }],\n        links: [],\n        d3Data: { ...state.d3Data,\n          nodes: [{ ...action.payload,\n            selected: true,\n            color: colors.node.selected\n          }],\n          links: []\n        },\n        forceData: { ...state.forceData,\n          nodes: [{ ...action.payload,\n            selected: true,\n            color: colors.node.selected\n          }],\n          links: []\n        },\n        selected: action.payload,\n        // save as selected\n        definedNode: action.payload,\n        // save as a definietion \n        isEmpty: false\n      };\n\n    case 'SET_PATH_NODE':\n      return { ...state,\n        nodes: [...state.nodes, { ...action.payload.node,\n          selected: true\n        }],\n        links: [...state.links, { ...action.payload.link,\n          color: colors.link.onPath\n        }],\n        d3Data: { ...state.d3Data,\n          nodes: [...state.d3Data.nodes, { ...action.payload.node,\n            selected: true\n          }],\n          links: [...state.d3Data.links, { ...action.payload.link,\n            color: colors.link.onPath\n          }]\n        },\n        forceData: { ...state.forceData,\n          nodes: [...state.forceData.nodes, { ...action.payload.node,\n            selected: true\n          }],\n          links: [...state.forceData.links, { ...action.payload.link,\n            color: colors.link.onPath\n          }]\n        },\n        selected: action.payload.node,\n        // save as selected\n        definedNode: action.payload.node,\n        // save as a definietion \n        isEmpty: false\n      };\n\n    case 'SET_NODE_DONE':\n      return { ...state,\n        nodes: state.nodes.map(findNcolor(action.payload, colors.node.done)),\n        d3Data: { ...state.d3Data,\n          nodes: state.d3Data.nodes.map(findNcolor(action.payload, colors.node.done))\n        },\n        forceData: { ...state.forceData,\n          nodes: state.forceData.nodes.map(findNcolor(action.payload, colors.node.done))\n        },\n        isEmpty: false\n      };\n\n    case 'SET_DEFINED_NODE':\n      node = state.nodes.filter(node => node.id === action.payload)[0];\n      return { ...state,\n        definedNode: node\n      };\n\n    case 'SET_NODE_SELECTED':\n      return { ...state,\n        nodes: state.nodes.map(findNcolor(action.payload, colors.node.selected)),\n        d3Data: { ...state.d3Data,\n          nodes: state.d3Data.nodes.map(findNcolor(action.payload, colors.node.selected))\n        },\n        forceData: { ...state.forceData,\n          nodes: state.forceData.nodes.map(findNcolor(action.payload, colors.node.selected))\n        },\n        selected: action.payload\n      };\n\n    case 'SWITCH_SELECTED_NODE':\n      return { ...state,\n        nodes: state.nodes.map(findNcolor(action.payload, colors.node.selected)),\n        selected: action.payload,\n        definedNode: action.payload\n      };\n\n    case 'ERASE_NODES':\n      return { ...state,\n        nodes: [],\n        links: []\n      };\n\n    case 'SET_SEARCH_TERM':\n      return { ...state,\n        searchTerm: action.payload\n      };\n\n    case 'SET_DEST_TERM':\n      return { ...state,\n        destinationTerm: action.payload\n      };\n\n    case 'TOGGEL_MODAL':\n      return { ...state,\n        showModal: !state.showModal\n      };\n\n    case 'SET_SHOW_MODAL':\n      return { ...state,\n        showModal: action.payload\n      };\n\n    case 'SET_WORD_NOT_FOUND':\n      return { ...state,\n        isError: true,\n        isWordNotFound: true,\n        // add not found wors to list\n        wordsNotFound: new Set([...state.wordsNotFound, action.payload])\n      };\n\n    case 'SET_PATH_NOT_FOUND':\n      return { ...state,\n        isError: true,\n        isPathNotFound: true,\n        pathsNotFound: new Set([...state.pathsNotFound, { ...action.payload\n        }])\n      };\n\n    case 'DISSMISS_ERROR':\n      return { ...state,\n        isError: false,\n        errorMsg: \"\",\n        isWordNotFound: false,\n        wordsNotFound: [],\n        isPathNotFound: false,\n        pathsNotFound: []\n      };\n\n    case 'TOGGLE_DEEP_LINKS':\n      return { ...state,\n        isDeepLinks: !state.isDeepLinks\n      };\n\n    case 'TOGGLE_SIDE_BAR':\n      return { ...state,\n        isSideBar: !state.isSideBar\n      };\n\n    case 'SET_FETCH_FAILED':\n      return { ...state,\n        isError: true,\n        isFetchFailed: true\n      };\n\n    case 'SET_GRAPH_TYPE':\n      return { ...state,\n        // save the previous graph type\n        prevGraphType: state.graphType,\n        // set changed graph type\n        graphType: action.payload\n      };\n\n    case 'SET_ERROR':\n      return { ...state,\n        isError: true,\n        errorMsg: action.payload\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport { initial_state, stateReducer };","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/State.js"],"names":["colors","initial_state","nodes","links","d3Data","forceData","selected","definedNode","graphType","isError","errorMsg","isFetchFailed","isWordNotFound","wordsNotFound","isPathNotFound","pathsNotFound","isEmpty","isLoading","searchTerm","DestinationTerm","isDeepLinks","showModal","isSideBar","stateReducer","state","action","node","findNcolor","selectedNode","color","id","removeDuplicateWithSet","array","uniqueKeys","uniqueArray","forEach","obj","console","log","push","source","target","type","payload","link","onPath","map","done","filter","destinationTerm","Set","prevGraphType","Error"],"mappings":"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","sourcesContent":["import { colors }  from \"../myConfig\";\n\nconst initial_state = {\n\t\t/* graph payload (with minimalist structure) */\n\t\tnodes: [], // the master node information \n\t\tlinks: [],  //the master links information\n\t\td3Data:{ // the copy of data for the d3 graph\n\t\t\t\tnodes: [],\n\t\t\t\tlinks: [],\n\t\t},\n\t\tforceData:{ // th copy of data for the force graphs\n\t\t\t\tnodes: [],\n\t\t\t\tlinks: [],\n\t\t},\n\t\tselected:{},\n\t\tdefinedNode:{},\n\t\tgraphType: 'd3',\n\t\tisError: false,\n\t\terrorMsg: \"\",\n\t\tisFetchFailed: false,\n\t\tisWordNotFound: false,\n\t\twordsNotFound: [],\n\t\tisPathNotFound: false,\n\t\tpathsNotFound: [],\n\t\tisEmpty: true,\n\t\tisLoading: true,\n\t\tsearchTerm: '',\n\t\tDestinationTerm: '',\n\t\tisDeepLinks: false,\n\t\tshowModal: false,\n\t\tisSideBar: true,\n};\n\nconst stateReducer = (state, action) =>{\n\t\t/* make reducer for the words data and internal state */\n\t\tlet node;\n\t\t/* finds and colors the node */\n\t\tconst findNcolor = (selectedNode, color) => \n\t\t\t\t(node) => node.id === selectedNode? {...node, color: color }: node \n\t\t/* reomeves the duplicate node or link in a array */\n\t\tconst removeDuplicateWithSet = ( array ) =>{\n\t\t\t\tlet uniqueKeys = [];\n\t\t\t\tlet uniqueArray = [];\n\t\t\t\tarray.forEach( obj => {\n\t\t\t\t\t\tif( 'id' in obj){ // if it is an node\n\t\t\t\t\t\t\t\tif( !(obj.id in uniqueKeys ) ){ \n\t\t\t\t\t\t\t\t\t\t// if it is not in unique keys\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"adding:\")\n\t\t\t\t\t\t\t\t\t\tconsole.log(obj.id)\n\t\t\t\t\t\t\t\t\t\tuniqueArray.push(obj);\n\t\t\t\t\t\t\t\t\t\tuniqueKeys.push(obj.id);\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{ // if it is an link\n\t\t\t\t\t\t\tlet id = obj.source + obj.target;\n\t\t\t\t\t\t\t\tif( !( id in uniqueKeys ) ){ \n\t\t\t\t\t\t\t\t\t\t// if it is not in unique keys\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"adding:\")\n\t\t\t\t\t\t\t\t\t\tconsole.log(id)\n\t\t\t\t\t\t\t\t\t\tuniqueArray.push(obj);\n\t\t\t\t\t\t\t\t\t\tuniqueKeys.push(id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.log(\"object: \")\n\t\t\t\t\t\tconsole.log(obj)\n\t\t\t\t})\n\t\t\treturn uniqueArray;\n\t\t}\n\n\n\t\tswitch (action.type){\n\t\t\t\tcase 'SET_NEW_NODES':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload ],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.d3Data.nodes, ...action.payload ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.forceData.nodes, ...action.payload ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NEW_LINKS':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload ],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.d3Data.links, ...action.payload ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.forceData.links, ...action.payload ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NEW_LINK':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tlinks: [ ...state.links, action.payload ],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.d3Data.links, action.payload ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.forceData.links, action.payload ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NODE_LINK':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: removeDuplicateWithSet([ ...state.nodes, action.payload.node ]),\n\t\t\t\t\t\t\t\tlinks: removeDuplicateWithSet([ ...state.links, action.payload.link ]),\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: removeDuplicateWithSet([ ...state.d3Data.nodes, action.payload.node ]),\n\t\t\t\t\t\t\t\t\t\tlinks: removeDuplicateWithSet([ ...state.d3Data.links, action.payload.link ]),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: removeDuplicateWithSet([ ...state.forceData.nodes, action.payload.node ]),\n\t\t\t\t\t\t\t\t\t\tlinks: removeDuplicateWithSet([ ...state.forceData.links, action.payload.link ]),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'CLEAR_LINKS':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'CLEAR_NODES':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_STATE':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.d3Data.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.d3Data.links, ...action.payload.links ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.forceData.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.forceData.links, ...action.payload.links ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NEW_NODE':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [ { ...action.payload, selected: true, color: colors.node.selected  } ],\n\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: [{ ...action.payload, selected: true, color: colors.node.selected  }],\n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [{ ...action.payload, selected: true, color: colors.node.selected } ],\n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tselected: action.payload, // save as selected\n\t\t\t\t\t\t\t\tdefinedNode: action.payload, // save as a definietion \n\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_PATH_NODE':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, { ...action.payload.node, selected: true, }],\n\t\t\t\t\t\t\t\tlinks: [ ...state.links, { ...action.payload.link, color: colors.link.onPath } ],\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.d3Data.nodes, { ...action.payload.node, selected: true, }],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.d3Data.links, { ...action.payload.link, color: colors.link.onPath } ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.forceData.nodes, { ...action.payload.node, selected: true, }],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.forceData.links, { ...action.payload.link, color: colors.link.onPath } ],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tselected: action.payload.node, // save as selected\n\t\t\t\t\t\t\t\tdefinedNode: action.payload.node, // save as a definietion \n\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NODE_DONE':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: state.nodes.map(findNcolor(action.payload, colors.node.done)), \n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: state.d3Data.nodes.map(findNcolor(action.payload, colors.node.done)), \n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: state.forceData.nodes.map(findNcolor(action.payload, colors.node.done)), \n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_DEFINED_NODE':\n\t\t\t\t\t\tnode = state.nodes.filter( node => node.id === action.payload )[0];\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tdefinedNode: node,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_NODE_SELECTED':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: state.nodes.map(findNcolor(action.payload, colors.node.selected)),\n\t\t\t\t\t\t\t\td3Data: {\n\t\t\t\t\t\t\t\t\t\t...state.d3Data, \n\t\t\t\t\t\t\t\t\t\tnodes: state.d3Data.nodes.map(findNcolor(action.payload, colors.node.selected)), \n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tforceData: {\n\t\t\t\t\t\t\t\t\t\t...state.forceData, \n\t\t\t\t\t\t\t\t\t\tnodes: state.forceData.nodes.map(findNcolor(action.payload, colors.node.selected)), \n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tselected: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SWITCH_SELECTED_NODE':\n\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: state.nodes.map(findNcolor(action.payload, colors.node.selected)),\n\t\t\t\t\t\t\t\tselected: action.payload,\n\t\t\t\t\t\t\t\tdefinedNode: action.payload,\n\t\t\t\t\t\t};\n\n\t\t\t\tcase 'ERASE_NODES':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_SEARCH_TERM':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tsearchTerm: action.payload,\t\t\t\t\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_DEST_TERM':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tdestinationTerm: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcase 'TOGGEL_MODAL':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tshowModal: !state.showModal,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_SHOW_MODAL':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tshowModal: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_WORD_NOT_FOUND':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\tisWordNotFound: true,\n\t\t\t\t\t\t\t\t// add not found wors to list\n\t\t\t\t\t\t\t\twordsNotFound: new Set([ ...state.wordsNotFound, action.payload]),\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_PATH_NOT_FOUND':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\tisPathNotFound: true,\n\t\t\t\t\t\t\t\tpathsNotFound: new Set([ ...state.pathsNotFound, { ...action.payload}]),\n\t\t\t\t\t\t};\n\t\t\t\tcase 'DISSMISS_ERROR':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: false,\n\t\t\t\t\t\t\t\terrorMsg: \"\",\n\t\t\t\t\t\t\t\tisWordNotFound: false,\n\t\t\t\t\t\t\t\twordsNotFound: [],\n\t\t\t\t\t\t\t\tisPathNotFound: false,\n\t\t\t\t\t\t\t\tpathsNotFound:  [],\n\t\t\t\t\t\t};\n\t\t\t\tcase 'TOGGLE_DEEP_LINKS':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisDeepLinks: !state.isDeepLinks,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'TOGGLE_SIDE_BAR':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisSideBar: !state.isSideBar,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_FETCH_FAILED':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\tisFetchFailed: true,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_GRAPH_TYPE':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t// save the previous graph type\n\t\t\t\t\t\t\t\tprevGraphType : state.graphType,\n\t\t\t\t\t\t\t\t// set changed graph type\n\t\t\t\t\t\t\t\tgraphType: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tcase 'SET_ERROR':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\terrorMsg: action.payload,\n\t\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error();\n\t\t}\n}\n\nexport { initial_state, stateReducer };\n\n"]},"metadata":{},"sourceType":"module"}