{"ast":null,"code":"export default function (d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1,\n      x,\n      y,\n      z,\n      xm,\n      ym,\n      zm,\n      right,\n      bottom,\n      deep,\n      i,\n      j; // If the tree is empty, initialize the root as a leaf.\n\n  if (!node) return this; // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm;else z1 = zm;\n    if (!(parent = node, node = node[i = deep << 2 | bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[i + 1 & 7] || parent[i + 2 & 7] || parent[i + 3 & 7] || parent[i + 4 & 7] || parent[i + 5 & 7] || parent[i + 6 & 7] || parent[i + 7 & 7]) retainer = parent, j = i;\n  } // Find the point to remove.\n\n  while (node.data !== d) {\n    if (!(previous = node, node = node.next)) return this;\n  }\n\n  if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.\n\n  if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.\n\n  if (!parent) return this._root = next, this; // Remove this leaf.\n\n  next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.\n\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3] || parent[4] || parent[5] || parent[6] || parent[7]) && node === (parent[7] || parent[6] || parent[5] || parent[4] || parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {\n    if (retainer) retainer[j] = node;else this._root = node;\n  }\n\n  return this;\n}\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) {\n    this.remove(data[i]);\n  }\n\n  return this;\n}","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/d3-octree/src/remove.js"],"names":["d","isNaN","x","_x","call","y","_y","z","_z","parent","node","_root","retainer","previous","next","x0","_x0","y0","_y0","z0","_z0","x1","_x1","y1","_y1","z1","_z1","xm","ym","zm","right","bottom","deep","i","j","length","data","removeAll","n","remove"],"mappings":"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","sourcesContent":["export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1,\n      x,\n      y,\n      z,\n      xm,\n      ym,\n      zm,\n      right,\n      bottom,\n      deep,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;\n    if (!(parent = node, node = node[i = deep << 2 | bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 7] || parent[(i + 2) & 7] || parent[(i + 3) & 7] || parent[(i + 4) & 7] || parent[(i + 5) & 7] || parent[(i + 6) & 7] || parent[(i + 7) & 7]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3] || parent[4] || parent[5] || parent[6] || parent[7])\n      && node === (parent[7] || parent[6] || parent[5] || parent[4] || parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n"]},"metadata":{},"sourceType":"module"}