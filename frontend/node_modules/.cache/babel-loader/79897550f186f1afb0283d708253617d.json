{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT } from \"../../myConfig\";\nimport useKeypress from '../../hooks/useKeypress';\nimport styles from './SearchSuggestion.css';\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/'; //add this to myconfig\n\nfunction SuggestionsContainer(props) {\n  /* tahek a child fro a input an add suggestions to it */\n  // handle the change by seting the state variable to \n  let state = props.state;\n  let dispatchState = props.dispatchState;\n  const activeSuggestion = 1;\n  const [suggestions, setSuggestions] = useState([]);\n  const [selected, setSetselected] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  useKeypress('ArrowDown', () => {\n    setSetselected(setSetselected - 1);\n    console.log(selected);\n  });\n  useKeypress('ArrowUp', () => {\n    setSetselected(setSetselected + 1);\n    console.log(selected);\n  });\n  useKeypress('Enter', () => console.log(\"key pressed\"));\n\n  const filterSuggestions = suggestions => suggestions.filter(suggestion => /\\s/.test(suggestion));\n\n  const onClick = word => {\n    /* append a given word to the seate searchTerm */\n    let wList = state.searchTerm.split(\" \");\n    let len = wList.length;\n    wList[len - 1] = word; // set the last word as clicke word\n\n    dispatchState({\n      type: 'SET_SEARCH_TERM',\n      payload: wList.join(\" \") + \" \"\n    });\n    setSuggestions([]); // reset suggestions\n  };\n\n  useEffect(() => {\n    /* query server for search suggestionsa\n     * and sets the  */\n    let wordList = state.searchTerm.split(\" \"); //split the search into words\n\n    let len = wordList.length; //get the length\n\n    let last = wordList[len - 1]; //fetch the last element \n\n    fetch(API_ENDPOINT + query_search + last).then(result => result.json()) //unpack suggestions\n    .then(result => {\n      console.log(result);\n      return result;\n    }) //unpack suggestions\n    .then(suggestions => filterSuggestions(suggestions)).then(suggestions => setSuggestions(suggestions)).catch(err => console.log(err));\n  }, [state.searchTerm, dispatchState]);\n\n  const isWrittingWord = () => {\n    /* uses the state to see if\n    \t\t* the user is in the middle of writting a word */\n    let len = state.searchTerm.length;\n    let last = state.searchTerm[state.searchTerm.length - 1];\n\n    if (len === 0) {\n      return false;\n    } else if (last === \" \") {\n      return false;\n    } else return true;\n  };\n\n  const SuggestionList = () => /*#__PURE__*/React.createElement(\"ul\", {\n    class: \"suggestions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, suggestions.map((suggestion, index) => {\n    let className;\n    if (index === selected) className = styles.active;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      className: className,\n      onClick: () => onClick(suggestion.word),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }, suggestion.word);\n  }));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 14\n    }\n  }, props.children, isWrittingWord() ? /*#__PURE__*/React.createElement(SuggestionList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 28\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n}\n\nexport default SuggestionsContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js"],"names":["React","useState","useEffect","API_ENDPOINT","useKeypress","styles","query_search","SuggestionsContainer","props","state","dispatchState","activeSuggestion","suggestions","setSuggestions","selected","setSetselected","isActive","setIsActive","console","log","filterSuggestions","filter","suggestion","test","onClick","word","wList","searchTerm","split","len","length","type","payload","join","wordList","last","fetch","then","result","json","catch","err","isWrittingWord","SuggestionList","map","index","className","active","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT }  from \"../../myConfig\";\nimport useKeypress from '../../hooks/useKeypress';\nimport styles from './SearchSuggestion.css'; \n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/' //add this to myconfig\n\nfunction SuggestionsContainer(props){\n\t\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t\tconst activeSuggestion = 1;\n\t\tconst [suggestions, setSuggestions] = useState([])\t\n\t\tconst [selected, setSetselected] = useState(0)\t\n\t\tconst [isActive, setIsActive] = useState(false)\t\n\t\n\n\n\t\tuseKeypress('ArrowDown', () => {\n\t\t\t\tsetSetselected(setSetselected - 1);\n\t\t\t\tconsole.log(selected);\n\t\t});\n\n\t\tuseKeypress('ArrowUp', () => {\n\t\t\t\tsetSetselected(setSetselected + 1);\n\t\t\t\tconsole.log(selected);\n\t\t});\n\n\n\n\t\tuseKeypress('Enter', () => console.log(\"key pressed\"));\n\n\n\t\tconst filterSuggestions = suggestions => \n\t\t\t\tsuggestions.filter( suggestion => /\\s/.test(suggestion))\n\n\t\tconst onClick = (word) => {\n\t\t\t\t/* append a given word to the seate searchTerm */\n\t\t\t\tlet wList = state.searchTerm.split(\" \");\n\t\t\t\tlet len = wList.length \n\t\t\t\twList[len-1] = word // set the last word as clicke word\n\t\t\t\tdispatchState({ \n\t\t\t\t\t\ttype: 'SET_SEARCH_TERM',\n\t\t\t\t\t\tpayload: wList.join(\" \") + \" \",\n\t\t\t\t});\t\n\t\t\t\tsetSuggestions([]); // reset suggestions\n\t\t}\n\n\t\tuseEffect(() => {\n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\t//split the search into words\n\t\t\t\tlet len = wordList.length;\n\t\t\t\t//get the length\n\t\t\t\tlet last = wordList[len-1]\n\t\t\t\t//fetch the last element \n\t\t\t\tfetch(API_ENDPOINT + query_search + last)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(result => {console.log(result); return result}) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => filterSuggestions(suggestions))\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch((err) => console.log(err));\n\t\t}, [state.searchTerm, dispatchState])\n\n\t\tconst isWrittingWord = () =>{\n\t\t\t\t/* uses the state to see if\n\t\t\t\t\t\t* the user is in the middle of writting a word */\n\t\t\t\tlet len = state.searchTerm.length;\n\t\t\t\tlet last = state.searchTerm[state.searchTerm.length-1];\n\t\t\t\tif(len === 0){ return false;\n\t\t\t\t}else if (last === \" \"){ return false;\n\t\t\t\t}else return true; \n\t\t}\n\n\n\t\tconst SuggestionList = () =>\n\t\t\t\t<ul class=\"suggestions\">\n\t\t\t\t\t\t{ suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => {  \n\t\t\t\t\t\t\t\t\t\tlet className;\n\t\t\t\t\t\t\t\t\t\tif (index === selected) \n\t\t\t\t\t\t\t\t\t\t\t\tclassName = styles.active\n\t\t\t\t\t\t\t\t\t\treturn  <li \n\t\t\t\t\t\t\t\t\t\t\t\tkey={index} \n\t\t\t\t\t\t\t\t\t\t\t\tclassName={className}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onClick(suggestion.word)}>\n\t\t\t\t\t\t\t\t\t\t\t\t{suggestion.word}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t</ul>\n\n\t\t\t\t\t\treturn <div className=\"input\">\n\t\t\t\t\t\t\t\t{props.children}\n\t\t\t\t\t\t\t\t{isWrittingWord()? <SuggestionList/>: <></> }\n\t\t\t\t\t\t</div>\n}\n\nexport default SuggestionsContainer;\n"]},"metadata":{},"sourceType":"module"}