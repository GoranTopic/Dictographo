{"ast":null,"code":"var createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateBodyFunction;\nmodule.exports.generateCreateBodyFunctionBody = generateCreateBodyFunctionBody;\n\nfunction generateCreateBodyFunction(dimension, debugSetters) {\n  var code = generateCreateBodyFunctionBody(dimension, debugSetters);\n\n  var _Function = new Function(code)(),\n      Body = _Function.Body;\n\n  return Body;\n}\n\nfunction generateCreateBodyFunctionBody(dimension, debugSetters) {\n  var pattern = createPatternBuilder(dimension);\n  var variableList = pattern('{var}', {\n    join: ', '\n  });\n  var setters = '';\n\n  if (debugSetters) {\n    setters = \"\".concat(pattern(\"\\n\\\n   var v{var};\\n\\\nObject.defineProperty(this, '{var}', {\\n\\\n  set: function(v) { \\n\\\n    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\\n\\\n    v{var} = v; \\n\\\n  },\\n\\\n  get: function() { return v{var}; }\\n\\\n});\"));\n  }\n\n  var code = \"\\nfunction Vector(\".concat(variableList, \") {\\n\").concat(setters, \"\\n  if (typeof arguments[0] === 'object') {\\n    // could be another vector\\n    let v = arguments[0];\\n    \").concat(pattern('if (!Number.isFinite(v.{var})) throw new Error(\"Expected value is not a finite number at Vector constructor ({var})\");', {\n    indent: 4\n  }), \"\\n    \").concat(pattern('this.{var} = v.{var};', {\n    indent: 4\n  }), \"\\n  } else {\\n    \").concat(pattern('this.{var} = typeof {var} === \"number\" ? {var} : 0;', {\n    indent: 4\n  }), \"\\n  }\\n}\\n\\nVector.prototype.reset = function () {\\n  \").concat(pattern('this.{var} = ', {\n    join: ''\n  }), \"0;\\n};\\n\\nfunction Body(\").concat(variableList, \") {\\n  this.isPinned = false;\\n  this.pos = new Vector(\").concat(variableList, \");\\n  this.force = new Vector();\\n  this.velocity = new Vector();\\n  this.mass = 1;\\n\\n  this.springCount = 0;\\n  this.springLength = 0;\\n}\\n\\nBody.prototype.reset = function() {\\n  this.force.reset();\\n  this.springCount = 0;\\n  this.springLength = 0;\\n}\\n\\nBody.prototype.setPosition = function (\").concat(variableList, \") {\\n  \").concat(pattern('this.pos.{var} = {var} || 0;', {\n    indent: 2\n  }), \"\\n};\\n\\nreturn {Body: Body, Vector: Vector};\\n\");\n  return code;\n}","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js"],"names":["createPatternBuilder","require","module","exports","generateCreateBodyFunction","generateCreateBodyFunctionBody","dimension","debugSetters","code","Function","Body","pattern","variableList","join","setters","indent"],"mappings":"AACA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,0BAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,8BAAf,GAAgDA,8BAAhD;;AAEA,SAASD,0BAAT,CAAoCE,SAApC,EAA+CC,YAA/C,EAA6D;AAC3D,MAAIC,IAAI,GAAGH,8BAA8B,CAACC,SAAD,EAAYC,YAAZ,CAAzC;;AAD2D,kBAE7C,IAAIE,QAAJ,CAAaD,IAAb,CAAD,EAF8C;AAAA,MAEtDE,IAFsD,aAEtDA,IAFsD;;AAG3D,SAAOA,IAAP;AACD;;AAED,SAASL,8BAAT,CAAwCC,SAAxC,EAAmDC,YAAnD,EAAiE;AAC/D,MAAII,OAAO,GAAGX,oBAAoB,CAACM,SAAD,CAAlC;AACA,MAAIM,YAAY,GAAGD,OAAO,CAAC,OAAD,EAAU;AAACE,IAAAA,IAAI,EAAE;AAAP,GAAV,CAA1B;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAIP,YAAJ,EAAkB;AAChBO,IAAAA,OAAO,aAAMH,OAAO,CAAC;;;;;;;;IAAD,CAAb,CAAP;AASD;;AAED,MAAIH,IAAI,+BACQI,YADR,kBAERE,OAFQ,yHAMJH,OAAO,CAAC,wHAAD,EAA2H;AAACI,IAAAA,MAAM,EAAE;AAAT,GAA3H,CANH,mBAOJJ,OAAO,CAAC,uBAAD,EAA0B;AAACI,IAAAA,MAAM,EAAE;AAAT,GAA1B,CAPH,+BASJJ,OAAO,CAAC,qDAAD,EAAwD;AAACI,IAAAA,MAAM,EAAE;AAAT,GAAxD,CATH,mEAcNJ,OAAO,CAAC,eAAD,EAAkB;AAACE,IAAAA,IAAI,EAAE;AAAP,GAAlB,CAdD,qCAiBMD,YAjBN,oEAmBgBA,YAnBhB,uTAkC+BA,YAlC/B,oBAmCND,OAAO,CAAC,8BAAD,EAAiC;AAACI,IAAAA,MAAM,EAAE;AAAT,GAAjC,CAnCD,mDAAR;AAwCA,SAAOP,IAAP;AACD","sourcesContent":["\nconst createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateBodyFunction;\nmodule.exports.generateCreateBodyFunctionBody = generateCreateBodyFunctionBody;\n\nfunction generateCreateBodyFunction(dimension, debugSetters) {\n  let code = generateCreateBodyFunctionBody(dimension, debugSetters);\n  let {Body} = (new Function(code))();\n  return Body;\n}\n\nfunction generateCreateBodyFunctionBody(dimension, debugSetters) {\n  let pattern = createPatternBuilder(dimension);\n  let variableList = pattern('{var}', {join: ', '});\n  let setters = '';\n  if (debugSetters) {\n    setters = `${pattern(\"\\n\\\n   var v{var};\\n\\\nObject.defineProperty(this, '{var}', {\\n\\\n  set: function(v) { \\n\\\n    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\\n\\\n    v{var} = v; \\n\\\n  },\\n\\\n  get: function() { return v{var}; }\\n\\\n});\")}`;\n  }\n\n  let code = `\nfunction Vector(${variableList}) {\n${setters}\n  if (typeof arguments[0] === 'object') {\n    // could be another vector\n    let v = arguments[0];\n    ${pattern('if (!Number.isFinite(v.{var})) throw new Error(\"Expected value is not a finite number at Vector constructor ({var})\");', {indent: 4})}\n    ${pattern('this.{var} = v.{var};', {indent: 4})}\n  } else {\n    ${pattern('this.{var} = typeof {var} === \"number\" ? {var} : 0;', {indent: 4})}\n  }\n}\n\nVector.prototype.reset = function () {\n  ${pattern('this.{var} = ', {join: ''})}0;\n};\n\nfunction Body(${variableList}) {\n  this.isPinned = false;\n  this.pos = new Vector(${variableList});\n  this.force = new Vector();\n  this.velocity = new Vector();\n  this.mass = 1;\n\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.reset = function() {\n  this.force.reset();\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.setPosition = function (${variableList}) {\n  ${pattern('this.pos.{var} = {var} || 0;', {indent: 2})}\n};\n\nreturn {Body: Body, Vector: Vector};\n`\n  return code;\n}"]},"metadata":{},"sourceType":"script"}