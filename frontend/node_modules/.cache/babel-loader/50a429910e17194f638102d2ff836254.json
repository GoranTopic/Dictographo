{"ast":null,"code":"const createPatternBuilder = require('./createPatternBuilder');\n\nconst getVariableName = require('./getVariableName');\n\nmodule.exports = generateQuadTreeFunction;\nmodule.exports.generateQuadTreeFunctionBody = generateQuadTreeFunctionBody;\n\nfunction generateQuadTreeFunction(dimension) {\n  let code = generateQuadTreeFunctionBody(dimension);\n  return new Function(code)();\n}\n\nfunction generateQuadTreeFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n  let code = `\n${getInsertStackCode()}\n${getQuadNodeCode(dimension)}\n\nfunction createQuadTree(options, random) {\n  options = options || {};\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\n\n  var gravity = options.gravity;\n  var updateQueue = [];\n  var insertStack = new InsertStack();\n  var theta = options.theta;\n\n  var nodesCache = [];\n  var currentInCache = 0;\n  var root = newNode();\n\n  return {\n    insertBodies: insertBodies,\n\n    /**\n     * Gets root node if it is present\n     */\n    getRoot: function() {\n      return root;\n    },\n\n    updateBodyForce: update,\n\n    options: function(newOptions) {\n      if (newOptions) {\n        if (typeof newOptions.gravity === 'number') {\n          gravity = newOptions.gravity;\n        }\n        if (typeof newOptions.theta === 'number') {\n          theta = newOptions.theta;\n        }\n\n        return this;\n      }\n\n      return {\n        gravity: gravity,\n        theta: theta\n      };\n    }\n  };\n\n  function newNode() {\n    // To avoid pressure on GC we reuse nodes.\n    var node = nodesCache[currentInCache];\n    if (node) {\n${assignQuads('      node.')}\n      node.body = null;\n      node.mass = ${pattern('node.mass_{var} = ', {\n    join: ''\n  })}0;\n      ${pattern('node.min_{var} = node.max_{var} = ', {\n    join: ''\n  })}0;\n    } else {\n      node = new QuadNode();\n      nodesCache[currentInCache] = node;\n    }\n\n    ++currentInCache;\n    return node;\n  }\n\n  function update(sourceBody) {\n    var queue = updateQueue;\n    var v;\n    ${pattern('var d{var};', {\n    indent: 4\n  })}\n    var r; \n    ${pattern('var f{var} = 0;', {\n    indent: 4\n  })}\n    var queueLength = 1;\n    var shiftIdx = 0;\n    var pushIdx = 1;\n\n    queue[0] = root;\n\n    while (queueLength) {\n      var node = queue[shiftIdx];\n      var body = node.body;\n\n      queueLength -= 1;\n      shiftIdx += 1;\n      var differentBody = (body !== sourceBody);\n      if (body && differentBody) {\n        // If the current node is a leaf node (and it is not source body),\n        // calculate the force exerted by the current node on body, and add this\n        // amount to body's net force.\n        ${pattern('d{var} = body.pos.{var} - sourceBody.pos.{var};', {\n    indent: 8\n  })}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {\n    join: ' + '\n  })});\n\n        if (r === 0) {\n          // Poor man's protection against zero distance.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {\n    indent: 10\n  })}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {\n    join: ' + '\n  })});\n        }\n\n        // This is standard gravitation force calculation but we divide\n        // by r^3 to save two operations when normalizing force vector.\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\n        ${pattern('f{var} += v * d{var};', {\n    indent: 8\n  })}\n      } else if (differentBody) {\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\n        // represented by the internal node, and r is the distance between the body\n        // and the node's center-of-mass\n        ${pattern('d{var} = node.mass_{var} / node.mass - sourceBody.pos.{var};', {\n    indent: 8\n  })}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {\n    join: ' + '\n  })});\n\n        if (r === 0) {\n          // Sorry about code duplication. I don't want to create many functions\n          // right away. Just want to see performance first.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {\n    indent: 10\n  })}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {\n    join: ' + '\n  })});\n        }\n        // If s / r < Î¸, treat this internal node as a single body, and calculate the\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\n        if ((node.max_${getVariableName(0)} - node.min_${getVariableName(0)}) / r < theta) {\n          // in the if statement above we consider node's width only\n          // because the region was made into square during tree creation.\n          // Thus there is no difference between using width or height.\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\n          ${pattern('f{var} += v * d{var};', {\n    indent: 10\n  })}\n        } else {\n          // Otherwise, run the procedure recursively on each of the current node's children.\n\n          // I intentionally unfolded this loop, to save several CPU cycles.\n${runRecursiveOnChildren()}\n        }\n      }\n    }\n\n    ${pattern('sourceBody.force.{var} += f{var};', {\n    indent: 4\n  })}\n  }\n\n  function insertBodies(bodies) {\n    ${pattern('var {var}min = Number.MAX_VALUE;', {\n    indent: 4\n  })}\n    ${pattern('var {var}max = Number.MIN_VALUE;', {\n    indent: 4\n  })}\n    var i = bodies.length;\n\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\n    while (i--) {\n      var pos = bodies[i].pos;\n      ${pattern('if (pos.{var} < {var}min) {var}min = pos.{var};', {\n    indent: 6\n  })}\n      ${pattern('if (pos.{var} > {var}max) {var}max = pos.{var};', {\n    indent: 6\n  })}\n    }\n\n    // Makes the bounds square.\n    var maxSideLength = -Infinity;\n    ${pattern('if ({var}max - {var}min > maxSideLength) maxSideLength = {var}max - {var}min ;', {\n    indent: 4\n  })}\n\n    currentInCache = 0;\n    root = newNode();\n    ${pattern('root.min_{var} = {var}min;', {\n    indent: 4\n  })}\n    ${pattern('root.max_{var} = {var}min + maxSideLength;', {\n    indent: 4\n  })}\n\n    i = bodies.length - 1;\n    if (i >= 0) {\n      root.body = bodies[i];\n    }\n    while (i--) {\n      insert(bodies[i], root);\n    }\n  }\n\n  function insert(newBody) {\n    insertStack.reset();\n    insertStack.push(root, newBody);\n\n    while (!insertStack.isEmpty()) {\n      var stackItem = insertStack.pop();\n      var node = stackItem.node;\n      var body = stackItem.body;\n\n      if (!node.body) {\n        // This is internal node. Update the total mass of the node and center-of-mass.\n        ${pattern('var {var} = body.pos.{var};', {\n    indent: 8\n  })}\n        node.mass += body.mass;\n        ${pattern('node.mass_{var} += body.mass * {var};', {\n    indent: 8\n  })}\n\n        // Recursively insert the body in the appropriate quadrant.\n        // But first find the appropriate quadrant.\n        var quadIdx = 0; // Assume we are in the 0's quad.\n        ${pattern('var min_{var} = node.min_{var};', {\n    indent: 8\n  })}\n        ${pattern('var max_{var} = (min_{var} + node.max_{var}) / 2;', {\n    indent: 8\n  })}\n\n${assignInsertionQuadIndex(8)}\n\n        var child = getChild(node, quadIdx);\n\n        if (!child) {\n          // The node is internal but this quadrant is not taken. Add\n          // subnode to it.\n          child = newNode();\n          ${pattern('child.min_{var} = min_{var};', {\n    indent: 10\n  })}\n          ${pattern('child.max_{var} = max_{var};', {\n    indent: 10\n  })}\n          child.body = body;\n\n          setChild(node, quadIdx, child);\n        } else {\n          // continue searching in this quadrant.\n          insertStack.push(child, body);\n        }\n      } else {\n        // We are trying to add to the leaf node.\n        // We have to convert current leaf into internal node\n        // and continue adding two nodes.\n        var oldBody = node.body;\n        node.body = null; // internal nodes do not cary bodies\n\n        if (isSamePosition(oldBody.pos, body.pos)) {\n          // Prevent infinite subdivision by bumping one node\n          // anywhere in this quadrant\n          var retriesCount = 3;\n          do {\n            var offset = random.nextDouble();\n            ${pattern('var d{var} = (node.max_{var} - node.min_{var}) * offset;', {\n    indent: 12\n  })}\n\n            ${pattern('oldBody.pos.{var} = node.min_{var} + d{var};', {\n    indent: 12\n  })}\n            retriesCount -= 1;\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\n\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\n            // This is very bad, we ran out of precision.\n            // if we do not return from the method we'll get into\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\n            // Next layout iteration should get larger bounding box in the first step and fix this\n            return;\n          }\n        }\n        // Next iteration should subdivide node further.\n        insertStack.push(node, oldBody);\n        insertStack.push(node, body);\n      }\n    }\n  }\n}\n\nfunction getChild(node, idx) {\n${getChildBody()}\n  return null;\n}\n\nfunction setChild(node, idx, child) {\n${setChildBody()}\n}\n\nfunction isSamePosition(point1, point2) {\n  ${pattern('var d{var} = Math.abs(point1.{var} - point2.{var});', {\n    indent: 2\n  })}\n\n  return ${pattern('d{var} < 1e-8', {\n    join: ' && '\n  })};\n}\n\nreturn createQuadTree;\n\n`;\n  return code;\n\n  function getChildBody() {\n    let code = [];\n\n    for (let i = 0; i < quadCount; ++i) {\n      code.push(`  if (idx === ${i}) return node.quad${i};`);\n    }\n\n    return code.join('\\n'); // if (idx === 0) return node.quad0;\n    // if (idx === 1) return node.quad1;\n    // if (idx === 2) return node.quad2;\n    // if (idx === 3) return node.quad3;\n  }\n\n  function setChildBody() {\n    let code = [];\n\n    for (let i = 0; i < quadCount; ++i) {\n      let prefix = i === 0 ? '  ' : '  else ';\n      code.push(`${prefix}if (idx === ${i}) node.quad${i} = child;`);\n    }\n\n    return code.join('\\n'); // if (idx === 0) node.quad0 = child;\n    // else if (idx === 1) node.quad1 = child;\n    // else if (idx === 2) node.quad2 = child;\n    // else if (idx === 3) node.quad3 = child;\n  }\n\n  function assignInsertionQuadIndex(indentCount) {\n    let code = [];\n    let indent = Array(indentCount + 1).join(' ');\n\n    for (let i = 0; i < dimension; ++i) {\n      code.push(indent + `if (${getVariableName(i)} > max_${getVariableName(i)}) {`);\n      code.push(indent + `  quadIdx = quadIdx + ${Math.pow(2, i)};`);\n      code.push(indent + `  min_${getVariableName(i)} = max_${getVariableName(i)};`);\n      code.push(indent + `  max_${getVariableName(i)} = node.max_${getVariableName(i)};`);\n      code.push(indent + `}`);\n    }\n\n    return code.join('\\n'); // if (x > max_x) { // somewhere in the eastern part.\n    //   quadIdx = quadIdx + 1;\n    //   left = right;\n    //   right = node.right;\n    // }\n  }\n\n  function runRecursiveOnChildren() {\n    let indent = Array(11).join(' ');\n    let code = [];\n\n    for (let i = 0; i < quadCount; ++i) {\n      code.push(indent + `if (node.quad${i}) {`);\n      code.push(indent + `  queue[pushIdx] = node.quad${i};`);\n      code.push(indent + `  queueLength += 1;`);\n      code.push(indent + `  pushIdx += 1;`);\n      code.push(indent + `}`);\n    }\n\n    return code.join('\\n'); // if (node.quad0) {\n    //   queue[pushIdx] = node.quad0;\n    //   queueLength += 1;\n    //   pushIdx += 1;\n    // }\n  }\n\n  function getQuadNodeCode(dimension) {\n    let code = `\nfunction QuadNode() {\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\n  // contain bodies:\n  this.body = null;\n\n  // Child nodes are stored in quads. Each quad is presented by number:\n  // 0 | 1\n  // -----\n  // 2 | 3\n${assignQuads('  this.')}\n\n  // Total mass of current node\n  this.mass = 0;\n\n  // Center of mass coordinates\n  ${pattern('this.mass_{var} = 0;', {\n      indent: 2\n    })}\n\n  // bounding box coordinates\n  ${pattern('this.min_{var} = 0;', {\n      indent: 2\n    })}\n  ${pattern('this.max_{var} = 0;', {\n      indent: 2\n    })}\n}\n`;\n    return code;\n  }\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`);\n    }\n\n    return quads.join('\\n');\n  }\n}\n\nfunction getInsertStackCode() {\n  return `\n/**\n * Our implementation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressure: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n`;\n}","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js"],"names":["createPatternBuilder","require","getVariableName","module","exports","generateQuadTreeFunction","generateQuadTreeFunctionBody","dimension","code","Function","pattern","quadCount","Math","pow","getInsertStackCode","getQuadNodeCode","assignQuads","join","indent","runRecursiveOnChildren","assignInsertionQuadIndex","getChildBody","setChildBody","i","push","prefix","indentCount","Array","quads"],"mappings":"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","sourcesContent":["const createPatternBuilder = require('./createPatternBuilder');\nconst getVariableName = require('./getVariableName');\n\nmodule.exports = generateQuadTreeFunction;\nmodule.exports.generateQuadTreeFunctionBody = generateQuadTreeFunctionBody;\n\nfunction generateQuadTreeFunction(dimension) {\n  let code = generateQuadTreeFunctionBody(dimension);\n  return (new Function(code))();\n}\n\nfunction generateQuadTreeFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n\n  let code = `\n${getInsertStackCode()}\n${getQuadNodeCode(dimension)}\n\nfunction createQuadTree(options, random) {\n  options = options || {};\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\n\n  var gravity = options.gravity;\n  var updateQueue = [];\n  var insertStack = new InsertStack();\n  var theta = options.theta;\n\n  var nodesCache = [];\n  var currentInCache = 0;\n  var root = newNode();\n\n  return {\n    insertBodies: insertBodies,\n\n    /**\n     * Gets root node if it is present\n     */\n    getRoot: function() {\n      return root;\n    },\n\n    updateBodyForce: update,\n\n    options: function(newOptions) {\n      if (newOptions) {\n        if (typeof newOptions.gravity === 'number') {\n          gravity = newOptions.gravity;\n        }\n        if (typeof newOptions.theta === 'number') {\n          theta = newOptions.theta;\n        }\n\n        return this;\n      }\n\n      return {\n        gravity: gravity,\n        theta: theta\n      };\n    }\n  };\n\n  function newNode() {\n    // To avoid pressure on GC we reuse nodes.\n    var node = nodesCache[currentInCache];\n    if (node) {\n${assignQuads('      node.')}\n      node.body = null;\n      node.mass = ${pattern('node.mass_{var} = ', {join: ''})}0;\n      ${pattern('node.min_{var} = node.max_{var} = ', {join: ''})}0;\n    } else {\n      node = new QuadNode();\n      nodesCache[currentInCache] = node;\n    }\n\n    ++currentInCache;\n    return node;\n  }\n\n  function update(sourceBody) {\n    var queue = updateQueue;\n    var v;\n    ${pattern('var d{var};', {indent: 4})}\n    var r; \n    ${pattern('var f{var} = 0;', {indent: 4})}\n    var queueLength = 1;\n    var shiftIdx = 0;\n    var pushIdx = 1;\n\n    queue[0] = root;\n\n    while (queueLength) {\n      var node = queue[shiftIdx];\n      var body = node.body;\n\n      queueLength -= 1;\n      shiftIdx += 1;\n      var differentBody = (body !== sourceBody);\n      if (body && differentBody) {\n        // If the current node is a leaf node (and it is not source body),\n        // calculate the force exerted by the current node on body, and add this\n        // amount to body's net force.\n        ${pattern('d{var} = body.pos.{var} - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Poor man's protection against zero distance.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n\n        // This is standard gravitation force calculation but we divide\n        // by r^3 to save two operations when normalizing force vector.\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\n        ${pattern('f{var} += v * d{var};', {indent: 8})}\n      } else if (differentBody) {\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\n        // represented by the internal node, and r is the distance between the body\n        // and the node's center-of-mass\n        ${pattern('d{var} = node.mass_{var} / node.mass - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Sorry about code duplication. I don't want to create many functions\n          // right away. Just want to see performance first.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n        // If s / r < Î¸, treat this internal node as a single body, and calculate the\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\n        if ((node.max_${getVariableName(0)} - node.min_${getVariableName(0)}) / r < theta) {\n          // in the if statement above we consider node's width only\n          // because the region was made into square during tree creation.\n          // Thus there is no difference between using width or height.\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\n          ${pattern('f{var} += v * d{var};', {indent: 10})}\n        } else {\n          // Otherwise, run the procedure recursively on each of the current node's children.\n\n          // I intentionally unfolded this loop, to save several CPU cycles.\n${runRecursiveOnChildren()}\n        }\n      }\n    }\n\n    ${pattern('sourceBody.force.{var} += f{var};', {indent: 4})}\n  }\n\n  function insertBodies(bodies) {\n    ${pattern('var {var}min = Number.MAX_VALUE;', {indent: 4})}\n    ${pattern('var {var}max = Number.MIN_VALUE;', {indent: 4})}\n    var i = bodies.length;\n\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\n    while (i--) {\n      var pos = bodies[i].pos;\n      ${pattern('if (pos.{var} < {var}min) {var}min = pos.{var};', {indent: 6})}\n      ${pattern('if (pos.{var} > {var}max) {var}max = pos.{var};', {indent: 6})}\n    }\n\n    // Makes the bounds square.\n    var maxSideLength = -Infinity;\n    ${pattern('if ({var}max - {var}min > maxSideLength) maxSideLength = {var}max - {var}min ;', {indent: 4})}\n\n    currentInCache = 0;\n    root = newNode();\n    ${pattern('root.min_{var} = {var}min;', {indent: 4})}\n    ${pattern('root.max_{var} = {var}min + maxSideLength;', {indent: 4})}\n\n    i = bodies.length - 1;\n    if (i >= 0) {\n      root.body = bodies[i];\n    }\n    while (i--) {\n      insert(bodies[i], root);\n    }\n  }\n\n  function insert(newBody) {\n    insertStack.reset();\n    insertStack.push(root, newBody);\n\n    while (!insertStack.isEmpty()) {\n      var stackItem = insertStack.pop();\n      var node = stackItem.node;\n      var body = stackItem.body;\n\n      if (!node.body) {\n        // This is internal node. Update the total mass of the node and center-of-mass.\n        ${pattern('var {var} = body.pos.{var};', {indent: 8})}\n        node.mass += body.mass;\n        ${pattern('node.mass_{var} += body.mass * {var};', {indent: 8})}\n\n        // Recursively insert the body in the appropriate quadrant.\n        // But first find the appropriate quadrant.\n        var quadIdx = 0; // Assume we are in the 0's quad.\n        ${pattern('var min_{var} = node.min_{var};', {indent: 8})}\n        ${pattern('var max_{var} = (min_{var} + node.max_{var}) / 2;', {indent: 8})}\n\n${assignInsertionQuadIndex(8)}\n\n        var child = getChild(node, quadIdx);\n\n        if (!child) {\n          // The node is internal but this quadrant is not taken. Add\n          // subnode to it.\n          child = newNode();\n          ${pattern('child.min_{var} = min_{var};', {indent: 10})}\n          ${pattern('child.max_{var} = max_{var};', {indent: 10})}\n          child.body = body;\n\n          setChild(node, quadIdx, child);\n        } else {\n          // continue searching in this quadrant.\n          insertStack.push(child, body);\n        }\n      } else {\n        // We are trying to add to the leaf node.\n        // We have to convert current leaf into internal node\n        // and continue adding two nodes.\n        var oldBody = node.body;\n        node.body = null; // internal nodes do not cary bodies\n\n        if (isSamePosition(oldBody.pos, body.pos)) {\n          // Prevent infinite subdivision by bumping one node\n          // anywhere in this quadrant\n          var retriesCount = 3;\n          do {\n            var offset = random.nextDouble();\n            ${pattern('var d{var} = (node.max_{var} - node.min_{var}) * offset;', {indent: 12})}\n\n            ${pattern('oldBody.pos.{var} = node.min_{var} + d{var};', {indent: 12})}\n            retriesCount -= 1;\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\n\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\n            // This is very bad, we ran out of precision.\n            // if we do not return from the method we'll get into\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\n            // Next layout iteration should get larger bounding box in the first step and fix this\n            return;\n          }\n        }\n        // Next iteration should subdivide node further.\n        insertStack.push(node, oldBody);\n        insertStack.push(node, body);\n      }\n    }\n  }\n}\n\nfunction getChild(node, idx) {\n${getChildBody()}\n  return null;\n}\n\nfunction setChild(node, idx, child) {\n${setChildBody()}\n}\n\nfunction isSamePosition(point1, point2) {\n  ${pattern('var d{var} = Math.abs(point1.{var} - point2.{var});', {indent: 2})}\n\n  return ${pattern('d{var} < 1e-8', {join: ' && '})};\n}\n\nreturn createQuadTree;\n\n`\n  return code;\n\n  function getChildBody() {\n    let code = [];\n    for (let i = 0; i < quadCount; ++i) {\n      code.push(`  if (idx === ${i}) return node.quad${i};`);\n    }\n\n    return code.join('\\n');\n    // if (idx === 0) return node.quad0;\n    // if (idx === 1) return node.quad1;\n    // if (idx === 2) return node.quad2;\n    // if (idx === 3) return node.quad3;\n  }\n\n  function setChildBody() {\n    let code = [];\n    for (let i = 0; i < quadCount; ++i) {\n      let prefix = (i === 0) ? '  ' : '  else ';\n      code.push(`${prefix}if (idx === ${i}) node.quad${i} = child;`);\n    }\n\n    return code.join('\\n');\n    // if (idx === 0) node.quad0 = child;\n    // else if (idx === 1) node.quad1 = child;\n    // else if (idx === 2) node.quad2 = child;\n    // else if (idx === 3) node.quad3 = child;\n  }\n\n  function assignInsertionQuadIndex(indentCount) {\n    let code = [];\n    let indent = Array(indentCount + 1).join(' ');\n    for (let i = 0; i < dimension; ++i) {\n      code.push(indent + `if (${getVariableName(i)} > max_${getVariableName(i)}) {`)\n      code.push(indent + `  quadIdx = quadIdx + ${Math.pow(2, i)};`);\n      code.push(indent + `  min_${getVariableName(i)} = max_${getVariableName(i)};`);\n      code.push(indent + `  max_${getVariableName(i)} = node.max_${getVariableName(i)};`);\n      code.push(indent + `}`)\n    }\n    return code.join('\\n');\n    // if (x > max_x) { // somewhere in the eastern part.\n    //   quadIdx = quadIdx + 1;\n    //   left = right;\n    //   right = node.right;\n    // }\n  }\n\n  function runRecursiveOnChildren() {\n    let indent = Array(11).join(' ');\n    let code = [];\n    for (let i = 0; i < quadCount; ++i) {\n      code.push(indent + `if (node.quad${i}) {`)\n      code.push(indent + `  queue[pushIdx] = node.quad${i};`)\n      code.push(indent + `  queueLength += 1;`)\n      code.push(indent + `  pushIdx += 1;`)\n      code.push(indent + `}`)\n    }\n    return code.join('\\n');\n    // if (node.quad0) {\n    //   queue[pushIdx] = node.quad0;\n    //   queueLength += 1;\n    //   pushIdx += 1;\n    // }\n  }\n\n\n  function getQuadNodeCode(dimension) {\n    let code = `\nfunction QuadNode() {\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\n  // contain bodies:\n  this.body = null;\n\n  // Child nodes are stored in quads. Each quad is presented by number:\n  // 0 | 1\n  // -----\n  // 2 | 3\n${assignQuads('  this.')}\n\n  // Total mass of current node\n  this.mass = 0;\n\n  // Center of mass coordinates\n  ${pattern('this.mass_{var} = 0;', {indent: 2})}\n\n  // bounding box coordinates\n  ${pattern('this.min_{var} = 0;', {indent: 2})}\n  ${pattern('this.max_{var} = 0;', {indent: 2})}\n}\n`\n    return code;\n  }\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`)\n    }\n    return quads.join('\\n')\n  }\n}\n\n\nfunction getInsertStackCode() {\n  return `\n/**\n * Our implementation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressure: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n`\n}"]},"metadata":{},"sourceType":"script"}