{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictio-grapho/frontend/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport { genRandomNode, genGrapNodes, genPath } from \"./RandomGenerator\";\nimport myConfig from \"./myConfig\";\nconst API_ENDPOINT = 'http://127.0.0.1:8000/api/v1/'; // graph payload (with minimalist structure)\n\nconst initial_data = {\n  nodes: [{\n    id: \"zine\"\n  }, {\n    id: \"cool\"\n  }, {\n    id: \"world\"\n  }],\n  links: [{\n    source: \"zine\",\n    target: \"cool\"\n  }, {\n    source: \"zine\",\n    target: \"world\"\n  }],\n  isError: false,\n  isLoading: true,\n  searchTerm: '',\n  DestinationTerm: ''\n};\n\nfunction App() {\n  // make reducer for the words data and internal state \n  const dataReducer = (state, action) => {\n    switch (action.type) {\n      case 'SET_NEW_NODE':\n        console.log(action);\n        return { ...state,\n          nodes: [...state.nodes, action.payload.node],\n          links: [...state.links, ...action.payload.links]\n        };\n\n      case 'APPEND_NODES':\n        return { ...state,\n          nodes: [...state.nodes, ...action.payload.nodes],\n          links: [...state.links, ...action.payload.links]\n        };\n\n      case 'RESET_NODE':\n        return { ...state,\n          nodes: [action.payload.node],\n          links: []\n        };\n\n      case 'SET_FETCH_FAILED':\n        return { ...state,\n          isError: true\n        };\n\n      default:\n        throw new Error();\n    }\n  }; // define dispatcher for the Internal data \n\n\n  const [data, dispatchData] = React.useReducer(dataReducer, initial_data);\n\n  const reuestNodeAsync = word => {\n    fetch(API_ENDPOINT + word).then(result => result.json()).then(result => {\n      console.log(result);\n      dispatchNodesAsync(result);\n    }).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  }; // get surounding nodes \n  // for synonym in node, request_node(synonym)\n  // add Async word\n\n\n  const getWordAsync = (ms = 0) => new Promise((resolve, rejec) => setTimeout(() => resolve(genRandomNode(data.nodes)), ms)); // get nodes Async\n\n\n  const getNodesAsync = word => new Promise((resolve, reject) => setTimeout(() => resolve(genGrapNodes(word, 0)), 200)); // get nodes Async\n\n\n  const getPathAsync = (word, dest) => new Promise((resolve, reject) => setTimeout(() => resolve(genPath(word, dest)), 200)); // add a random nodes\n\n\n  const addNodesAsync = () => {\n    getWordAsync().then(result => setTimeout(() => dispatchData({\n      type: 'SET_NEW_NODE',\n      payload: result\n    }), 200)).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  };\n\n  const dispatchNodeOneByOne = nodes => {\n    /* append array of nodes with a waiting time in between them so that they flow */\n    if (Array.isArray(nodes)) {\n      // if passed is an array\n      for (let i in nodes) {\n        console.log(\"enterned in order\");\n        console.log(nodes[i]);\n        setTimeout(() => dispatchData({\n          type: 'SET_NEW_NODE',\n          payload: nodes[i]\n        }), 200 * i);\n      }\n    } else {\n      // if it only has one node\n      dispatchData({\n        type: 'SET_NEW_NODE',\n        payload: nodes\n      });\n    }\n  }; // append nodes in a path \n\n\n  async function appendPathAsync(word, dest) {\n    getPathAsync(word, dest).then(result => dispatchNodesAsync(result)).catch(() => dispatchData({\n      type: 'SET_FETCH_FAILED'\n    }));\n  } // fuction for make a persitant state\n\n\n  const useSemiPersistentSate = key => {\n    const [value, setValue] = React.useState(localStorage.getItem(key) || '');\n    React.useEffect(key => {\n      localStorage.setItem(key, value);\n    }, [value]);\n    return [value, setValue];\n  }; // get state fuctions\n\n\n  const [searchTerm, setSearchTerm] = useSemiPersistentSate('search'); // get state fuctions\n\n  const [destinationTerm, setDestinationTerm] = useSemiPersistentSate('destination'); // handle the change by seting the state variable to \n\n  const handleSearchChange = change => setSearchTerm(change.target.value); // handle the change by seting the state variable to \n\n\n  const handleDestinationChange = change => setDestinationTerm(change.target.value); // handle submit search button\n\n\n  const handleSearchSubmit = () => {\n    dispatchData({\n      type: 'RESET_NODE',\n      payload: {\n        node: {\n          id: searchTerm\n        }\n      }\n    });\n    appendNodesAsync(searchTerm);\n  }; // get node info\n  // handle path button\n\n\n  const handlePathSubmit = () => {\n    //  reset the node?\n    dispatchData({\n      type: 'RESET_NODE',\n      payload: {\n        node: {\n          id: searchTerm\n        }\n      }\n    });\n    appendPathAsync(searchTerm, destinationTerm);\n  };\n\n  const onClickNode = function (nodeId) {\n    console.log(`clicked node ${nodeId}`);\n    appendNodesAsync(nodeId);\n  };\n\n  const onRightClickNode = function (event, nodeId) {\n    window.alert(`Right clicked node ${nodeId}`);\n  };\n\n  const onClickLink = function (source, target) {\n    window.alert(`Clicked link between ${source} and ${target}`);\n  };\n\n  const onRightClickLink = function (event, source, target) {\n    window.alert(`Right clicked link between ${source} and ${target}`);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputWithLabel, {\n    id: \"search\",\n    type: \"text\",\n    isFocuse: true,\n    value: searchTerm,\n    onInputChange: handleSearchChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, \"Search:\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disable: !searchTerm,\n    onClick: handleSearchSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, \"Search\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addNodesAsync,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, \"Add random Nodes\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputWithLabel, {\n    id: \"destination\",\n    type: \"text\",\n    value: destinationTerm,\n    onInputChange: handleDestinationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, \"Destination:\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disable: !destinationTerm,\n    onClick: handlePathSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \"Get path\")), /*#__PURE__*/React.createElement(Graph, {\n    id: \"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n    ,\n    data: data,\n    config: myConfig,\n    onClickNode: onClickNode,\n    onRightClickNode: onRightClickNode,\n    onClickLink: onClickLink,\n    onRightClickLink: onRightClickLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }));\n}\n\nconst InputWithLabel = ({\n  id,\n  type,\n  value,\n  onInputChange,\n  isFocused,\n  children\n}) => {\n  /* A component with the Input and a Label */\n  // Define an input ref for passing to input component\n  const inputRef = React.useRef(); // set up a side effect it is updates if the focus changes\n\n  React.useEffect(() => {\n    if (isFocused && inputRef.current) inputRef.current.focused();\n  }, [isFocused]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, \" \", children, \" \"), \"\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n    id: id,\n    ref: inputRef,\n    type: type,\n    value: value,\n    onChange: onInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/telix/dictio-grapho/frontend/src/App.js"],"names":["React","Graph","genRandomNode","genGrapNodes","genPath","myConfig","API_ENDPOINT","initial_data","nodes","id","links","source","target","isError","isLoading","searchTerm","DestinationTerm","App","dataReducer","state","action","type","console","log","payload","node","Error","data","dispatchData","useReducer","reuestNodeAsync","word","fetch","then","result","json","dispatchNodesAsync","catch","getWordAsync","ms","Promise","resolve","rejec","setTimeout","getNodesAsync","reject","getPathAsync","dest","addNodesAsync","dispatchNodeOneByOne","Array","isArray","i","appendPathAsync","useSemiPersistentSate","key","value","setValue","useState","localStorage","getItem","useEffect","setItem","setSearchTerm","destinationTerm","setDestinationTerm","handleSearchChange","change","handleDestinationChange","handleSearchSubmit","appendNodesAsync","handlePathSubmit","onClickNode","nodeId","onRightClickNode","event","window","alert","onClickLink","onRightClickLink","InputWithLabel","onInputChange","isFocused","children","inputRef","useRef","current","focused"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport { genRandomNode, genGrapNodes, genPath } from \"./RandomGenerator\";\nimport  myConfig  from \"./myConfig\";\n\nconst API_ENDPOINT = 'http://127.0.0.1:8000/api/v1/'\n\n// graph payload (with minimalist structure)\nconst initial_data = {\n\t\tnodes: [{ id: \"zine\", }, { id: \"cool\" }, { id: \"world\" }],\n\t\tlinks: [\n\t\t\t\t{ source: \"zine\", target: \"cool\"  },\n\t\t\t\t{ source: \"zine\", target: \"world\" },\n\t\t],\n\t\tisError: false,\n\t\tisLoading: true,\n\t\tsearchTerm: '',\n\t\tDestinationTerm: '',\n};\n\n\n\nfunction App() {\n\n\t\t// make reducer for the words data and internal state \n\t\tconst dataReducer = (state, action) =>{\n\t\t\t\tswitch (action.type){\n\t\t\t\t\t\tcase 'SET_NEW_NODE':\n\t\t\t\t\t\t\t\tconsole.log(action)\n\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t...state, \n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, action.payload.node],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'APPEND_NODES':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tnodes: [ ...state.nodes, ...action.payload.nodes ],\n\t\t\t\t\t\t\t\t\t\tlinks: [ ...state.links, ...action.payload.links ]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 'RESET_NODE':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tnodes: [  action.payload.node ],\n\t\t\t\t\t\t\t\t\t\tlinks: [],\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'SET_FETCH_FAILED':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t\t\tisError: true,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\t\t}\n\n\t\t// define dispatcher for the Internal data \n\t\tconst [data, dispatchData] = React.useReducer( dataReducer, initial_data );\n\n\t\tconst reuestNodeAsync = (word) => {\n\t\t\t\t\t\tfetch(API_ENDPOINT + word) \n\t\t\t\t\t\t.then( result => result.json())\n\t\t\t\t\t\t.then( result => { \n\t\t\t\t\t\t\t\tconsole.log(result)\n\t\t\t\t\t\t\t\tdispatchNodesAsync(result)\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch( () => dispatchData({ type: 'SET_FETCH_FAILED' }) );\n\t\t}\n\t\t\n\t\t// get surounding nodes \n\t\t\t// for synonym in node, request_node(synonym)\n\t\t\n\n\t\t\n\n\n\t\t// add Async word\n\t\tconst getWordAsync = (ms=0)=> new Promise((resolve, rejec) => setTimeout(() => resolve(genRandomNode(data.nodes)), ms));\n\n\t\t// get nodes Async\n\t\tconst getNodesAsync = (word)=> new Promise((resolve, reject)=> setTimeout(()=> resolve(genGrapNodes(word, 0)), 200));\n\n\t\t// get nodes Async\n\t\tconst getPathAsync =(word, dest)=> new Promise((resolve, reject)=> setTimeout(()=> resolve(genPath(word, dest)), 200));\n\n\t\t// add a random nodes\n\t\tconst addNodesAsync = () => { \n\t\t\t\tgetWordAsync()\n\t\t\t\t\t\t.then( (result) => setTimeout(() =>  dispatchData({ type: 'SET_NEW_NODE', payload: result }), 200))\n\t\t\t\t\t\t.catch( () => dispatchData({ type: 'SET_FETCH_FAILED' }) );\n\t\t}\n\n\n\n\t\tconst  dispatchNodeOneByOne = (nodes) => {\n\t\t\t\t/* append array of nodes with a waiting time in between them so that they flow */\n\t\t\t\tif(Array.isArray(nodes)){ // if passed is an array\n\t\t\t\t\t\tfor(let i in nodes){\n\t\t\t\t\t\t\t\tconsole.log(\"enterned in order\")\n\t\t\t\t\t\t\t\tconsole.log(nodes[i]);\n\t\t\t\t\t\t\t\tsetTimeout( () => dispatchData({ type: 'SET_NEW_NODE', payload: nodes[i] }), 200 * i );\n\t\t\t\t\t\t}\n\t\t\t\t}else{ // if it only has one node\n\t\t\t\t\t\tdispatchData({ type: 'SET_NEW_NODE', payload: nodes });\n\t\t\t\t}\n\t\t}\n\n\n\t\t// append nodes in a path \n\t\tasync function appendPathAsync(word, dest){ \n\t\t\t\tgetPathAsync(word, dest)\n\t\t\t\t\t\t.then(result => dispatchNodesAsync(result))\n\t\t\t\t\t\t.catch(() => dispatchData({ type: 'SET_FETCH_FAILED' }));\n\t\t}\n\n\t\t// fuction for make a persitant state\n\t\tconst useSemiPersistentSate = key => { \n\t\t\t\tconst [value, setValue] = React.useState( localStorage.getItem(key) || '');\n\t\t\t\tReact.useEffect( (key) => { localStorage.setItem(key, value)} , [value] );\n\t\t\t\treturn [value, setValue];\n\t\t}\n\n\t\t// get state fuctions\n\t\tconst [ searchTerm, setSearchTerm] = useSemiPersistentSate('search');\n\t\t// get state fuctions\n\t\tconst [ destinationTerm, setDestinationTerm] = useSemiPersistentSate('destination');\n\n\t\t// handle the change by seting the state variable to \n\t\tconst handleSearchChange = change => setSearchTerm(change.target.value);\n\t\t// handle the change by seting the state variable to \n\t\tconst handleDestinationChange = change => setDestinationTerm(change.target.value);\n\n\t\t// handle submit search button\n\t\tconst handleSearchSubmit = () => { \n\t\t\t\tdispatchData({ type: 'RESET_NODE', payload:{ node:{ id: searchTerm } } });\n\t\t\t\tappendNodesAsync(searchTerm);\n\t\t};\n\n\t\t// get node info\n\n\t\t// handle path button\n\t\tconst handlePathSubmit = () => { \n\t\t\t\t//  reset the node?\n\t\t\t\tdispatchData({ type: 'RESET_NODE', payload:{ node:{ id: searchTerm } } });\n\t\t\t\tappendPathAsync(searchTerm, destinationTerm);\n\t\t};\n\n\t\tconst onClickNode = function(nodeId) {\n\t\t\t\tconsole.log(`clicked node ${nodeId}`);\n\t\t\t\tappendNodesAsync(nodeId);\n\t\t};\n\n\t\tconst onRightClickNode = function(event, nodeId) {\n\t\t\t\twindow.alert(`Right clicked node ${nodeId}`);\n\t\t};\n\n\t\tconst onClickLink = function(source, target) {\n\t\t\t\twindow.alert(`Clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\tconst onRightClickLink = function(event, source, target) {\n\t\t\t\twindow.alert(`Right clicked link between ${source} and ${target}`);\n\t\t};\n\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<InputWithLabel id=\"search\" type=\"text\" isFocuse value={searchTerm} onInputChange={handleSearchChange}>\n\t\t\t\t\t\t\t\t\t\t<strong>Search:</strong>\n\t\t\t\t\t\t\t\t</InputWithLabel>\n\t\t\t\t\t\t\t\t<button type=\"button\" disable={!searchTerm} onClick={handleSearchSubmit}>\n\t\t\t\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button type=\"button\" onClick={addNodesAsync}>\n\t\t\t\t\t\t\t\t\t\tAdd random Nodes\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<InputWithLabel id=\"destination\" type=\"text\" value={destinationTerm} onInputChange={handleDestinationChange}>\n\t\t\t\t\t\t\t\t\t\t<strong>Destination:</strong>\n\t\t\t\t\t\t\t\t</InputWithLabel>\n\t\t\t\t\t\t\t\t<button type=\"button\" disable={!destinationTerm} onClick={handlePathSubmit}>\n\t\t\t\t\t\t\t\t\t\tGet path\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Graph\n\t\t\t\t\t\t\t\tid=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n\t\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\t\tconfig={myConfig}\n\t\t\t\t\t\t\t\tonClickNode={onClickNode}\n\t\t\t\t\t\t\t\tonRightClickNode={onRightClickNode}\n\t\t\t\t\t\t\t\tonClickLink={onClickLink}\n\t\t\t\t\t\t\t\tonRightClickLink={onRightClickLink}\n\t\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t);\n}\n\nconst InputWithLabel = ({ id, type, value, onInputChange, isFocused, children }) => {\n\t\t/* A component with the Input and a Label */\n\t\t// Define an input ref for passing to input component\n\t\tconst inputRef = React.useRef()\n\t\t// set up a side effect it is updates if the focus changes\n\t\tReact.useEffect(() => { if(isFocused && inputRef.current) inputRef.current.focused(); }, [isFocused])\n\t\treturn <>\n\t\t\t\t\t\t<label htmlFor={id}> {children} </label>\n\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t<input id={id} ref={inputRef} type={type} value={value} onChange={onInputChange}/>\n\t\t\t\t\t</>\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}