{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/App.js\";\nimport React from 'react';\nimport { colors } from \"./myConfig\";\nimport { initial_state, stateReducer } from './Components/State';\nimport CarouselContainer from './Components/Carousel';\nimport SideBarContainer from './Components/SideBar';\nimport GraphContainer from './Components/Graph';\nimport NavBarContainer from './Components/NavBar';\nimport AlertContainer from './Components/Alert';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSlidersH } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n  /* define dispatcher for the Internal data */\n  const [state, dispatchState] = React.useReducer(stateReducer, initial_state);\n\n  const processNode = node => {\n    /* process a node from the api into one for the dispatcher\n     * it changes title for id, for instance */\n    node['id'] = node.w_id;\n    node['key'] = node.w_id;\n    node['isSelected'] = false;\n    node['color'] = colors.node.default;\n    return node;\n  }; // get node with given node id from state \n\n\n  const getNode = nodeId => state.nodes.filter(node => node.id === nodeId)[0]; // attemps to return true id node is not in state\n\n\n  const isNotInState = nodeId => state.nodes.every(node => node.id !== nodeId);\n\n  const requestSynonymNodes = node => {\n    /* for every node request the adjecent node to it */\n    node.synonyms.forEach(synonym => {\n      if (isNotInState(synonym['synonym'])) {\n        fetch(API_ENDPOINT + synonym[\"synonym\"]).then(result => result.json()).then(result => processNode(result)).then(adjNode => {\n          dispatchState({\n            type: 'SET_NODE_LINK',\n            payload: {\n              node: adjNode,\n              link: {\n                source: node.id,\n                target: adjNode.id\n              }\n            }\n          });\n        }).catch(() => dispatchState({\n          type: 'SET_FETCH_FAILED'\n        }));\n      }\n    });\n  };\n\n  const isWordNotFound = result => {\n    if (result.detail === \"Not found.\") {\n      dispatchState({\n        type: 'SET_WORD_NOT_FOUND'\n      });\n      throw new Error(\"word not found\");\n    } else {\n      return result;\n    }\n  };\n\n  const onClickNode = function (nodeId) {\n    // console.log(`clicked node ${nodeId}`);\n    requestSynonymNodes(getNode(nodeId));\n    dispatchState({\n      type: 'SWITCH_SELECTED_NODE',\n      payload: nodeId\n    });\n  };\n  /*\n  const onMouseOverNode = function(nodeId) {\n  \t\tdispatchState({type:'SET_DEFINED_NODE', payload: nodeId})  \n  \t\t// need to fund a way to also run the default fuction \n  };*/\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBarContainer, {\n    state: state,\n    dispatchState: dispatchState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AlertContainer, {\n    state: state,\n    dispatchState: dispatchState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), state.isEmpty ? /*#__PURE__*/React.createElement(CarouselContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'inline'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SideBarContainer, {\n    state: state,\n    dispatchState: dispatchState,\n    onClickNode: onClickNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(GraphContainer, {\n    state: state,\n    onClickNode: onClickNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/App.js"],"names":["React","colors","initial_state","stateReducer","CarouselContainer","SideBarContainer","GraphContainer","NavBarContainer","AlertContainer","FontAwesomeIcon","faSlidersH","App","state","dispatchState","useReducer","processNode","node","w_id","default","getNode","nodeId","nodes","filter","id","isNotInState","every","requestSynonymNodes","synonyms","forEach","synonym","fetch","API_ENDPOINT","then","result","json","adjNode","type","payload","link","source","target","catch","isWordNotFound","detail","Error","onClickNode","isEmpty","display"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { colors }  from \"./myConfig\";\nimport { initial_state, stateReducer } from './Components/State';\nimport CarouselContainer from './Components/Carousel';\nimport SideBarContainer from './Components/SideBar';\nimport GraphContainer from './Components/Graph';\nimport NavBarContainer from './Components/NavBar';\nimport AlertContainer from './Components/Alert';\nimport './App.css';\nimport { FontAwesomeIcon  } from '@fortawesome/react-fontawesome'\nimport { faSlidersH } from '@fortawesome/free-solid-svg-icons'\n\nfunction App() {\n\t\t/* define dispatcher for the Internal data */\n\n\t\tconst [state, dispatchState] = React.useReducer( stateReducer, initial_state );\n\n\t\tconst processNode = (node) =>{\n\t\t\t\t/* process a node from the api into one for the dispatcher\n\t\t\t\t * it changes title for id, for instance */\n\t\t\t\tnode['id'] = node.w_id;\n\t\t\t\tnode['key'] = node.w_id;\n\t\t\t\tnode['isSelected'] = false;\n\t\t\t\tnode['color'] = colors.node.default;\n\t\t\t\treturn node\n\t\t}\n\n\t\t// get node with given node id from state \n\t\tconst getNode = (nodeId) => state.nodes.filter( node => node.id === nodeId )[0]\n\n\t\t// attemps to return true id node is not in state\n\t\tconst isNotInState = (nodeId) => state.nodes.every( node => node.id !== nodeId )\n\n\t\tconst requestSynonymNodes = (node) => {\n\t\t\t\t/* for every node request the adjecent node to it */\n\t\t\t\tnode.synonyms.forEach(synonym => {\n\t\t\t\t\t\tif(isNotInState(synonym['synonym'])){\n\t\t\t\t\t\t\t\tfetch(API_ENDPOINT + synonym[\"synonym\"])\n\t\t\t\t\t\t\t\t\t\t.then(result => result.json())\n\t\t\t\t\t\t\t\t\t\t.then(result => processNode(result))\n\t\t\t\t\t\t\t\t\t\t.then(adjNode => {\n\t\t\t\t\t\t\t\t\t\t\t\tdispatchState({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'SET_NODE_LINK', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpayload: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode: adjNode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlink: { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: node.id ,  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget: adjNode.id \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.catch(() => dispatchState({type:'SET_FETCH_FAILED'}))\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t}\n\n\t\tconst isWordNotFound = (result) =>{\n\t\t\t\tif( result.detail === \"Not found.\" ) {\n\t\t\t\t\t\tdispatchState({type: 'SET_WORD_NOT_FOUND'})\n\t\t\t\t\tthrow new Error(\"word not found\")\n\t\t\t\t}else{\n\t\t\t\t\t\treturn result\n\t\t\t\t}\n\t\t}\n\t\tconst onClickNode = function(nodeId) {\n\t\t\t\t// console.log(`clicked node ${nodeId}`);\n\t\t\t\trequestSynonymNodes(getNode(nodeId))\n\t\t\t\tdispatchState({type:'SWITCH_SELECTED_NODE', payload: nodeId})  \n\t\t};\n\n\t\t/*\n\t\tconst onMouseOverNode = function(nodeId) {\n\t\t\t\tdispatchState({type:'SET_DEFINED_NODE', payload: nodeId})  \n\t\t\t\t// need to fund a way to also run the default fuction \n\t\t};*/\n\n\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<NavBarContainer \n\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\tdispatchState={dispatchState} />\n\t\t\t\t\t\t<AlertContainer\n\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\tdispatchState={dispatchState} />\n\t\t\t\t\t\t{ state.isEmpty? \n\t\t\t\t\t\t\t\t<CarouselContainer/>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<div style={{display: 'inline',}}>\n\t\t\t\t\t\t\t\t\t\t<SideBarContainer \n\t\t\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t\t\t\tdispatchState={dispatchState}\n\t\t\t\t\t\t\t\t\t\t\t\tonClickNode={onClickNode}/>\n\t\t\t\t\t\t\t\t\t\t<GraphContainer \n\t\t\t\t\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\t\t\t\t\tonClickNode={onClickNode}/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}