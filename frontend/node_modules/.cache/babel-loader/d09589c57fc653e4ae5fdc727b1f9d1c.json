{"ast":null,"code":"var getVariableName = require('./getVariableName');\n\nmodule.exports = function createPatternBuilder(dimension) {\n  return pattern;\n\n  function pattern(template, config) {\n    var indent = config && config.indent || 0;\n    var join = config && config.join !== undefined ? config.join : '\\n';\n    var indentString = Array(indent + 1).join(' ');\n    var buffer = [];\n\n    for (var i = 0; i < dimension; ++i) {\n      var variableName = getVariableName(i);\n      var prefix = i === 0 ? '' : indentString;\n      buffer.push(prefix + template.replace(/{var}/g, variableName));\n    }\n\n    return buffer.join(join);\n  }\n};","map":{"version":3,"sources":["/home/telix/dictographo/frontend/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js"],"names":["getVariableName","require","module","exports","createPatternBuilder","dimension","pattern","template","config","indent","join","undefined","indentString","Array","buffer","i","variableName","prefix","push","replace"],"mappings":"AAAA,IAAMA,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA/B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,oBAAT,CAA8BC,SAA9B,EAAyC;AAExD,SAAOC,OAAP;;AAEA,WAASA,OAAT,CAAiBC,QAAjB,EAA2BC,MAA3B,EAAmC;AACjC,QAAIC,MAAM,GAAID,MAAM,IAAIA,MAAM,CAACC,MAAlB,IAA6B,CAA1C;AACA,QAAIC,IAAI,GAAIF,MAAM,IAAIA,MAAM,CAACE,IAAP,KAAgBC,SAA3B,GAAwCH,MAAM,CAACE,IAA/C,GAAsD,IAAjE;AACA,QAAIE,YAAY,GAAGC,KAAK,CAACJ,MAAM,GAAG,CAAV,CAAL,CAAkBC,IAAlB,CAAuB,GAAvB,CAAnB;AACA,QAAII,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,SAApB,EAA+B,EAAEU,CAAjC,EAAoC;AAClC,UAAIC,YAAY,GAAGhB,eAAe,CAACe,CAAD,CAAlC;AACA,UAAIE,MAAM,GAAIF,CAAC,KAAK,CAAP,GAAY,EAAZ,GAAiBH,YAA9B;AACAE,MAAAA,MAAM,CAACI,IAAP,CAAYD,MAAM,GAAGV,QAAQ,CAACY,OAAT,CAAiB,QAAjB,EAA2BH,YAA3B,CAArB;AACD;;AACD,WAAOF,MAAM,CAACJ,IAAP,CAAYA,IAAZ,CAAP;AACD;AACF,CAhBD","sourcesContent":["const getVariableName = require('./getVariableName');\n\nmodule.exports = function createPatternBuilder(dimension) {\n\n  return pattern;\n  \n  function pattern(template, config) {\n    let indent = (config && config.indent) || 0;\n    let join = (config && config.join !== undefined) ? config.join : '\\n';\n    let indentString = Array(indent + 1).join(' ');\n    let buffer = [];\n    for (let i = 0; i < dimension; ++i) {\n      let variableName = getVariableName(i);\n      let prefix = (i === 0) ? '' : indentString;\n      buffer.push(prefix + template.replace(/{var}/g, variableName));\n    }\n    return buffer.join(join)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}