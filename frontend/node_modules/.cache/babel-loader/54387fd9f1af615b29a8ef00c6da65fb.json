{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT } from \"../../myConfig\";\nimport useKeypress from '../../hooks/useKeypress';\nimport styles from './SearchSuggestion.css';\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/'; //add this to myconfig\n\nfunction SuggestionsContainer(props) {\n  /* tahek a child fro a input an add suggestions to it */\n  // handle the change by seting the state variable to \n  let state = props.state;\n  let dispatchState = props.dispatchState;\n  const [suggestions, setSuggestions] = useState([]);\n  const [selected, setSelected] = useState(1);\n  useKeypress('ArrowDown', () => selected < 0 ? setSelected(suggestions.length - 1) : setSelected(selected + 1));\n  useKeypress('ArrowUp', () => selected > suggestions.length - 1 ? setSelected(0) : setSelected(selected - 1));\n  useKeypress('Enter', () => {\n    conslo;\n\n    if (isWrittingWord) {\n      if (suggestions.length > 0) {\n        addToSearchTerm(suggestions[selected].word);\n      }\n    } else {\n      console.log(\"I ran\");\n      props.handleSearchSubmit(); //make import from navbar and do search\t\n    }\n  });\n\n  const isWrittingWord = () => {\n    /* uses the state to see if\n    \t\t* the user is in the middle of writting a word */\n    let len = state.searchTerm.length;\n    let last = state.searchTerm[state.searchTerm.length - 1];\n\n    if (len === 0) {\n      return false;\n    } else if (last === \" \") {\n      return false;\n    } else return true;\n  };\n\n  const filterSuggestions = suggestions => suggestions.filter(suggestion => /\\s/.test(suggestion));\n\n  const addToSearchTerm = word => {\n    /* append a given word to the seate searchTerm */\n    let wordList = state.searchTerm.split(\" \");\n    let len = wordList.length;\n    wordList[len - 1] = word; // set the last word as clicke word\n\n    dispatchState({\n      type: 'SET_SEARCH_TERM',\n      payload: wordList.join(\" \") + \" \"\n    });\n    setSuggestions([]); // reset suggestions\n\n    setSelected(0); // reset selected\n  };\n\n  const onClick = word => addToSearchTerm(word);\n\n  useEffect(() => {\n    /* query server for search suggestionsa\n     * and sets the  */\n    let wordList = state.searchTerm.split(\" \"); //split the search into words\n\n    let len = wordList.length; //get the length\n\n    let last = wordList[len - 1]; //fetch the last element \n\n    fetch(API_ENDPOINT + query_search + last).then(result => result.json()) //unpack suggestions\n    .then(result => {\n      console.log(result);\n      return result;\n    }) //unpack suggestions\n    .then(suggestions => filterSuggestions(suggestions)).then(suggestions => setSuggestions(suggestions)).catch(err => console.log(err));\n  }, [state.searchTerm, dispatchState]);\n\n  const SuggestionList = () => /*#__PURE__*/React.createElement(\"ul\", {\n    class: \"suggestions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, suggestions.map((suggestion, index) => {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      className: index === selected ? \"selected\" : null,\n      onClick: () => onClick(suggestion.word),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 19\n      }\n    }, suggestion.word);\n  }));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 14\n    }\n  }, props.children, isWrittingWord() ? /*#__PURE__*/React.createElement(SuggestionList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 28\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n}\n\nexport default SuggestionsContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/SearchSuggestion/SearchSuggestion.js"],"names":["React","useState","useEffect","API_ENDPOINT","useKeypress","styles","query_search","SuggestionsContainer","props","state","dispatchState","suggestions","setSuggestions","selected","setSelected","length","conslo","isWrittingWord","addToSearchTerm","word","console","log","handleSearchSubmit","len","searchTerm","last","filterSuggestions","filter","suggestion","test","wordList","split","type","payload","join","onClick","fetch","then","result","json","catch","err","SuggestionList","map","index","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_ENDPOINT }  from \"../../myConfig\";\nimport useKeypress from '../../hooks/useKeypress';\nimport styles from './SearchSuggestion.css'; \n\n/*\n * =======================================\n *      Search suggestion componenet\n * =======================================\n * for predicting  what the user is going to type\n */\n\nlet query_search = 'querysearch/' //add this to myconfig\n\nfunction SuggestionsContainer(props){\n\t\t/* tahek a child fro a input an add suggestions to it */\n\t\t// handle the change by seting the state variable to \n\t\tlet state = props.state\n\t\tlet dispatchState = props.dispatchState;\n\t\tconst [suggestions, setSuggestions] = useState([])\t\n\t\tconst [selected, setSelected] = useState(1)\t\n\t\t\n\n\t\tuseKeypress('ArrowDown', () =>\n\t\t\t\t(selected < 0)?\n\t\t\t\tsetSelected(suggestions.length-1)\n\t\t\t\t: setSelected(selected + 1)\n\t\t);\n\n\t\tuseKeypress('ArrowUp', () => \n\t\t\t\t(selected > suggestions.length-1)?\n\t\t\t\tsetSelected(0)\n\t\t\t\t:setSelected(selected - 1)\n\t\t);\n\n\t\tuseKeypress('Enter', () => {\n\t\t\t\tconslo\n\t\t\t\tif(isWrittingWord){\n\t\t\t\t\t\tif(suggestions.length > 0){\n\t\t\t\t\t\t\t\taddToSearchTerm(suggestions[selected].word);\n\t\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t\tconsole.log(\"I ran\")\n\t\t\t\t\t\tprops.handleSearchSubmit()\n\t\t\t\t\t\t\t//make import from navbar and do search\t\n\t\t\t\t}\n\t\t})\n\n\t\tconst isWrittingWord = () =>{\n\t\t\t\t/* uses the state to see if\n\t\t\t\t\t\t* the user is in the middle of writting a word */\n\t\t\t\tlet len = state.searchTerm.length;\n\t\t\t\tlet last = state.searchTerm[state.searchTerm.length-1];\n\t\t\t\tif(len === 0){ return false;\n\t\t\t\t}else if (last === \" \"){ return false;\n\t\t\t\t}else return true; \n\t\t}\n\n\t\tconst filterSuggestions = suggestions => \n\t\t\t\tsuggestions.filter( suggestion => /\\s/.test(suggestion))\n\n\t\t\n\t\tconst addToSearchTerm = (word) => {\n\t\t\t\t/* append a given word to the seate searchTerm */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\tlet len = wordList.length \n\t\t\t\twordList[len-1] = word // set the last word as clicke word\n\t\t\t\tdispatchState({ \n\t\t\t\t\t\ttype: 'SET_SEARCH_TERM',\n\t\t\t\t\t\tpayload: wordList.join(\" \") + \" \",\n\t\t\t\t});\t\n\t\t\t\tsetSuggestions([]); // reset suggestions\n\t\t\t\tsetSelected(0); // reset selected\n\t\t}\n\n\n\t\tconst onClick = (word) => addToSearchTerm(word);\n\t\t\n\n\t\tuseEffect(() => {\n\t\t\t\t/* query server for search suggestionsa\n\t\t\t\t * and sets the  */\n\t\t\t\tlet wordList = state.searchTerm.split(\" \");\n\t\t\t\t//split the search into words\n\t\t\t\tlet len = wordList.length;\n\t\t\t\t//get the length\n\t\t\t\tlet last = wordList[len-1]\n\t\t\t\t//fetch the last element \n\t\t\t\tfetch(API_ENDPOINT + query_search + last)\n\t\t\t\t\t\t.then(result => result.json()) //unpack suggestions\n\t\t\t\t\t\t.then(result => {console.log(result); return result}) //unpack suggestions\n\t\t\t\t\t\t.then(suggestions => filterSuggestions(suggestions))\n\t\t\t\t\t\t.then(suggestions => setSuggestions(suggestions))\n\t\t\t\t\t\t.catch((err) => console.log(err));\n\t\t}, [state.searchTerm, dispatchState])\n\n\n\t\tconst SuggestionList = () =>\n\t\t\t\t<ul class=\"suggestions\">\n\t\t\t\t\t\t{ suggestions.map(\n\t\t\t\t\t\t\t\t(suggestion, index) => {  \n\t\t\t\t\t\t\t\t\t\treturn  <li \n\t\t\t\t\t\t\t\t\t\t\t\tkey={index} \n\t\t\t\t\t\t\t\t\t\t\t\tclassName={index === selected? \"selected\": null}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onClick(suggestion.word)}>\n\t\t\t\t\t\t\t\t\t\t\t\t{suggestion.word}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t</ul>\n\n\t\t\t\t\t\treturn <div className=\"input\">\n\t\t\t\t\t\t\t\t{props.children}\n\t\t\t\t\t\t\t\t{isWrittingWord()? <SuggestionList/>: <></> }\n\t\t\t\t\t\t</div>\n}\n\nexport default SuggestionsContainer;\n"]},"metadata":{},"sourceType":"module"}