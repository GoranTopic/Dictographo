{"ast":null,"code":"var _jsxFileName = \"/home/telix/dictographo/frontend/src/Components/Alert.js\";\nimport React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({\n  state,\n  dispatchState\n}) {\n  /* functions that return an error mesage depending onthe state */\n  if (state.isError) {\n    return /*#__PURE__*/React.createElement(Alert, {\n      variant: \"danger\",\n      dismissible: true,\n      onClose: () => dispatchState({\n        type: 'DISSMISS_ERROR'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Alert.Heading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }, \"Oh Snap!\"), state.isWordNotFound ?\n    /*#__PURE__*/\n    //if the there is not words found\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    }, \"Looks like \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 23\n      }\n    }, [...state.wordsNotFound].map(word => /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 50\n      }\n    }, word, \", \"))), \"in no our dictionary yet.\") : /*#__PURE__*/React.createElement(React.Fragment, null), state.isPathNotFound ?\n    /*#__PURE__*/\n    //if there is a path not found\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, \"looks like there is no path between:\", [...state.pathsNotFound].map(path => /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 24\n      }\n    }, path.first), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 48\n      }\n    }, path.last)))) : /*#__PURE__*/React.createElement(React.Fragment, null), state.isFetchFailed ?\n    /*#__PURE__*/\n    //There is a problem with the network\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"Could not connect to server.\") : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, state.errorMsg));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n}\n\nexport default AlertContainer;","map":{"version":3,"sources":["/home/telix/dictographo/frontend/src/Components/Alert.js"],"names":["React","Alert","AlertContainer","state","dispatchState","isError","type","isWordNotFound","wordsNotFound","map","word","isPathNotFound","pathsNotFound","path","first","last","isFetchFailed","errorMsg"],"mappings":";AAAA,OAAOA,KAAP,MAAmB,OAAnB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,OAAO,sCAAP;AAEA;;;;;;;AAOA,SAASC,cAAT,CAAwB;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAxB,EAAgD;AAC9C;AACA,MAAID,KAAK,CAACE,OAAV,EAAmB;AACjB,wBACE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,QAAf;AAAwB,MAAA,WAAW,MAAnC;AACE,MAAA,OAAO,EAAE,MAAMD,aAAa,CAAC;AAACE,QAAAA,IAAI,EAAE;AAAP,OAAD,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGGH,KAAK,CAACI,cAAN;AAAA;AAAsB;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACV,CAAC,GAAGJ,KAAK,CAACK,aAAV,EAAyBC,GAAzB,CAA6BC,IAAI,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,IAAJ,OAArC,CADU,CAAd,8BADC,gBAGmC,yCANtC,EAOGP,KAAK,CAACQ,cAAN;AAAA;AAAsB;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACG,CAAC,GAAGR,KAAK,CAACS,aAAV,EAAyBH,GAAzB,CACCI,IAAI,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,IAAI,CAACC,KAAT,CAAH,wBAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,IAAI,CAACE,IAAT,CAA3B,CADT,CADH,CADC,gBAIM,yCAXT,EAYGZ,KAAK,CAACa,aAAN;AAAA;AAAqB;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADC,gBACqC,yCAbxC,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIb,KAAK,CAACc,QAAV,CAdF,CADF;AAiBD,GAlBD,MAkBK;AACH,wBAAO,yCAAP;AACD;AACF;;AAED,eAAef,cAAf","sourcesContent":["import React  from 'react';\nimport { Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/*\n * =======================================\n *      Alert Component for React \n * =======================================\n * \tUsing ReaactBootStrap to render the the alert\n */\n\nfunction AlertContainer({state, dispatchState}) {\n\t\t/* functions that return an error mesage depending onthe state */\n\t\tif (state.isError) {\n\t\t\t\treturn(\n\t\t\t\t\t\t<Alert variant=\"danger\" dismissible \n\t\t\t\t\t\t\t\tonClose={() => dispatchState({type: 'DISSMISS_ERROR'})} >\n\t\t\t\t\t\t\t\t<Alert.Heading>Oh Snap!</Alert.Heading>\n\t\t\t\t\t\t\t\t{state.isWordNotFound? //if the there is not words found\n\t\t\t\t\t\t\t\t<p>Looks like <b>\n\t\t\t\t\t\t\t\t\t\t{ [...state.wordsNotFound].map(word => <i>{word}, </i> ) }\n\t\t\t\t\t\t\t\t</b>in no our dictionary yet.</p> : <></>}\n\t\t\t\t\t\t\t\t{state.isPathNotFound? //if there is a path not found\n\t\t\t\t\t\t\t\t<p>looks like there is no path between: \n\t\t\t\t\t\t\t\t\t\t{[...state.pathsNotFound].map(\n\t\t\t\t\t\t\t\t\t\t\t\tpath => <i><b>{path.first}</b> and <b>{path.last}</b></i> )}\n\t\t\t\t\t\t\t\t</p> : <></> }\n\t\t\t\t\t\t\t\t{state.isFetchFailed? //There is a problem with the network\n\t\t\t\t\t\t\t\t<p>Could not connect to server.</p> : <></> }\n\t\t\t\t\t\t\t\t<p>{state.errorMsg}</p>\n\t\t\t\t\t\t</Alert>)\n\t\t}else{\n\t\t\t\treturn <></>\n\t\t}\n}\n\nexport default AlertContainer;\n\n"]},"metadata":{},"sourceType":"module"}